
example.elf:     file format elf32-littlenios2
example.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000550c memsz 0x0000550c flags r-x
    LOAD off    0x0000652c vaddr 0x0100552c paddr 0x01006f74 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x000089bc vaddr 0x010089bc paddr 0x010089bc align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005310  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  010054c4  010054c4  000064c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  0100552c  01006f74  0000652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  010089bc  010089bc  000089bc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00007f74  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00007fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d1a  00000000  00000000  00008878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000191ce  00000000  00000000  00009592  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004dcc  00000000  00000000  00022760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c48d  00000000  00000000  0002752c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fcc  00000000  00000000  000339bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001712  00000000  00000000  00034988  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e18  00000000  00000000  0003609a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00039eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00039ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c53f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003c542  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003c54e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003c54f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003c550  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003c55b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003c566  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0003c571  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  0003c57c  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003c2a9  00000000  00000000  0003c5a0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
010054c4 l    d  .rodata	00000000 .rodata
0100552c l    d  .rwdata	00000000 .rwdata
010089bc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0100552c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01001b58 l     F .text	00000058 std
01001c64 l     F .text	00000008 __fp_lock
01001c6c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
01002c9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01002cfc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01002e00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01002f24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01003004 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01003164 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01003394 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01006f64 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100364c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01005edc l     O .rwdata	00001060 jtag_uart_0
01003724 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01003964 l     F .text	00000228 altera_avalon_jtag_uart_irq
01003b8c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100442c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100483c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100498c l     F .text	000000f8 alt_file_locked
01004c10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
010052ac l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
01005460 l     F .text	00000040 alt_sim_halt
01002a04 g     F .text	00000070 _isatty_r
010031c4 g     F .text	0000006c alt_main
01000220 g     F .text	000000a0 _puts_r
01008a0c g     O .bss	00000100 alt_irq
01002a74 g     F .text	00000078 _lseek_r
01006f74 g       *ABS*	00000000 __flash_rwdata_start
01008c9c g       *ABS*	00000000 __alt_heap_start
01002640 g     F .text	00000068 __sseek
01001bc0 g     F .text	000000a4 __sinit
01001cc0 g     F .text	0000009c __sfmoreglue
01003250 g     F .text	00000020 __malloc_unlock
010010a8 g     F .text	000000e0 memmove
01001cb0 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
01000000 g     F .entry	0000000c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002990 g     F .text	00000074 _fstat_r
010089c8 g     O .bss	00000004 errno
010089d0 g     O .bss	00000004 alt_argv
0100ef3c g       *ABS*	00000000 _gp
01005d5c g     O .rwdata	00000180 alt_fd_list
01004e34 g     F .text	00000094 alt_find_dev
01001008 g     F .text	000000a0 memcpy
01001ca4 g     F .text	0000000c _cleanup_r
01004914 g     F .text	00000078 alt_io_redirect
010054c4 g       *ABS*	00000000 __DTOR_END__
010002c0 g     F .text	00000014 puts
01003da4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01002e60 g     F .text	000000c4 isatty
010089bc g     O .bss	00000004 __malloc_top_pad
01000348 g     F .text	0000049c __sfvwrite_r
0100177c g     F .text	00000070 _sbrk_r
01002aec g     F .text	00000078 _read_r
01006f5c g     O .rwdata	00000004 alt_max_fd
0100286c g     F .text	00000110 _fclose_r
01001b24 g     F .text	00000034 fflush
010089c0 g     O .bss	00000004 __malloc_max_sbrked_mem
01003070 g     F .text	000000f4 lseek
01006f40 g     O .rwdata	00000004 _global_impure_ptr
01001188 g     F .text	000005f4 _realloc_r
01008c9c g       *ABS*	00000000 __bss_end
01004744 g     F .text	000000f8 alt_iic_isr_register
01004d08 g     F .text	0000010c alt_tick
01001c8c g     F .text	00000018 __fp_lock_all
010046fc g     F .text	00000048 alt_ic_irq_enabled
01004c70 g     F .text	00000098 alt_alarm_stop
010089d8 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
01005d34 g     O .rwdata	00000028 alt_dev_null
0100435c g     F .text	0000001c alt_dcache_flush_all
01006f74 g       *ABS*	00000000 __ram_rwdata_end
01006f54 g     O .rwdata	00000008 alt_dev_list
01003528 g     F .text	00000124 write
0100552c g       *ABS*	00000000 __ram_rodata_end
01002d28 g     F .text	000000d8 fstat
01008c9c g       *ABS*	00000000 end
010038a4 g     F .text	000000c0 altera_avalon_jtag_uart_init
010054c0 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01003fc8 g     F .text	00000240 altera_avalon_jtag_uart_write
01001bb0 g     F .text	00000004 __sfp_lock_acquire
01000f24 g     F .text	000000e4 memchr
01001f78 g     F .text	00000314 _free_r
010052b0 g     F .text	000001b0 __call_exitprocs
01006f48 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
010089dc g     O .bss	00000004 _alt_tick_rate
010089e0 g     O .bss	00000004 _alt_nticks
01003270 g     F .text	00000124 read
010036e0 g     F .text	00000044 alt_sys_init
01005178 g     F .text	00000134 __register_exitproc
01003c3c g     F .text	00000074 altera_avalon_jtag_uart_close
01002b64 g     F .text	00000038 __mulsi3
0100552c g       *ABS*	00000000 __ram_rwdata_start
010054c4 g       *ABS*	00000000 __ram_rodata_start
010089e4 g     O .bss	00000028 __malloc_current_mallinfo
0100375c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01004fe8 g     F .text	000000d0 alt_get_fd
010027fc g     F .text	00000070 _close_r
01005104 g     F .text	00000074 memcmp
0100380c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01008c9c g       *ABS*	00000000 __alt_stack_base
01003854 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010017ec g     F .text	0000013c __swsetup_r
01001d5c g     F .text	000000f0 __sfp
0100592c g     O .rwdata	00000408 __malloc_av_
01001bbc g     F .text	00000004 __sinit_lock_release
01002724 g     F .text	00000060 __sread
01004ec8 g     F .text	00000120 alt_find_file
01004378 g     F .text	000000b4 alt_dev_llist_insert
01003230 g     F .text	00000020 __malloc_lock
0100346c g     F .text	000000bc sbrk
01001928 g     F .text	000001fc _fflush_r
010089bc g       *ABS*	00000000 __bss_start
010025a0 g     F .text	00000098 memset
010001f0 g     F .text	00000030 main
010089d4 g     O .bss	00000004 alt_envp
010089c4 g     O .bss	00000004 __malloc_max_total_mem
010037b4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01002638 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100297c g     F .text	00000014 fclose
01008b0c g     O .bss	00000190 _atexit0
010007e4 g     F .text	00000740 _malloc_r
01006f60 g     O .rwdata	00000004 alt_errno
01002354 g     F .text	000000b8 _fwalk
01001e4c g     F .text	0000012c _malloc_trim_r
010054c4 g       *ABS*	00000000 __CTOR_END__
010054c4 g       *ABS*	00000000 __flash_rodata_start
010054c4 g       *ABS*	00000000 __DTOR_LIST__
010036ac g     F .text	00000034 alt_irq_init
010033f4 g     F .text	00000078 alt_release_fd
010050b8 g     F .text	00000014 atexit
01002784 g     F .text	00000078 _write_r
01006f3c g     O .rwdata	00000004 _impure_ptr
010089cc g     O .bss	00000004 alt_argc
010044f0 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01001c74 g     F .text	00000018 __fp_unlock_all
01006f4c g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01004570 g     F .text	00000050 alt_ic_isr_register
01006f74 g       *ABS*	00000000 _edata
01008c9c g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
01003cb0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100465c g     F .text	000000a0 alt_ic_irq_disable
010026a8 g     F .text	0000007c __swrite
01006f44 g     O .rwdata	00000004 __malloc_trim_threshold
01004e14 g     F .text	00000020 altera_nios2_qsys_irq_init
010050cc g     F .text	00000038 exit
0100228c g     F .text	000000c8 _fwalk_reent
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01001bb4 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
010054a0 g     F .text	00000020 _exit
01004208 g     F .text	00000154 alt_alarm_start
0100240c g     F .text	00000194 __smakebuf_r
010002d4 g     F .text	00000074 strlen
01004a84 g     F .text	0000018c open
01004554 g     F .text	0000001c alt_icache_flush_all
01006f68 g     O .rwdata	00000004 alt_priority_mask
010045c0 g     F .text	0000009c alt_ic_irq_enable
01006f6c g     O .rwdata	00000008 alt_alarm_list
0100448c g     F .text	00000064 _do_ctors
01002b9c g     F .text	00000100 close
01002f84 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
01001bb8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18e28304 	addi	r3,r3,-30196
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18e28304 	addi	r3,r3,-30196
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804034 	movhi	gp,256
    ori gp, gp, %lo(_gp)
 10001c0:	d6bbcf14 	ori	gp,gp,61244
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001c8:	10a26f14 	ori	r2,r2,35260

    movhi r3, %hi(__bss_end)
 10001cc:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001d0:	18e32714 	ori	r3,r3,35996

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	1002f840 	call	1002f84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	10031c40 	call	10031c4 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <main>:
#include <stdio.h>
#define switches (volatile char *) 0x0002000
#define leds (char *) 0x0002010

int main()
{
 10001f0:	defffe04 	addi	sp,sp,-8
 10001f4:	dfc00115 	stw	ra,4(sp)
 10001f8:	df000015 	stw	fp,0(sp)
 10001fc:	d839883a 	mov	fp,sp
  printf("This confirms that my program is running\n");
 1000200:	01004034 	movhi	r4,256
 1000204:	21153104 	addi	r4,r4,21700
 1000208:	10002c00 	call	10002c0 <puts>
  while(1)
	  *leds = *switches;
 100020c:	00880404 	movi	r2,8208
 1000210:	00c80004 	movi	r3,8192
 1000214:	18c00003 	ldbu	r3,0(r3)
 1000218:	10c00005 	stb	r3,0(r2)
 100021c:	003ffb06 	br	100020c <main+0x1c>

01000220 <_puts_r>:
 1000220:	defff604 	addi	sp,sp,-40
 1000224:	dc400715 	stw	r17,28(sp)
 1000228:	2023883a 	mov	r17,r4
 100022c:	2809883a 	mov	r4,r5
 1000230:	dfc00915 	stw	ra,36(sp)
 1000234:	dcc00815 	stw	r19,32(sp)
 1000238:	2827883a 	mov	r19,r5
 100023c:	10002d40 	call	10002d4 <strlen>
 1000240:	89400217 	ldw	r5,8(r17)
 1000244:	00c04034 	movhi	r3,256
 1000248:	18d53c04 	addi	r3,r3,21744
 100024c:	01c00044 	movi	r7,1
 1000250:	12000044 	addi	r8,r2,1
 1000254:	d8c00515 	stw	r3,20(sp)
 1000258:	d9c00615 	stw	r7,24(sp)
 100025c:	d8c00304 	addi	r3,sp,12
 1000260:	01c00084 	movi	r7,2
 1000264:	8809883a 	mov	r4,r17
 1000268:	d80d883a 	mov	r6,sp
 100026c:	d8c00015 	stw	r3,0(sp)
 1000270:	dcc00315 	stw	r19,12(sp)
 1000274:	da000215 	stw	r8,8(sp)
 1000278:	d9c00115 	stw	r7,4(sp)
 100027c:	d8800415 	stw	r2,16(sp)
 1000280:	10003480 	call	1000348 <__sfvwrite_r>
 1000284:	00ffffc4 	movi	r3,-1
 1000288:	10000626 	beq	r2,zero,10002a4 <_puts_r+0x84>
 100028c:	1805883a 	mov	r2,r3
 1000290:	dfc00917 	ldw	ra,36(sp)
 1000294:	dcc00817 	ldw	r19,32(sp)
 1000298:	dc400717 	ldw	r17,28(sp)
 100029c:	dec00a04 	addi	sp,sp,40
 10002a0:	f800283a 	ret
 10002a4:	00c00284 	movi	r3,10
 10002a8:	1805883a 	mov	r2,r3
 10002ac:	dfc00917 	ldw	ra,36(sp)
 10002b0:	dcc00817 	ldw	r19,32(sp)
 10002b4:	dc400717 	ldw	r17,28(sp)
 10002b8:	dec00a04 	addi	sp,sp,40
 10002bc:	f800283a 	ret

010002c0 <puts>:
 10002c0:	00804034 	movhi	r2,256
 10002c4:	109bcf04 	addi	r2,r2,28476
 10002c8:	200b883a 	mov	r5,r4
 10002cc:	11000017 	ldw	r4,0(r2)
 10002d0:	10002201 	jmpi	1000220 <_puts_r>

010002d4 <strlen>:
 10002d4:	208000cc 	andi	r2,r4,3
 10002d8:	2011883a 	mov	r8,r4
 10002dc:	1000161e 	bne	r2,zero,1000338 <strlen+0x64>
 10002e0:	20c00017 	ldw	r3,0(r4)
 10002e4:	017fbff4 	movhi	r5,65279
 10002e8:	297fbfc4 	addi	r5,r5,-257
 10002ec:	01e02074 	movhi	r7,32897
 10002f0:	39e02004 	addi	r7,r7,-32640
 10002f4:	1945883a 	add	r2,r3,r5
 10002f8:	11c4703a 	and	r2,r2,r7
 10002fc:	00c6303a 	nor	r3,zero,r3
 1000300:	1886703a 	and	r3,r3,r2
 1000304:	18000c1e 	bne	r3,zero,1000338 <strlen+0x64>
 1000308:	280d883a 	mov	r6,r5
 100030c:	380b883a 	mov	r5,r7
 1000310:	21000104 	addi	r4,r4,4
 1000314:	20800017 	ldw	r2,0(r4)
 1000318:	1187883a 	add	r3,r2,r6
 100031c:	1946703a 	and	r3,r3,r5
 1000320:	0084303a 	nor	r2,zero,r2
 1000324:	10c4703a 	and	r2,r2,r3
 1000328:	103ff926 	beq	r2,zero,1000310 <strlen+0x3c>
 100032c:	20800007 	ldb	r2,0(r4)
 1000330:	10000326 	beq	r2,zero,1000340 <strlen+0x6c>
 1000334:	21000044 	addi	r4,r4,1
 1000338:	20800007 	ldb	r2,0(r4)
 100033c:	103ffd1e 	bne	r2,zero,1000334 <strlen+0x60>
 1000340:	2205c83a 	sub	r2,r4,r8
 1000344:	f800283a 	ret

01000348 <__sfvwrite_r>:
 1000348:	30800217 	ldw	r2,8(r6)
 100034c:	defff504 	addi	sp,sp,-44
 1000350:	df000915 	stw	fp,36(sp)
 1000354:	dd800715 	stw	r22,28(sp)
 1000358:	dc800315 	stw	r18,12(sp)
 100035c:	dfc00a15 	stw	ra,40(sp)
 1000360:	ddc00815 	stw	r23,32(sp)
 1000364:	dd400615 	stw	r21,24(sp)
 1000368:	dd000515 	stw	r20,20(sp)
 100036c:	dcc00415 	stw	r19,16(sp)
 1000370:	dc400215 	stw	r17,8(sp)
 1000374:	dc000115 	stw	r16,4(sp)
 1000378:	302d883a 	mov	r22,r6
 100037c:	2039883a 	mov	fp,r4
 1000380:	2825883a 	mov	r18,r5
 1000384:	10001c26 	beq	r2,zero,10003f8 <__sfvwrite_r+0xb0>
 1000388:	29c0030b 	ldhu	r7,12(r5)
 100038c:	3880020c 	andi	r2,r7,8
 1000390:	10002726 	beq	r2,zero,1000430 <__sfvwrite_r+0xe8>
 1000394:	28800417 	ldw	r2,16(r5)
 1000398:	10002526 	beq	r2,zero,1000430 <__sfvwrite_r+0xe8>
 100039c:	3880008c 	andi	r2,r7,2
 10003a0:	b5400017 	ldw	r21,0(r22)
 10003a4:	10002826 	beq	r2,zero,1000448 <__sfvwrite_r+0x100>
 10003a8:	0021883a 	mov	r16,zero
 10003ac:	0023883a 	mov	r17,zero
 10003b0:	880d883a 	mov	r6,r17
 10003b4:	e009883a 	mov	r4,fp
 10003b8:	00810004 	movi	r2,1024
 10003bc:	80006e26 	beq	r16,zero,1000578 <__sfvwrite_r+0x230>
 10003c0:	800f883a 	mov	r7,r16
 10003c4:	91400717 	ldw	r5,28(r18)
 10003c8:	1400012e 	bgeu	r2,r16,10003d0 <__sfvwrite_r+0x88>
 10003cc:	100f883a 	mov	r7,r2
 10003d0:	90c00917 	ldw	r3,36(r18)
 10003d4:	183ee83a 	callr	r3
 10003d8:	1007883a 	mov	r3,r2
 10003dc:	80a1c83a 	sub	r16,r16,r2
 10003e0:	88a3883a 	add	r17,r17,r2
 10003e4:	00806d0e 	bge	zero,r2,100059c <__sfvwrite_r+0x254>
 10003e8:	b0800217 	ldw	r2,8(r22)
 10003ec:	10c5c83a 	sub	r2,r2,r3
 10003f0:	b0800215 	stw	r2,8(r22)
 10003f4:	103fee1e 	bne	r2,zero,10003b0 <__sfvwrite_r+0x68>
 10003f8:	0009883a 	mov	r4,zero
 10003fc:	2005883a 	mov	r2,r4
 1000400:	dfc00a17 	ldw	ra,40(sp)
 1000404:	df000917 	ldw	fp,36(sp)
 1000408:	ddc00817 	ldw	r23,32(sp)
 100040c:	dd800717 	ldw	r22,28(sp)
 1000410:	dd400617 	ldw	r21,24(sp)
 1000414:	dd000517 	ldw	r20,20(sp)
 1000418:	dcc00417 	ldw	r19,16(sp)
 100041c:	dc800317 	ldw	r18,12(sp)
 1000420:	dc400217 	ldw	r17,8(sp)
 1000424:	dc000117 	ldw	r16,4(sp)
 1000428:	dec00b04 	addi	sp,sp,44
 100042c:	f800283a 	ret
 1000430:	10017ec0 	call	10017ec <__swsetup_r>
 1000434:	1000e41e 	bne	r2,zero,10007c8 <__sfvwrite_r+0x480>
 1000438:	91c0030b 	ldhu	r7,12(r18)
 100043c:	b5400017 	ldw	r21,0(r22)
 1000440:	3880008c 	andi	r2,r7,2
 1000444:	103fd81e 	bne	r2,zero,10003a8 <__sfvwrite_r+0x60>
 1000448:	3880004c 	andi	r2,r7,1
 100044c:	1005003a 	cmpeq	r2,r2,zero
 1000450:	10005726 	beq	r2,zero,10005b0 <__sfvwrite_r+0x268>
 1000454:	0029883a 	mov	r20,zero
 1000458:	002f883a 	mov	r23,zero
 100045c:	a0004226 	beq	r20,zero,1000568 <__sfvwrite_r+0x220>
 1000460:	3880800c 	andi	r2,r7,512
 1000464:	94000217 	ldw	r16,8(r18)
 1000468:	10008b26 	beq	r2,zero,1000698 <__sfvwrite_r+0x350>
 100046c:	800d883a 	mov	r6,r16
 1000470:	a400a536 	bltu	r20,r16,1000708 <__sfvwrite_r+0x3c0>
 1000474:	3881200c 	andi	r2,r7,1152
 1000478:	10002726 	beq	r2,zero,1000518 <__sfvwrite_r+0x1d0>
 100047c:	90800517 	ldw	r2,20(r18)
 1000480:	92000417 	ldw	r8,16(r18)
 1000484:	91400017 	ldw	r5,0(r18)
 1000488:	1087883a 	add	r3,r2,r2
 100048c:	1887883a 	add	r3,r3,r2
 1000490:	1808d7fa 	srli	r4,r3,31
 1000494:	2a21c83a 	sub	r16,r5,r8
 1000498:	80800044 	addi	r2,r16,1
 100049c:	20c9883a 	add	r4,r4,r3
 10004a0:	2027d07a 	srai	r19,r4,1
 10004a4:	a085883a 	add	r2,r20,r2
 10004a8:	980d883a 	mov	r6,r19
 10004ac:	9880022e 	bgeu	r19,r2,10004b8 <__sfvwrite_r+0x170>
 10004b0:	1027883a 	mov	r19,r2
 10004b4:	100d883a 	mov	r6,r2
 10004b8:	3881000c 	andi	r2,r7,1024
 10004bc:	1000b826 	beq	r2,zero,10007a0 <__sfvwrite_r+0x458>
 10004c0:	300b883a 	mov	r5,r6
 10004c4:	e009883a 	mov	r4,fp
 10004c8:	10007e40 	call	10007e4 <_malloc_r>
 10004cc:	10003126 	beq	r2,zero,1000594 <__sfvwrite_r+0x24c>
 10004d0:	91400417 	ldw	r5,16(r18)
 10004d4:	1009883a 	mov	r4,r2
 10004d8:	800d883a 	mov	r6,r16
 10004dc:	1023883a 	mov	r17,r2
 10004e0:	10010080 	call	1001008 <memcpy>
 10004e4:	90c0030b 	ldhu	r3,12(r18)
 10004e8:	00beffc4 	movi	r2,-1025
 10004ec:	1886703a 	and	r3,r3,r2
 10004f0:	18c02014 	ori	r3,r3,128
 10004f4:	90c0030d 	sth	r3,12(r18)
 10004f8:	9c07c83a 	sub	r3,r19,r16
 10004fc:	8c05883a 	add	r2,r17,r16
 1000500:	a00d883a 	mov	r6,r20
 1000504:	a021883a 	mov	r16,r20
 1000508:	90800015 	stw	r2,0(r18)
 100050c:	90c00215 	stw	r3,8(r18)
 1000510:	94400415 	stw	r17,16(r18)
 1000514:	94c00515 	stw	r19,20(r18)
 1000518:	91000017 	ldw	r4,0(r18)
 100051c:	b80b883a 	mov	r5,r23
 1000520:	a023883a 	mov	r17,r20
 1000524:	10010a80 	call	10010a8 <memmove>
 1000528:	90c00217 	ldw	r3,8(r18)
 100052c:	90800017 	ldw	r2,0(r18)
 1000530:	a027883a 	mov	r19,r20
 1000534:	1c07c83a 	sub	r3,r3,r16
 1000538:	1405883a 	add	r2,r2,r16
 100053c:	90c00215 	stw	r3,8(r18)
 1000540:	a021883a 	mov	r16,r20
 1000544:	90800015 	stw	r2,0(r18)
 1000548:	b0800217 	ldw	r2,8(r22)
 100054c:	1405c83a 	sub	r2,r2,r16
 1000550:	b0800215 	stw	r2,8(r22)
 1000554:	103fa826 	beq	r2,zero,10003f8 <__sfvwrite_r+0xb0>
 1000558:	a469c83a 	sub	r20,r20,r17
 100055c:	91c0030b 	ldhu	r7,12(r18)
 1000560:	bcef883a 	add	r23,r23,r19
 1000564:	a03fbe1e 	bne	r20,zero,1000460 <__sfvwrite_r+0x118>
 1000568:	adc00017 	ldw	r23,0(r21)
 100056c:	ad000117 	ldw	r20,4(r21)
 1000570:	ad400204 	addi	r21,r21,8
 1000574:	003fb906 	br	100045c <__sfvwrite_r+0x114>
 1000578:	ac400017 	ldw	r17,0(r21)
 100057c:	ac000117 	ldw	r16,4(r21)
 1000580:	ad400204 	addi	r21,r21,8
 1000584:	003f8a06 	br	10003b0 <__sfvwrite_r+0x68>
 1000588:	91400417 	ldw	r5,16(r18)
 100058c:	e009883a 	mov	r4,fp
 1000590:	1001f780 	call	1001f78 <_free_r>
 1000594:	00800304 	movi	r2,12
 1000598:	e0800015 	stw	r2,0(fp)
 100059c:	9080030b 	ldhu	r2,12(r18)
 10005a0:	013fffc4 	movi	r4,-1
 10005a4:	10801014 	ori	r2,r2,64
 10005a8:	9080030d 	sth	r2,12(r18)
 10005ac:	003f9306 	br	10003fc <__sfvwrite_r+0xb4>
 10005b0:	0027883a 	mov	r19,zero
 10005b4:	002f883a 	mov	r23,zero
 10005b8:	d8000015 	stw	zero,0(sp)
 10005bc:	0029883a 	mov	r20,zero
 10005c0:	98001e26 	beq	r19,zero,100063c <__sfvwrite_r+0x2f4>
 10005c4:	d8c00017 	ldw	r3,0(sp)
 10005c8:	1804c03a 	cmpne	r2,r3,zero
 10005cc:	10005e26 	beq	r2,zero,1000748 <__sfvwrite_r+0x400>
 10005d0:	9821883a 	mov	r16,r19
 10005d4:	a4c0012e 	bgeu	r20,r19,10005dc <__sfvwrite_r+0x294>
 10005d8:	a021883a 	mov	r16,r20
 10005dc:	91000017 	ldw	r4,0(r18)
 10005e0:	90800417 	ldw	r2,16(r18)
 10005e4:	91800217 	ldw	r6,8(r18)
 10005e8:	91c00517 	ldw	r7,20(r18)
 10005ec:	1100022e 	bgeu	r2,r4,10005f8 <__sfvwrite_r+0x2b0>
 10005f0:	31e3883a 	add	r17,r6,r7
 10005f4:	8c001616 	blt	r17,r16,1000650 <__sfvwrite_r+0x308>
 10005f8:	81c03816 	blt	r16,r7,10006dc <__sfvwrite_r+0x394>
 10005fc:	90c00917 	ldw	r3,36(r18)
 1000600:	91400717 	ldw	r5,28(r18)
 1000604:	e009883a 	mov	r4,fp
 1000608:	b80d883a 	mov	r6,r23
 100060c:	183ee83a 	callr	r3
 1000610:	1023883a 	mov	r17,r2
 1000614:	00bfe10e 	bge	zero,r2,100059c <__sfvwrite_r+0x254>
 1000618:	a469c83a 	sub	r20,r20,r17
 100061c:	a0001826 	beq	r20,zero,1000680 <__sfvwrite_r+0x338>
 1000620:	b0800217 	ldw	r2,8(r22)
 1000624:	1445c83a 	sub	r2,r2,r17
 1000628:	b0800215 	stw	r2,8(r22)
 100062c:	103f7226 	beq	r2,zero,10003f8 <__sfvwrite_r+0xb0>
 1000630:	9c67c83a 	sub	r19,r19,r17
 1000634:	bc6f883a 	add	r23,r23,r17
 1000638:	983fe21e 	bne	r19,zero,10005c4 <__sfvwrite_r+0x27c>
 100063c:	adc00017 	ldw	r23,0(r21)
 1000640:	acc00117 	ldw	r19,4(r21)
 1000644:	ad400204 	addi	r21,r21,8
 1000648:	d8000015 	stw	zero,0(sp)
 100064c:	003fdc06 	br	10005c0 <__sfvwrite_r+0x278>
 1000650:	b80b883a 	mov	r5,r23
 1000654:	880d883a 	mov	r6,r17
 1000658:	10010a80 	call	10010a8 <memmove>
 100065c:	90c00017 	ldw	r3,0(r18)
 1000660:	e009883a 	mov	r4,fp
 1000664:	900b883a 	mov	r5,r18
 1000668:	1c47883a 	add	r3,r3,r17
 100066c:	90c00015 	stw	r3,0(r18)
 1000670:	10019280 	call	1001928 <_fflush_r>
 1000674:	103fc91e 	bne	r2,zero,100059c <__sfvwrite_r+0x254>
 1000678:	a469c83a 	sub	r20,r20,r17
 100067c:	a03fe81e 	bne	r20,zero,1000620 <__sfvwrite_r+0x2d8>
 1000680:	e009883a 	mov	r4,fp
 1000684:	900b883a 	mov	r5,r18
 1000688:	10019280 	call	1001928 <_fflush_r>
 100068c:	103fc31e 	bne	r2,zero,100059c <__sfvwrite_r+0x254>
 1000690:	d8000015 	stw	zero,0(sp)
 1000694:	003fe206 	br	1000620 <__sfvwrite_r+0x2d8>
 1000698:	91000017 	ldw	r4,0(r18)
 100069c:	90800417 	ldw	r2,16(r18)
 10006a0:	1100022e 	bgeu	r2,r4,10006ac <__sfvwrite_r+0x364>
 10006a4:	8023883a 	mov	r17,r16
 10006a8:	85003136 	bltu	r16,r20,1000770 <__sfvwrite_r+0x428>
 10006ac:	91c00517 	ldw	r7,20(r18)
 10006b0:	a1c01836 	bltu	r20,r7,1000714 <__sfvwrite_r+0x3cc>
 10006b4:	90c00917 	ldw	r3,36(r18)
 10006b8:	91400717 	ldw	r5,28(r18)
 10006bc:	e009883a 	mov	r4,fp
 10006c0:	b80d883a 	mov	r6,r23
 10006c4:	183ee83a 	callr	r3
 10006c8:	1021883a 	mov	r16,r2
 10006cc:	00bfb30e 	bge	zero,r2,100059c <__sfvwrite_r+0x254>
 10006d0:	1023883a 	mov	r17,r2
 10006d4:	1027883a 	mov	r19,r2
 10006d8:	003f9b06 	br	1000548 <__sfvwrite_r+0x200>
 10006dc:	b80b883a 	mov	r5,r23
 10006e0:	800d883a 	mov	r6,r16
 10006e4:	10010a80 	call	10010a8 <memmove>
 10006e8:	90c00217 	ldw	r3,8(r18)
 10006ec:	90800017 	ldw	r2,0(r18)
 10006f0:	8023883a 	mov	r17,r16
 10006f4:	1c07c83a 	sub	r3,r3,r16
 10006f8:	1405883a 	add	r2,r2,r16
 10006fc:	90c00215 	stw	r3,8(r18)
 1000700:	90800015 	stw	r2,0(r18)
 1000704:	003fc406 	br	1000618 <__sfvwrite_r+0x2d0>
 1000708:	a00d883a 	mov	r6,r20
 100070c:	a021883a 	mov	r16,r20
 1000710:	003f8106 	br	1000518 <__sfvwrite_r+0x1d0>
 1000714:	b80b883a 	mov	r5,r23
 1000718:	a00d883a 	mov	r6,r20
 100071c:	10010a80 	call	10010a8 <memmove>
 1000720:	90c00217 	ldw	r3,8(r18)
 1000724:	90800017 	ldw	r2,0(r18)
 1000728:	a021883a 	mov	r16,r20
 100072c:	1d07c83a 	sub	r3,r3,r20
 1000730:	1505883a 	add	r2,r2,r20
 1000734:	a023883a 	mov	r17,r20
 1000738:	a027883a 	mov	r19,r20
 100073c:	90c00215 	stw	r3,8(r18)
 1000740:	90800015 	stw	r2,0(r18)
 1000744:	003f8006 	br	1000548 <__sfvwrite_r+0x200>
 1000748:	b809883a 	mov	r4,r23
 100074c:	01400284 	movi	r5,10
 1000750:	980d883a 	mov	r6,r19
 1000754:	1000f240 	call	1000f24 <memchr>
 1000758:	10001726 	beq	r2,zero,10007b8 <__sfvwrite_r+0x470>
 100075c:	15c5c83a 	sub	r2,r2,r23
 1000760:	15000044 	addi	r20,r2,1
 1000764:	00800044 	movi	r2,1
 1000768:	d8800015 	stw	r2,0(sp)
 100076c:	003f9806 	br	10005d0 <__sfvwrite_r+0x288>
 1000770:	b80b883a 	mov	r5,r23
 1000774:	800d883a 	mov	r6,r16
 1000778:	10010a80 	call	10010a8 <memmove>
 100077c:	90c00017 	ldw	r3,0(r18)
 1000780:	e009883a 	mov	r4,fp
 1000784:	900b883a 	mov	r5,r18
 1000788:	1c07883a 	add	r3,r3,r16
 100078c:	90c00015 	stw	r3,0(r18)
 1000790:	8027883a 	mov	r19,r16
 1000794:	10019280 	call	1001928 <_fflush_r>
 1000798:	103f6b26 	beq	r2,zero,1000548 <__sfvwrite_r+0x200>
 100079c:	003f7f06 	br	100059c <__sfvwrite_r+0x254>
 10007a0:	400b883a 	mov	r5,r8
 10007a4:	e009883a 	mov	r4,fp
 10007a8:	10011880 	call	1001188 <_realloc_r>
 10007ac:	103f7626 	beq	r2,zero,1000588 <__sfvwrite_r+0x240>
 10007b0:	1023883a 	mov	r17,r2
 10007b4:	003f5006 	br	10004f8 <__sfvwrite_r+0x1b0>
 10007b8:	00c00044 	movi	r3,1
 10007bc:	9d000044 	addi	r20,r19,1
 10007c0:	d8c00015 	stw	r3,0(sp)
 10007c4:	003f8206 	br	10005d0 <__sfvwrite_r+0x288>
 10007c8:	9080030b 	ldhu	r2,12(r18)
 10007cc:	00c00244 	movi	r3,9
 10007d0:	013fffc4 	movi	r4,-1
 10007d4:	10801014 	ori	r2,r2,64
 10007d8:	9080030d 	sth	r2,12(r18)
 10007dc:	e0c00015 	stw	r3,0(fp)
 10007e0:	003f0606 	br	10003fc <__sfvwrite_r+0xb4>

010007e4 <_malloc_r>:
 10007e4:	defff604 	addi	sp,sp,-40
 10007e8:	28c002c4 	addi	r3,r5,11
 10007ec:	00800584 	movi	r2,22
 10007f0:	dc800215 	stw	r18,8(sp)
 10007f4:	dfc00915 	stw	ra,36(sp)
 10007f8:	df000815 	stw	fp,32(sp)
 10007fc:	ddc00715 	stw	r23,28(sp)
 1000800:	dd800615 	stw	r22,24(sp)
 1000804:	dd400515 	stw	r21,20(sp)
 1000808:	dd000415 	stw	r20,16(sp)
 100080c:	dcc00315 	stw	r19,12(sp)
 1000810:	dc400115 	stw	r17,4(sp)
 1000814:	dc000015 	stw	r16,0(sp)
 1000818:	2025883a 	mov	r18,r4
 100081c:	10c01236 	bltu	r2,r3,1000868 <_malloc_r+0x84>
 1000820:	04400404 	movi	r17,16
 1000824:	8940142e 	bgeu	r17,r5,1000878 <_malloc_r+0x94>
 1000828:	00800304 	movi	r2,12
 100082c:	0007883a 	mov	r3,zero
 1000830:	90800015 	stw	r2,0(r18)
 1000834:	1805883a 	mov	r2,r3
 1000838:	dfc00917 	ldw	ra,36(sp)
 100083c:	df000817 	ldw	fp,32(sp)
 1000840:	ddc00717 	ldw	r23,28(sp)
 1000844:	dd800617 	ldw	r22,24(sp)
 1000848:	dd400517 	ldw	r21,20(sp)
 100084c:	dd000417 	ldw	r20,16(sp)
 1000850:	dcc00317 	ldw	r19,12(sp)
 1000854:	dc800217 	ldw	r18,8(sp)
 1000858:	dc400117 	ldw	r17,4(sp)
 100085c:	dc000017 	ldw	r16,0(sp)
 1000860:	dec00a04 	addi	sp,sp,40
 1000864:	f800283a 	ret
 1000868:	00bffe04 	movi	r2,-8
 100086c:	18a2703a 	and	r17,r3,r2
 1000870:	883fed16 	blt	r17,zero,1000828 <_malloc_r+0x44>
 1000874:	897fec36 	bltu	r17,r5,1000828 <_malloc_r+0x44>
 1000878:	9009883a 	mov	r4,r18
 100087c:	10032300 	call	1003230 <__malloc_lock>
 1000880:	00807dc4 	movi	r2,503
 1000884:	14402b2e 	bgeu	r2,r17,1000934 <_malloc_r+0x150>
 1000888:	8806d27a 	srli	r3,r17,9
 100088c:	18003f1e 	bne	r3,zero,100098c <_malloc_r+0x1a8>
 1000890:	880cd0fa 	srli	r6,r17,3
 1000894:	300490fa 	slli	r2,r6,3
 1000898:	02c04034 	movhi	r11,256
 100089c:	5ad64b04 	addi	r11,r11,22828
 10008a0:	12cb883a 	add	r5,r2,r11
 10008a4:	2c000317 	ldw	r16,12(r5)
 10008a8:	580f883a 	mov	r7,r11
 10008ac:	2c00041e 	bne	r5,r16,10008c0 <_malloc_r+0xdc>
 10008b0:	00000a06 	br	10008dc <_malloc_r+0xf8>
 10008b4:	1800860e 	bge	r3,zero,1000ad0 <_malloc_r+0x2ec>
 10008b8:	84000317 	ldw	r16,12(r16)
 10008bc:	2c000726 	beq	r5,r16,10008dc <_malloc_r+0xf8>
 10008c0:	80800117 	ldw	r2,4(r16)
 10008c4:	00ffff04 	movi	r3,-4
 10008c8:	10c8703a 	and	r4,r2,r3
 10008cc:	2447c83a 	sub	r3,r4,r17
 10008d0:	008003c4 	movi	r2,15
 10008d4:	10fff70e 	bge	r2,r3,10008b4 <_malloc_r+0xd0>
 10008d8:	31bfffc4 	addi	r6,r6,-1
 10008dc:	32400044 	addi	r9,r6,1
 10008e0:	02804034 	movhi	r10,256
 10008e4:	52964d04 	addi	r10,r10,22836
 10008e8:	54000217 	ldw	r16,8(r10)
 10008ec:	8280a026 	beq	r16,r10,1000b70 <_malloc_r+0x38c>
 10008f0:	80800117 	ldw	r2,4(r16)
 10008f4:	00ffff04 	movi	r3,-4
 10008f8:	10ca703a 	and	r5,r2,r3
 10008fc:	2c4dc83a 	sub	r6,r5,r17
 1000900:	008003c4 	movi	r2,15
 1000904:	11808316 	blt	r2,r6,1000b14 <_malloc_r+0x330>
 1000908:	52800315 	stw	r10,12(r10)
 100090c:	52800215 	stw	r10,8(r10)
 1000910:	30002916 	blt	r6,zero,10009b8 <_malloc_r+0x1d4>
 1000914:	8147883a 	add	r3,r16,r5
 1000918:	18800117 	ldw	r2,4(r3)
 100091c:	9009883a 	mov	r4,r18
 1000920:	10800054 	ori	r2,r2,1
 1000924:	18800115 	stw	r2,4(r3)
 1000928:	10032500 	call	1003250 <__malloc_unlock>
 100092c:	80c00204 	addi	r3,r16,8
 1000930:	003fc006 	br	1000834 <_malloc_r+0x50>
 1000934:	02c04034 	movhi	r11,256
 1000938:	5ad64b04 	addi	r11,r11,22828
 100093c:	8ac5883a 	add	r2,r17,r11
 1000940:	14000317 	ldw	r16,12(r2)
 1000944:	580f883a 	mov	r7,r11
 1000948:	8806d0fa 	srli	r3,r17,3
 100094c:	14006c26 	beq	r2,r16,1000b00 <_malloc_r+0x31c>
 1000950:	80c00117 	ldw	r3,4(r16)
 1000954:	00bfff04 	movi	r2,-4
 1000958:	81800317 	ldw	r6,12(r16)
 100095c:	1886703a 	and	r3,r3,r2
 1000960:	80c7883a 	add	r3,r16,r3
 1000964:	18800117 	ldw	r2,4(r3)
 1000968:	81400217 	ldw	r5,8(r16)
 100096c:	9009883a 	mov	r4,r18
 1000970:	10800054 	ori	r2,r2,1
 1000974:	18800115 	stw	r2,4(r3)
 1000978:	31400215 	stw	r5,8(r6)
 100097c:	29800315 	stw	r6,12(r5)
 1000980:	10032500 	call	1003250 <__malloc_unlock>
 1000984:	80c00204 	addi	r3,r16,8
 1000988:	003faa06 	br	1000834 <_malloc_r+0x50>
 100098c:	00800104 	movi	r2,4
 1000990:	10c0052e 	bgeu	r2,r3,10009a8 <_malloc_r+0x1c4>
 1000994:	00800504 	movi	r2,20
 1000998:	10c07836 	bltu	r2,r3,1000b7c <_malloc_r+0x398>
 100099c:	198016c4 	addi	r6,r3,91
 10009a0:	300490fa 	slli	r2,r6,3
 10009a4:	003fbc06 	br	1000898 <_malloc_r+0xb4>
 10009a8:	8804d1ba 	srli	r2,r17,6
 10009ac:	11800e04 	addi	r6,r2,56
 10009b0:	300490fa 	slli	r2,r6,3
 10009b4:	003fb806 	br	1000898 <_malloc_r+0xb4>
 10009b8:	00807fc4 	movi	r2,511
 10009bc:	1140bb36 	bltu	r2,r5,1000cac <_malloc_r+0x4c8>
 10009c0:	2806d0fa 	srli	r3,r5,3
 10009c4:	573ffe04 	addi	fp,r10,-8
 10009c8:	00800044 	movi	r2,1
 10009cc:	180890fa 	slli	r4,r3,3
 10009d0:	1807d0ba 	srai	r3,r3,2
 10009d4:	e1c00117 	ldw	r7,4(fp)
 10009d8:	5909883a 	add	r4,r11,r4
 10009dc:	21400217 	ldw	r5,8(r4)
 10009e0:	10c4983a 	sll	r2,r2,r3
 10009e4:	81000315 	stw	r4,12(r16)
 10009e8:	81400215 	stw	r5,8(r16)
 10009ec:	388eb03a 	or	r7,r7,r2
 10009f0:	2c000315 	stw	r16,12(r5)
 10009f4:	24000215 	stw	r16,8(r4)
 10009f8:	e1c00115 	stw	r7,4(fp)
 10009fc:	4807883a 	mov	r3,r9
 1000a00:	4800cd16 	blt	r9,zero,1000d38 <_malloc_r+0x554>
 1000a04:	1807d0ba 	srai	r3,r3,2
 1000a08:	00800044 	movi	r2,1
 1000a0c:	10c8983a 	sll	r4,r2,r3
 1000a10:	39004436 	bltu	r7,r4,1000b24 <_malloc_r+0x340>
 1000a14:	21c4703a 	and	r2,r4,r7
 1000a18:	10000a1e 	bne	r2,zero,1000a44 <_malloc_r+0x260>
 1000a1c:	2109883a 	add	r4,r4,r4
 1000a20:	00bfff04 	movi	r2,-4
 1000a24:	4884703a 	and	r2,r9,r2
 1000a28:	3906703a 	and	r3,r7,r4
 1000a2c:	12400104 	addi	r9,r2,4
 1000a30:	1800041e 	bne	r3,zero,1000a44 <_malloc_r+0x260>
 1000a34:	2109883a 	add	r4,r4,r4
 1000a38:	3904703a 	and	r2,r7,r4
 1000a3c:	4a400104 	addi	r9,r9,4
 1000a40:	103ffc26 	beq	r2,zero,1000a34 <_malloc_r+0x250>
 1000a44:	480490fa 	slli	r2,r9,3
 1000a48:	4819883a 	mov	r12,r9
 1000a4c:	023fff04 	movi	r8,-4
 1000a50:	589b883a 	add	r13,r11,r2
 1000a54:	6807883a 	mov	r3,r13
 1000a58:	014003c4 	movi	r5,15
 1000a5c:	1c000317 	ldw	r16,12(r3)
 1000a60:	1c00041e 	bne	r3,r16,1000a74 <_malloc_r+0x290>
 1000a64:	0000a706 	br	1000d04 <_malloc_r+0x520>
 1000a68:	3000ab0e 	bge	r6,zero,1000d18 <_malloc_r+0x534>
 1000a6c:	84000317 	ldw	r16,12(r16)
 1000a70:	1c00a426 	beq	r3,r16,1000d04 <_malloc_r+0x520>
 1000a74:	80800117 	ldw	r2,4(r16)
 1000a78:	1204703a 	and	r2,r2,r8
 1000a7c:	144dc83a 	sub	r6,r2,r17
 1000a80:	29bff90e 	bge	r5,r6,1000a68 <_malloc_r+0x284>
 1000a84:	81000317 	ldw	r4,12(r16)
 1000a88:	80c00217 	ldw	r3,8(r16)
 1000a8c:	89400054 	ori	r5,r17,1
 1000a90:	8445883a 	add	r2,r16,r17
 1000a94:	20c00215 	stw	r3,8(r4)
 1000a98:	19000315 	stw	r4,12(r3)
 1000a9c:	81400115 	stw	r5,4(r16)
 1000aa0:	1187883a 	add	r3,r2,r6
 1000aa4:	31000054 	ori	r4,r6,1
 1000aa8:	50800315 	stw	r2,12(r10)
 1000aac:	50800215 	stw	r2,8(r10)
 1000ab0:	19800015 	stw	r6,0(r3)
 1000ab4:	11000115 	stw	r4,4(r2)
 1000ab8:	12800215 	stw	r10,8(r2)
 1000abc:	12800315 	stw	r10,12(r2)
 1000ac0:	9009883a 	mov	r4,r18
 1000ac4:	10032500 	call	1003250 <__malloc_unlock>
 1000ac8:	80c00204 	addi	r3,r16,8
 1000acc:	003f5906 	br	1000834 <_malloc_r+0x50>
 1000ad0:	8109883a 	add	r4,r16,r4
 1000ad4:	20800117 	ldw	r2,4(r4)
 1000ad8:	80c00217 	ldw	r3,8(r16)
 1000adc:	81400317 	ldw	r5,12(r16)
 1000ae0:	10800054 	ori	r2,r2,1
 1000ae4:	20800115 	stw	r2,4(r4)
 1000ae8:	28c00215 	stw	r3,8(r5)
 1000aec:	19400315 	stw	r5,12(r3)
 1000af0:	9009883a 	mov	r4,r18
 1000af4:	10032500 	call	1003250 <__malloc_unlock>
 1000af8:	80c00204 	addi	r3,r16,8
 1000afc:	003f4d06 	br	1000834 <_malloc_r+0x50>
 1000b00:	80800204 	addi	r2,r16,8
 1000b04:	14000317 	ldw	r16,12(r2)
 1000b08:	143f911e 	bne	r2,r16,1000950 <_malloc_r+0x16c>
 1000b0c:	1a400084 	addi	r9,r3,2
 1000b10:	003f7306 	br	10008e0 <_malloc_r+0xfc>
 1000b14:	88c00054 	ori	r3,r17,1
 1000b18:	8445883a 	add	r2,r16,r17
 1000b1c:	80c00115 	stw	r3,4(r16)
 1000b20:	003fdf06 	br	1000aa0 <_malloc_r+0x2bc>
 1000b24:	e4000217 	ldw	r16,8(fp)
 1000b28:	00bfff04 	movi	r2,-4
 1000b2c:	80c00117 	ldw	r3,4(r16)
 1000b30:	802d883a 	mov	r22,r16
 1000b34:	18aa703a 	and	r21,r3,r2
 1000b38:	ac401636 	bltu	r21,r17,1000b94 <_malloc_r+0x3b0>
 1000b3c:	ac49c83a 	sub	r4,r21,r17
 1000b40:	008003c4 	movi	r2,15
 1000b44:	1100130e 	bge	r2,r4,1000b94 <_malloc_r+0x3b0>
 1000b48:	88800054 	ori	r2,r17,1
 1000b4c:	8447883a 	add	r3,r16,r17
 1000b50:	80800115 	stw	r2,4(r16)
 1000b54:	20800054 	ori	r2,r4,1
 1000b58:	18800115 	stw	r2,4(r3)
 1000b5c:	e0c00215 	stw	r3,8(fp)
 1000b60:	9009883a 	mov	r4,r18
 1000b64:	10032500 	call	1003250 <__malloc_unlock>
 1000b68:	80c00204 	addi	r3,r16,8
 1000b6c:	003f3106 	br	1000834 <_malloc_r+0x50>
 1000b70:	39c00117 	ldw	r7,4(r7)
 1000b74:	573ffe04 	addi	fp,r10,-8
 1000b78:	003fa006 	br	10009fc <_malloc_r+0x218>
 1000b7c:	00801504 	movi	r2,84
 1000b80:	10c06736 	bltu	r2,r3,1000d20 <_malloc_r+0x53c>
 1000b84:	8804d33a 	srli	r2,r17,12
 1000b88:	11801b84 	addi	r6,r2,110
 1000b8c:	300490fa 	slli	r2,r6,3
 1000b90:	003f4106 	br	1000898 <_malloc_r+0xb4>
 1000b94:	d0a6a017 	ldw	r2,-25984(gp)
 1000b98:	d0e00317 	ldw	r3,-32756(gp)
 1000b9c:	053fffc4 	movi	r20,-1
 1000ba0:	10800404 	addi	r2,r2,16
 1000ba4:	88a7883a 	add	r19,r17,r2
 1000ba8:	1d000326 	beq	r3,r20,1000bb8 <_malloc_r+0x3d4>
 1000bac:	98c3ffc4 	addi	r3,r19,4095
 1000bb0:	00bc0004 	movi	r2,-4096
 1000bb4:	18a6703a 	and	r19,r3,r2
 1000bb8:	9009883a 	mov	r4,r18
 1000bbc:	980b883a 	mov	r5,r19
 1000bc0:	100177c0 	call	100177c <_sbrk_r>
 1000bc4:	1009883a 	mov	r4,r2
 1000bc8:	15000426 	beq	r2,r20,1000bdc <_malloc_r+0x3f8>
 1000bcc:	854b883a 	add	r5,r16,r21
 1000bd0:	1029883a 	mov	r20,r2
 1000bd4:	11405a2e 	bgeu	r2,r5,1000d40 <_malloc_r+0x55c>
 1000bd8:	87000c26 	beq	r16,fp,1000c0c <_malloc_r+0x428>
 1000bdc:	e4000217 	ldw	r16,8(fp)
 1000be0:	80c00117 	ldw	r3,4(r16)
 1000be4:	00bfff04 	movi	r2,-4
 1000be8:	1884703a 	and	r2,r3,r2
 1000bec:	14400336 	bltu	r2,r17,1000bfc <_malloc_r+0x418>
 1000bf0:	1449c83a 	sub	r4,r2,r17
 1000bf4:	008003c4 	movi	r2,15
 1000bf8:	113fd316 	blt	r2,r4,1000b48 <_malloc_r+0x364>
 1000bfc:	9009883a 	mov	r4,r18
 1000c00:	10032500 	call	1003250 <__malloc_unlock>
 1000c04:	0007883a 	mov	r3,zero
 1000c08:	003f0a06 	br	1000834 <_malloc_r+0x50>
 1000c0c:	05c04074 	movhi	r23,257
 1000c10:	bde27904 	addi	r23,r23,-30236
 1000c14:	b8800017 	ldw	r2,0(r23)
 1000c18:	988d883a 	add	r6,r19,r2
 1000c1c:	b9800015 	stw	r6,0(r23)
 1000c20:	d0e00317 	ldw	r3,-32756(gp)
 1000c24:	00bfffc4 	movi	r2,-1
 1000c28:	18808e26 	beq	r3,r2,1000e64 <_malloc_r+0x680>
 1000c2c:	2145c83a 	sub	r2,r4,r5
 1000c30:	3085883a 	add	r2,r6,r2
 1000c34:	b8800015 	stw	r2,0(r23)
 1000c38:	20c001cc 	andi	r3,r4,7
 1000c3c:	18005f1e 	bne	r3,zero,1000dbc <_malloc_r+0x5d8>
 1000c40:	000b883a 	mov	r5,zero
 1000c44:	a4c5883a 	add	r2,r20,r19
 1000c48:	1083ffcc 	andi	r2,r2,4095
 1000c4c:	00c40004 	movi	r3,4096
 1000c50:	1887c83a 	sub	r3,r3,r2
 1000c54:	28e7883a 	add	r19,r5,r3
 1000c58:	9009883a 	mov	r4,r18
 1000c5c:	980b883a 	mov	r5,r19
 1000c60:	100177c0 	call	100177c <_sbrk_r>
 1000c64:	1007883a 	mov	r3,r2
 1000c68:	00bfffc4 	movi	r2,-1
 1000c6c:	18807a26 	beq	r3,r2,1000e58 <_malloc_r+0x674>
 1000c70:	1d05c83a 	sub	r2,r3,r20
 1000c74:	9885883a 	add	r2,r19,r2
 1000c78:	10c00054 	ori	r3,r2,1
 1000c7c:	b8800017 	ldw	r2,0(r23)
 1000c80:	a021883a 	mov	r16,r20
 1000c84:	a0c00115 	stw	r3,4(r20)
 1000c88:	9885883a 	add	r2,r19,r2
 1000c8c:	b8800015 	stw	r2,0(r23)
 1000c90:	e5000215 	stw	r20,8(fp)
 1000c94:	b7003626 	beq	r22,fp,1000d70 <_malloc_r+0x58c>
 1000c98:	018003c4 	movi	r6,15
 1000c9c:	35404b36 	bltu	r6,r21,1000dcc <_malloc_r+0x5e8>
 1000ca0:	00800044 	movi	r2,1
 1000ca4:	a0800115 	stw	r2,4(r20)
 1000ca8:	003fcd06 	br	1000be0 <_malloc_r+0x3fc>
 1000cac:	2808d27a 	srli	r4,r5,9
 1000cb0:	2000371e 	bne	r4,zero,1000d90 <_malloc_r+0x5ac>
 1000cb4:	2808d0fa 	srli	r4,r5,3
 1000cb8:	200690fa 	slli	r3,r4,3
 1000cbc:	1ad1883a 	add	r8,r3,r11
 1000cc0:	41800217 	ldw	r6,8(r8)
 1000cc4:	41805b26 	beq	r8,r6,1000e34 <_malloc_r+0x650>
 1000cc8:	30800117 	ldw	r2,4(r6)
 1000ccc:	00ffff04 	movi	r3,-4
 1000cd0:	10c4703a 	and	r2,r2,r3
 1000cd4:	2880022e 	bgeu	r5,r2,1000ce0 <_malloc_r+0x4fc>
 1000cd8:	31800217 	ldw	r6,8(r6)
 1000cdc:	41bffa1e 	bne	r8,r6,1000cc8 <_malloc_r+0x4e4>
 1000ce0:	32000317 	ldw	r8,12(r6)
 1000ce4:	39c00117 	ldw	r7,4(r7)
 1000ce8:	82000315 	stw	r8,12(r16)
 1000cec:	81800215 	stw	r6,8(r16)
 1000cf0:	07004034 	movhi	fp,256
 1000cf4:	e7164b04 	addi	fp,fp,22828
 1000cf8:	34000315 	stw	r16,12(r6)
 1000cfc:	44000215 	stw	r16,8(r8)
 1000d00:	003f3e06 	br	10009fc <_malloc_r+0x218>
 1000d04:	63000044 	addi	r12,r12,1
 1000d08:	608000cc 	andi	r2,r12,3
 1000d0c:	10005d26 	beq	r2,zero,1000e84 <_malloc_r+0x6a0>
 1000d10:	18c00204 	addi	r3,r3,8
 1000d14:	003f5106 	br	1000a5c <_malloc_r+0x278>
 1000d18:	8089883a 	add	r4,r16,r2
 1000d1c:	003f6d06 	br	1000ad4 <_malloc_r+0x2f0>
 1000d20:	00805504 	movi	r2,340
 1000d24:	10c02036 	bltu	r2,r3,1000da8 <_malloc_r+0x5c4>
 1000d28:	8804d3fa 	srli	r2,r17,15
 1000d2c:	11801dc4 	addi	r6,r2,119
 1000d30:	300490fa 	slli	r2,r6,3
 1000d34:	003ed806 	br	1000898 <_malloc_r+0xb4>
 1000d38:	48c000c4 	addi	r3,r9,3
 1000d3c:	003f3106 	br	1000a04 <_malloc_r+0x220>
 1000d40:	05c04074 	movhi	r23,257
 1000d44:	bde27904 	addi	r23,r23,-30236
 1000d48:	b8800017 	ldw	r2,0(r23)
 1000d4c:	988d883a 	add	r6,r19,r2
 1000d50:	b9800015 	stw	r6,0(r23)
 1000d54:	293fb21e 	bne	r5,r4,1000c20 <_malloc_r+0x43c>
 1000d58:	2083ffcc 	andi	r2,r4,4095
 1000d5c:	103fb01e 	bne	r2,zero,1000c20 <_malloc_r+0x43c>
 1000d60:	e4000217 	ldw	r16,8(fp)
 1000d64:	9d45883a 	add	r2,r19,r21
 1000d68:	10800054 	ori	r2,r2,1
 1000d6c:	80800115 	stw	r2,4(r16)
 1000d70:	b8c00017 	ldw	r3,0(r23)
 1000d74:	d0a6a117 	ldw	r2,-25980(gp)
 1000d78:	10c0012e 	bgeu	r2,r3,1000d80 <_malloc_r+0x59c>
 1000d7c:	d0e6a115 	stw	r3,-25980(gp)
 1000d80:	d0a6a217 	ldw	r2,-25976(gp)
 1000d84:	10ff962e 	bgeu	r2,r3,1000be0 <_malloc_r+0x3fc>
 1000d88:	d0e6a215 	stw	r3,-25976(gp)
 1000d8c:	003f9406 	br	1000be0 <_malloc_r+0x3fc>
 1000d90:	00800104 	movi	r2,4
 1000d94:	11001e36 	bltu	r2,r4,1000e10 <_malloc_r+0x62c>
 1000d98:	2804d1ba 	srli	r2,r5,6
 1000d9c:	11000e04 	addi	r4,r2,56
 1000da0:	200690fa 	slli	r3,r4,3
 1000da4:	003fc506 	br	1000cbc <_malloc_r+0x4d8>
 1000da8:	00815504 	movi	r2,1364
 1000dac:	10c01d2e 	bgeu	r2,r3,1000e24 <_malloc_r+0x640>
 1000db0:	01801f84 	movi	r6,126
 1000db4:	0080fc04 	movi	r2,1008
 1000db8:	003eb706 	br	1000898 <_malloc_r+0xb4>
 1000dbc:	00800204 	movi	r2,8
 1000dc0:	10cbc83a 	sub	r5,r2,r3
 1000dc4:	2169883a 	add	r20,r4,r5
 1000dc8:	003f9e06 	br	1000c44 <_malloc_r+0x460>
 1000dcc:	00bffe04 	movi	r2,-8
 1000dd0:	a93ffd04 	addi	r4,r21,-12
 1000dd4:	2088703a 	and	r4,r4,r2
 1000dd8:	b10b883a 	add	r5,r22,r4
 1000ddc:	00c00144 	movi	r3,5
 1000de0:	28c00215 	stw	r3,8(r5)
 1000de4:	28c00115 	stw	r3,4(r5)
 1000de8:	b0800117 	ldw	r2,4(r22)
 1000dec:	1080004c 	andi	r2,r2,1
 1000df0:	2084b03a 	or	r2,r4,r2
 1000df4:	b0800115 	stw	r2,4(r22)
 1000df8:	313fdd2e 	bgeu	r6,r4,1000d70 <_malloc_r+0x58c>
 1000dfc:	b1400204 	addi	r5,r22,8
 1000e00:	9009883a 	mov	r4,r18
 1000e04:	1001f780 	call	1001f78 <_free_r>
 1000e08:	e4000217 	ldw	r16,8(fp)
 1000e0c:	003fd806 	br	1000d70 <_malloc_r+0x58c>
 1000e10:	00800504 	movi	r2,20
 1000e14:	11001536 	bltu	r2,r4,1000e6c <_malloc_r+0x688>
 1000e18:	210016c4 	addi	r4,r4,91
 1000e1c:	200690fa 	slli	r3,r4,3
 1000e20:	003fa606 	br	1000cbc <_malloc_r+0x4d8>
 1000e24:	8804d4ba 	srli	r2,r17,18
 1000e28:	11801f04 	addi	r6,r2,124
 1000e2c:	300490fa 	slli	r2,r6,3
 1000e30:	003e9906 	br	1000898 <_malloc_r+0xb4>
 1000e34:	2009d0ba 	srai	r4,r4,2
 1000e38:	01404034 	movhi	r5,256
 1000e3c:	29564b04 	addi	r5,r5,22828
 1000e40:	00c00044 	movi	r3,1
 1000e44:	28800117 	ldw	r2,4(r5)
 1000e48:	1906983a 	sll	r3,r3,r4
 1000e4c:	10c4b03a 	or	r2,r2,r3
 1000e50:	28800115 	stw	r2,4(r5)
 1000e54:	003fa306 	br	1000ce4 <_malloc_r+0x500>
 1000e58:	0027883a 	mov	r19,zero
 1000e5c:	00c00044 	movi	r3,1
 1000e60:	003f8606 	br	1000c7c <_malloc_r+0x498>
 1000e64:	d1200315 	stw	r4,-32756(gp)
 1000e68:	003f7306 	br	1000c38 <_malloc_r+0x454>
 1000e6c:	00801504 	movi	r2,84
 1000e70:	11001936 	bltu	r2,r4,1000ed8 <_malloc_r+0x6f4>
 1000e74:	2804d33a 	srli	r2,r5,12
 1000e78:	11001b84 	addi	r4,r2,110
 1000e7c:	200690fa 	slli	r3,r4,3
 1000e80:	003f8e06 	br	1000cbc <_malloc_r+0x4d8>
 1000e84:	480b883a 	mov	r5,r9
 1000e88:	6807883a 	mov	r3,r13
 1000e8c:	288000cc 	andi	r2,r5,3
 1000e90:	18fffe04 	addi	r3,r3,-8
 1000e94:	297fffc4 	addi	r5,r5,-1
 1000e98:	10001526 	beq	r2,zero,1000ef0 <_malloc_r+0x70c>
 1000e9c:	18800217 	ldw	r2,8(r3)
 1000ea0:	10fffa26 	beq	r2,r3,1000e8c <_malloc_r+0x6a8>
 1000ea4:	2109883a 	add	r4,r4,r4
 1000ea8:	393f1e36 	bltu	r7,r4,1000b24 <_malloc_r+0x340>
 1000eac:	203f1d26 	beq	r4,zero,1000b24 <_malloc_r+0x340>
 1000eb0:	21c4703a 	and	r2,r4,r7
 1000eb4:	10000226 	beq	r2,zero,1000ec0 <_malloc_r+0x6dc>
 1000eb8:	6013883a 	mov	r9,r12
 1000ebc:	003ee106 	br	1000a44 <_malloc_r+0x260>
 1000ec0:	2109883a 	add	r4,r4,r4
 1000ec4:	3904703a 	and	r2,r7,r4
 1000ec8:	63000104 	addi	r12,r12,4
 1000ecc:	103ffc26 	beq	r2,zero,1000ec0 <_malloc_r+0x6dc>
 1000ed0:	6013883a 	mov	r9,r12
 1000ed4:	003edb06 	br	1000a44 <_malloc_r+0x260>
 1000ed8:	00805504 	movi	r2,340
 1000edc:	11000836 	bltu	r2,r4,1000f00 <_malloc_r+0x71c>
 1000ee0:	2804d3fa 	srli	r2,r5,15
 1000ee4:	11001dc4 	addi	r4,r2,119
 1000ee8:	200690fa 	slli	r3,r4,3
 1000eec:	003f7306 	br	1000cbc <_malloc_r+0x4d8>
 1000ef0:	0104303a 	nor	r2,zero,r4
 1000ef4:	388e703a 	and	r7,r7,r2
 1000ef8:	e1c00115 	stw	r7,4(fp)
 1000efc:	003fe906 	br	1000ea4 <_malloc_r+0x6c0>
 1000f00:	00815504 	movi	r2,1364
 1000f04:	1100032e 	bgeu	r2,r4,1000f14 <_malloc_r+0x730>
 1000f08:	01001f84 	movi	r4,126
 1000f0c:	00c0fc04 	movi	r3,1008
 1000f10:	003f6a06 	br	1000cbc <_malloc_r+0x4d8>
 1000f14:	2804d4ba 	srli	r2,r5,18
 1000f18:	11001f04 	addi	r4,r2,124
 1000f1c:	200690fa 	slli	r3,r4,3
 1000f20:	003f6606 	br	1000cbc <_malloc_r+0x4d8>

01000f24 <memchr>:
 1000f24:	008000c4 	movi	r2,3
 1000f28:	29403fcc 	andi	r5,r5,255
 1000f2c:	2007883a 	mov	r3,r4
 1000f30:	1180022e 	bgeu	r2,r6,1000f3c <memchr+0x18>
 1000f34:	2084703a 	and	r2,r4,r2
 1000f38:	10000b26 	beq	r2,zero,1000f68 <memchr+0x44>
 1000f3c:	313fffc4 	addi	r4,r6,-1
 1000f40:	3000051e 	bne	r6,zero,1000f58 <memchr+0x34>
 1000f44:	00002c06 	br	1000ff8 <memchr+0xd4>
 1000f48:	213fffc4 	addi	r4,r4,-1
 1000f4c:	00bfffc4 	movi	r2,-1
 1000f50:	18c00044 	addi	r3,r3,1
 1000f54:	20802826 	beq	r4,r2,1000ff8 <memchr+0xd4>
 1000f58:	18800003 	ldbu	r2,0(r3)
 1000f5c:	28bffa1e 	bne	r5,r2,1000f48 <memchr+0x24>
 1000f60:	1805883a 	mov	r2,r3
 1000f64:	f800283a 	ret
 1000f68:	0011883a 	mov	r8,zero
 1000f6c:	0007883a 	mov	r3,zero
 1000f70:	01c00104 	movi	r7,4
 1000f74:	4004923a 	slli	r2,r8,8
 1000f78:	18c00044 	addi	r3,r3,1
 1000f7c:	1151883a 	add	r8,r2,r5
 1000f80:	19fffc1e 	bne	r3,r7,1000f74 <memchr+0x50>
 1000f84:	02bfbff4 	movhi	r10,65279
 1000f88:	52bfbfc4 	addi	r10,r10,-257
 1000f8c:	02602074 	movhi	r9,32897
 1000f90:	4a602004 	addi	r9,r9,-32640
 1000f94:	02c000c4 	movi	r11,3
 1000f98:	20800017 	ldw	r2,0(r4)
 1000f9c:	31bfff04 	addi	r6,r6,-4
 1000fa0:	200f883a 	mov	r7,r4
 1000fa4:	1204f03a 	xor	r2,r2,r8
 1000fa8:	1287883a 	add	r3,r2,r10
 1000fac:	1a46703a 	and	r3,r3,r9
 1000fb0:	0084303a 	nor	r2,zero,r2
 1000fb4:	10c4703a 	and	r2,r2,r3
 1000fb8:	10000b26 	beq	r2,zero,1000fe8 <memchr+0xc4>
 1000fbc:	20800003 	ldbu	r2,0(r4)
 1000fc0:	28800f26 	beq	r5,r2,1001000 <memchr+0xdc>
 1000fc4:	20800043 	ldbu	r2,1(r4)
 1000fc8:	21c00044 	addi	r7,r4,1
 1000fcc:	28800c26 	beq	r5,r2,1001000 <memchr+0xdc>
 1000fd0:	20800083 	ldbu	r2,2(r4)
 1000fd4:	21c00084 	addi	r7,r4,2
 1000fd8:	28800926 	beq	r5,r2,1001000 <memchr+0xdc>
 1000fdc:	208000c3 	ldbu	r2,3(r4)
 1000fe0:	21c000c4 	addi	r7,r4,3
 1000fe4:	28800626 	beq	r5,r2,1001000 <memchr+0xdc>
 1000fe8:	21000104 	addi	r4,r4,4
 1000fec:	59bfea36 	bltu	r11,r6,1000f98 <memchr+0x74>
 1000ff0:	2007883a 	mov	r3,r4
 1000ff4:	003fd106 	br	1000f3c <memchr+0x18>
 1000ff8:	0005883a 	mov	r2,zero
 1000ffc:	f800283a 	ret
 1001000:	3805883a 	mov	r2,r7
 1001004:	f800283a 	ret

01001008 <memcpy>:
 1001008:	01c003c4 	movi	r7,15
 100100c:	2007883a 	mov	r3,r4
 1001010:	3980032e 	bgeu	r7,r6,1001020 <memcpy+0x18>
 1001014:	2904b03a 	or	r2,r5,r4
 1001018:	108000cc 	andi	r2,r2,3
 100101c:	10000926 	beq	r2,zero,1001044 <memcpy+0x3c>
 1001020:	30000626 	beq	r6,zero,100103c <memcpy+0x34>
 1001024:	30cd883a 	add	r6,r6,r3
 1001028:	28800003 	ldbu	r2,0(r5)
 100102c:	29400044 	addi	r5,r5,1
 1001030:	18800005 	stb	r2,0(r3)
 1001034:	18c00044 	addi	r3,r3,1
 1001038:	30fffb1e 	bne	r6,r3,1001028 <memcpy+0x20>
 100103c:	2005883a 	mov	r2,r4
 1001040:	f800283a 	ret
 1001044:	3811883a 	mov	r8,r7
 1001048:	200f883a 	mov	r7,r4
 100104c:	28c00017 	ldw	r3,0(r5)
 1001050:	31bffc04 	addi	r6,r6,-16
 1001054:	38c00015 	stw	r3,0(r7)
 1001058:	28800117 	ldw	r2,4(r5)
 100105c:	38800115 	stw	r2,4(r7)
 1001060:	28c00217 	ldw	r3,8(r5)
 1001064:	38c00215 	stw	r3,8(r7)
 1001068:	28800317 	ldw	r2,12(r5)
 100106c:	29400404 	addi	r5,r5,16
 1001070:	38800315 	stw	r2,12(r7)
 1001074:	39c00404 	addi	r7,r7,16
 1001078:	41bff436 	bltu	r8,r6,100104c <memcpy+0x44>
 100107c:	008000c4 	movi	r2,3
 1001080:	1180072e 	bgeu	r2,r6,10010a0 <memcpy+0x98>
 1001084:	1007883a 	mov	r3,r2
 1001088:	28800017 	ldw	r2,0(r5)
 100108c:	31bfff04 	addi	r6,r6,-4
 1001090:	29400104 	addi	r5,r5,4
 1001094:	38800015 	stw	r2,0(r7)
 1001098:	39c00104 	addi	r7,r7,4
 100109c:	19bffa36 	bltu	r3,r6,1001088 <memcpy+0x80>
 10010a0:	3807883a 	mov	r3,r7
 10010a4:	003fde06 	br	1001020 <memcpy+0x18>

010010a8 <memmove>:
 10010a8:	2807883a 	mov	r3,r5
 10010ac:	2011883a 	mov	r8,r4
 10010b0:	29000c2e 	bgeu	r5,r4,10010e4 <memmove+0x3c>
 10010b4:	298f883a 	add	r7,r5,r6
 10010b8:	21c00a2e 	bgeu	r4,r7,10010e4 <memmove+0x3c>
 10010bc:	30000726 	beq	r6,zero,10010dc <memmove+0x34>
 10010c0:	2187883a 	add	r3,r4,r6
 10010c4:	198dc83a 	sub	r6,r3,r6
 10010c8:	39ffffc4 	addi	r7,r7,-1
 10010cc:	38800003 	ldbu	r2,0(r7)
 10010d0:	18ffffc4 	addi	r3,r3,-1
 10010d4:	18800005 	stb	r2,0(r3)
 10010d8:	19bffb1e 	bne	r3,r6,10010c8 <memmove+0x20>
 10010dc:	2005883a 	mov	r2,r4
 10010e0:	f800283a 	ret
 10010e4:	01c003c4 	movi	r7,15
 10010e8:	39800a36 	bltu	r7,r6,1001114 <memmove+0x6c>
 10010ec:	303ffb26 	beq	r6,zero,10010dc <memmove+0x34>
 10010f0:	400f883a 	mov	r7,r8
 10010f4:	320d883a 	add	r6,r6,r8
 10010f8:	28800003 	ldbu	r2,0(r5)
 10010fc:	29400044 	addi	r5,r5,1
 1001100:	38800005 	stb	r2,0(r7)
 1001104:	39c00044 	addi	r7,r7,1
 1001108:	39bffb1e 	bne	r7,r6,10010f8 <memmove+0x50>
 100110c:	2005883a 	mov	r2,r4
 1001110:	f800283a 	ret
 1001114:	1904b03a 	or	r2,r3,r4
 1001118:	108000cc 	andi	r2,r2,3
 100111c:	103ff31e 	bne	r2,zero,10010ec <memmove+0x44>
 1001120:	3811883a 	mov	r8,r7
 1001124:	180b883a 	mov	r5,r3
 1001128:	200f883a 	mov	r7,r4
 100112c:	28c00017 	ldw	r3,0(r5)
 1001130:	31bffc04 	addi	r6,r6,-16
 1001134:	38c00015 	stw	r3,0(r7)
 1001138:	28800117 	ldw	r2,4(r5)
 100113c:	38800115 	stw	r2,4(r7)
 1001140:	28c00217 	ldw	r3,8(r5)
 1001144:	38c00215 	stw	r3,8(r7)
 1001148:	28800317 	ldw	r2,12(r5)
 100114c:	29400404 	addi	r5,r5,16
 1001150:	38800315 	stw	r2,12(r7)
 1001154:	39c00404 	addi	r7,r7,16
 1001158:	41bff436 	bltu	r8,r6,100112c <memmove+0x84>
 100115c:	008000c4 	movi	r2,3
 1001160:	1180072e 	bgeu	r2,r6,1001180 <memmove+0xd8>
 1001164:	1007883a 	mov	r3,r2
 1001168:	28800017 	ldw	r2,0(r5)
 100116c:	31bfff04 	addi	r6,r6,-4
 1001170:	29400104 	addi	r5,r5,4
 1001174:	38800015 	stw	r2,0(r7)
 1001178:	39c00104 	addi	r7,r7,4
 100117c:	19bffa36 	bltu	r3,r6,1001168 <memmove+0xc0>
 1001180:	3811883a 	mov	r8,r7
 1001184:	003fd906 	br	10010ec <memmove+0x44>

01001188 <_realloc_r>:
 1001188:	defff404 	addi	sp,sp,-48
 100118c:	dd800815 	stw	r22,32(sp)
 1001190:	dc800415 	stw	r18,16(sp)
 1001194:	dc400315 	stw	r17,12(sp)
 1001198:	dfc00b15 	stw	ra,44(sp)
 100119c:	df000a15 	stw	fp,40(sp)
 10011a0:	ddc00915 	stw	r23,36(sp)
 10011a4:	dd400715 	stw	r21,28(sp)
 10011a8:	dd000615 	stw	r20,24(sp)
 10011ac:	dcc00515 	stw	r19,20(sp)
 10011b0:	dc000215 	stw	r16,8(sp)
 10011b4:	2825883a 	mov	r18,r5
 10011b8:	3023883a 	mov	r17,r6
 10011bc:	202d883a 	mov	r22,r4
 10011c0:	2800c926 	beq	r5,zero,10014e8 <_realloc_r+0x360>
 10011c4:	10032300 	call	1003230 <__malloc_lock>
 10011c8:	943ffe04 	addi	r16,r18,-8
 10011cc:	88c002c4 	addi	r3,r17,11
 10011d0:	00800584 	movi	r2,22
 10011d4:	82000117 	ldw	r8,4(r16)
 10011d8:	10c01b2e 	bgeu	r2,r3,1001248 <_realloc_r+0xc0>
 10011dc:	00bffe04 	movi	r2,-8
 10011e0:	188e703a 	and	r7,r3,r2
 10011e4:	3839883a 	mov	fp,r7
 10011e8:	38001a16 	blt	r7,zero,1001254 <_realloc_r+0xcc>
 10011ec:	e4401936 	bltu	fp,r17,1001254 <_realloc_r+0xcc>
 10011f0:	013fff04 	movi	r4,-4
 10011f4:	4126703a 	and	r19,r8,r4
 10011f8:	99c02616 	blt	r19,r7,1001294 <_realloc_r+0x10c>
 10011fc:	802b883a 	mov	r21,r16
 1001200:	9829883a 	mov	r20,r19
 1001204:	84000204 	addi	r16,r16,8
 1001208:	a80f883a 	mov	r7,r21
 100120c:	a70dc83a 	sub	r6,r20,fp
 1001210:	008003c4 	movi	r2,15
 1001214:	1180c136 	bltu	r2,r6,100151c <_realloc_r+0x394>
 1001218:	38800117 	ldw	r2,4(r7)
 100121c:	a549883a 	add	r4,r20,r21
 1001220:	1080004c 	andi	r2,r2,1
 1001224:	a084b03a 	or	r2,r20,r2
 1001228:	38800115 	stw	r2,4(r7)
 100122c:	20c00117 	ldw	r3,4(r4)
 1001230:	18c00054 	ori	r3,r3,1
 1001234:	20c00115 	stw	r3,4(r4)
 1001238:	b009883a 	mov	r4,r22
 100123c:	10032500 	call	1003250 <__malloc_unlock>
 1001240:	8023883a 	mov	r17,r16
 1001244:	00000606 	br	1001260 <_realloc_r+0xd8>
 1001248:	01c00404 	movi	r7,16
 100124c:	3839883a 	mov	fp,r7
 1001250:	e47fe72e 	bgeu	fp,r17,10011f0 <_realloc_r+0x68>
 1001254:	00800304 	movi	r2,12
 1001258:	0023883a 	mov	r17,zero
 100125c:	b0800015 	stw	r2,0(r22)
 1001260:	8805883a 	mov	r2,r17
 1001264:	dfc00b17 	ldw	ra,44(sp)
 1001268:	df000a17 	ldw	fp,40(sp)
 100126c:	ddc00917 	ldw	r23,36(sp)
 1001270:	dd800817 	ldw	r22,32(sp)
 1001274:	dd400717 	ldw	r21,28(sp)
 1001278:	dd000617 	ldw	r20,24(sp)
 100127c:	dcc00517 	ldw	r19,20(sp)
 1001280:	dc800417 	ldw	r18,16(sp)
 1001284:	dc400317 	ldw	r17,12(sp)
 1001288:	dc000217 	ldw	r16,8(sp)
 100128c:	dec00c04 	addi	sp,sp,48
 1001290:	f800283a 	ret
 1001294:	00804034 	movhi	r2,256
 1001298:	10964b04 	addi	r2,r2,22828
 100129c:	12400217 	ldw	r9,8(r2)
 10012a0:	84cd883a 	add	r6,r16,r19
 10012a4:	802b883a 	mov	r21,r16
 10012a8:	3240b926 	beq	r6,r9,1001590 <_realloc_r+0x408>
 10012ac:	31400117 	ldw	r5,4(r6)
 10012b0:	00bfff84 	movi	r2,-2
 10012b4:	2884703a 	and	r2,r5,r2
 10012b8:	1185883a 	add	r2,r2,r6
 10012bc:	10c00117 	ldw	r3,4(r2)
 10012c0:	18c0004c 	andi	r3,r3,1
 10012c4:	1807003a 	cmpeq	r3,r3,zero
 10012c8:	1800a326 	beq	r3,zero,1001558 <_realloc_r+0x3d0>
 10012cc:	2908703a 	and	r4,r5,r4
 10012d0:	9929883a 	add	r20,r19,r4
 10012d4:	a1c0a30e 	bge	r20,r7,1001564 <_realloc_r+0x3dc>
 10012d8:	4080004c 	andi	r2,r8,1
 10012dc:	1000551e 	bne	r2,zero,1001434 <_realloc_r+0x2ac>
 10012e0:	80800017 	ldw	r2,0(r16)
 10012e4:	80afc83a 	sub	r23,r16,r2
 10012e8:	b8c00117 	ldw	r3,4(r23)
 10012ec:	00bfff04 	movi	r2,-4
 10012f0:	1884703a 	and	r2,r3,r2
 10012f4:	30002e26 	beq	r6,zero,10013b0 <_realloc_r+0x228>
 10012f8:	3240b926 	beq	r6,r9,10015e0 <_realloc_r+0x458>
 10012fc:	98a9883a 	add	r20,r19,r2
 1001300:	2509883a 	add	r4,r4,r20
 1001304:	d9000015 	stw	r4,0(sp)
 1001308:	21c02a16 	blt	r4,r7,10013b4 <_realloc_r+0x22c>
 100130c:	30800317 	ldw	r2,12(r6)
 1001310:	30c00217 	ldw	r3,8(r6)
 1001314:	01400904 	movi	r5,36
 1001318:	99bfff04 	addi	r6,r19,-4
 100131c:	18800315 	stw	r2,12(r3)
 1001320:	10c00215 	stw	r3,8(r2)
 1001324:	b9000317 	ldw	r4,12(r23)
 1001328:	b8800217 	ldw	r2,8(r23)
 100132c:	b82b883a 	mov	r21,r23
 1001330:	bc000204 	addi	r16,r23,8
 1001334:	20800215 	stw	r2,8(r4)
 1001338:	11000315 	stw	r4,12(r2)
 100133c:	2980e436 	bltu	r5,r6,10016d0 <_realloc_r+0x548>
 1001340:	008004c4 	movi	r2,19
 1001344:	9009883a 	mov	r4,r18
 1001348:	8011883a 	mov	r8,r16
 100134c:	11800f2e 	bgeu	r2,r6,100138c <_realloc_r+0x204>
 1001350:	90800017 	ldw	r2,0(r18)
 1001354:	ba000404 	addi	r8,r23,16
 1001358:	91000204 	addi	r4,r18,8
 100135c:	b8800215 	stw	r2,8(r23)
 1001360:	90c00117 	ldw	r3,4(r18)
 1001364:	008006c4 	movi	r2,27
 1001368:	b8c00315 	stw	r3,12(r23)
 100136c:	1180072e 	bgeu	r2,r6,100138c <_realloc_r+0x204>
 1001370:	90c00217 	ldw	r3,8(r18)
 1001374:	ba000604 	addi	r8,r23,24
 1001378:	91000404 	addi	r4,r18,16
 100137c:	b8c00415 	stw	r3,16(r23)
 1001380:	90800317 	ldw	r2,12(r18)
 1001384:	b8800515 	stw	r2,20(r23)
 1001388:	3140e726 	beq	r6,r5,1001728 <_realloc_r+0x5a0>
 100138c:	20800017 	ldw	r2,0(r4)
 1001390:	dd000017 	ldw	r20,0(sp)
 1001394:	b80f883a 	mov	r7,r23
 1001398:	40800015 	stw	r2,0(r8)
 100139c:	20c00117 	ldw	r3,4(r4)
 10013a0:	40c00115 	stw	r3,4(r8)
 10013a4:	20800217 	ldw	r2,8(r4)
 10013a8:	40800215 	stw	r2,8(r8)
 10013ac:	003f9706 	br	100120c <_realloc_r+0x84>
 10013b0:	98a9883a 	add	r20,r19,r2
 10013b4:	a1c01f16 	blt	r20,r7,1001434 <_realloc_r+0x2ac>
 10013b8:	b8c00317 	ldw	r3,12(r23)
 10013bc:	b8800217 	ldw	r2,8(r23)
 10013c0:	99bfff04 	addi	r6,r19,-4
 10013c4:	01400904 	movi	r5,36
 10013c8:	b82b883a 	mov	r21,r23
 10013cc:	18800215 	stw	r2,8(r3)
 10013d0:	10c00315 	stw	r3,12(r2)
 10013d4:	bc000204 	addi	r16,r23,8
 10013d8:	2980c336 	bltu	r5,r6,10016e8 <_realloc_r+0x560>
 10013dc:	008004c4 	movi	r2,19
 10013e0:	9009883a 	mov	r4,r18
 10013e4:	8011883a 	mov	r8,r16
 10013e8:	11800f2e 	bgeu	r2,r6,1001428 <_realloc_r+0x2a0>
 10013ec:	90800017 	ldw	r2,0(r18)
 10013f0:	ba000404 	addi	r8,r23,16
 10013f4:	91000204 	addi	r4,r18,8
 10013f8:	b8800215 	stw	r2,8(r23)
 10013fc:	90c00117 	ldw	r3,4(r18)
 1001400:	008006c4 	movi	r2,27
 1001404:	b8c00315 	stw	r3,12(r23)
 1001408:	1180072e 	bgeu	r2,r6,1001428 <_realloc_r+0x2a0>
 100140c:	90c00217 	ldw	r3,8(r18)
 1001410:	ba000604 	addi	r8,r23,24
 1001414:	91000404 	addi	r4,r18,16
 1001418:	b8c00415 	stw	r3,16(r23)
 100141c:	90800317 	ldw	r2,12(r18)
 1001420:	b8800515 	stw	r2,20(r23)
 1001424:	3140c726 	beq	r6,r5,1001744 <_realloc_r+0x5bc>
 1001428:	20800017 	ldw	r2,0(r4)
 100142c:	b80f883a 	mov	r7,r23
 1001430:	003fd906 	br	1001398 <_realloc_r+0x210>
 1001434:	880b883a 	mov	r5,r17
 1001438:	b009883a 	mov	r4,r22
 100143c:	10007e40 	call	10007e4 <_malloc_r>
 1001440:	1023883a 	mov	r17,r2
 1001444:	10002526 	beq	r2,zero,10014dc <_realloc_r+0x354>
 1001448:	80800117 	ldw	r2,4(r16)
 100144c:	00ffff84 	movi	r3,-2
 1001450:	893ffe04 	addi	r4,r17,-8
 1001454:	10c4703a 	and	r2,r2,r3
 1001458:	8085883a 	add	r2,r16,r2
 100145c:	20809526 	beq	r4,r2,10016b4 <_realloc_r+0x52c>
 1001460:	99bfff04 	addi	r6,r19,-4
 1001464:	01c00904 	movi	r7,36
 1001468:	39804536 	bltu	r7,r6,1001580 <_realloc_r+0x3f8>
 100146c:	008004c4 	movi	r2,19
 1001470:	9009883a 	mov	r4,r18
 1001474:	880b883a 	mov	r5,r17
 1001478:	11800f2e 	bgeu	r2,r6,10014b8 <_realloc_r+0x330>
 100147c:	90800017 	ldw	r2,0(r18)
 1001480:	89400204 	addi	r5,r17,8
 1001484:	91000204 	addi	r4,r18,8
 1001488:	88800015 	stw	r2,0(r17)
 100148c:	90c00117 	ldw	r3,4(r18)
 1001490:	008006c4 	movi	r2,27
 1001494:	88c00115 	stw	r3,4(r17)
 1001498:	1180072e 	bgeu	r2,r6,10014b8 <_realloc_r+0x330>
 100149c:	90c00217 	ldw	r3,8(r18)
 10014a0:	89400404 	addi	r5,r17,16
 10014a4:	91000404 	addi	r4,r18,16
 10014a8:	88c00215 	stw	r3,8(r17)
 10014ac:	90800317 	ldw	r2,12(r18)
 10014b0:	88800315 	stw	r2,12(r17)
 10014b4:	31c09126 	beq	r6,r7,10016fc <_realloc_r+0x574>
 10014b8:	20800017 	ldw	r2,0(r4)
 10014bc:	28800015 	stw	r2,0(r5)
 10014c0:	20c00117 	ldw	r3,4(r4)
 10014c4:	28c00115 	stw	r3,4(r5)
 10014c8:	20800217 	ldw	r2,8(r4)
 10014cc:	28800215 	stw	r2,8(r5)
 10014d0:	900b883a 	mov	r5,r18
 10014d4:	b009883a 	mov	r4,r22
 10014d8:	1001f780 	call	1001f78 <_free_r>
 10014dc:	b009883a 	mov	r4,r22
 10014e0:	10032500 	call	1003250 <__malloc_unlock>
 10014e4:	003f5e06 	br	1001260 <_realloc_r+0xd8>
 10014e8:	300b883a 	mov	r5,r6
 10014ec:	dfc00b17 	ldw	ra,44(sp)
 10014f0:	df000a17 	ldw	fp,40(sp)
 10014f4:	ddc00917 	ldw	r23,36(sp)
 10014f8:	dd800817 	ldw	r22,32(sp)
 10014fc:	dd400717 	ldw	r21,28(sp)
 1001500:	dd000617 	ldw	r20,24(sp)
 1001504:	dcc00517 	ldw	r19,20(sp)
 1001508:	dc800417 	ldw	r18,16(sp)
 100150c:	dc400317 	ldw	r17,12(sp)
 1001510:	dc000217 	ldw	r16,8(sp)
 1001514:	dec00c04 	addi	sp,sp,48
 1001518:	10007e41 	jmpi	10007e4 <_malloc_r>
 100151c:	38800117 	ldw	r2,4(r7)
 1001520:	e54b883a 	add	r5,fp,r21
 1001524:	31000054 	ori	r4,r6,1
 1001528:	1080004c 	andi	r2,r2,1
 100152c:	1704b03a 	or	r2,r2,fp
 1001530:	38800115 	stw	r2,4(r7)
 1001534:	29000115 	stw	r4,4(r5)
 1001538:	2987883a 	add	r3,r5,r6
 100153c:	18800117 	ldw	r2,4(r3)
 1001540:	29400204 	addi	r5,r5,8
 1001544:	b009883a 	mov	r4,r22
 1001548:	10800054 	ori	r2,r2,1
 100154c:	18800115 	stw	r2,4(r3)
 1001550:	1001f780 	call	1001f78 <_free_r>
 1001554:	003f3806 	br	1001238 <_realloc_r+0xb0>
 1001558:	000d883a 	mov	r6,zero
 100155c:	0009883a 	mov	r4,zero
 1001560:	003f5d06 	br	10012d8 <_realloc_r+0x150>
 1001564:	30c00217 	ldw	r3,8(r6)
 1001568:	30800317 	ldw	r2,12(r6)
 100156c:	800f883a 	mov	r7,r16
 1001570:	84000204 	addi	r16,r16,8
 1001574:	10c00215 	stw	r3,8(r2)
 1001578:	18800315 	stw	r2,12(r3)
 100157c:	003f2306 	br	100120c <_realloc_r+0x84>
 1001580:	8809883a 	mov	r4,r17
 1001584:	900b883a 	mov	r5,r18
 1001588:	10010a80 	call	10010a8 <memmove>
 100158c:	003fd006 	br	10014d0 <_realloc_r+0x348>
 1001590:	30800117 	ldw	r2,4(r6)
 1001594:	e0c00404 	addi	r3,fp,16
 1001598:	1108703a 	and	r4,r2,r4
 100159c:	9905883a 	add	r2,r19,r4
 10015a0:	10ff4d16 	blt	r2,r3,10012d8 <_realloc_r+0x150>
 10015a4:	1705c83a 	sub	r2,r2,fp
 10015a8:	870b883a 	add	r5,r16,fp
 10015ac:	10800054 	ori	r2,r2,1
 10015b0:	28800115 	stw	r2,4(r5)
 10015b4:	80c00117 	ldw	r3,4(r16)
 10015b8:	00804034 	movhi	r2,256
 10015bc:	10964b04 	addi	r2,r2,22828
 10015c0:	b009883a 	mov	r4,r22
 10015c4:	18c0004c 	andi	r3,r3,1
 10015c8:	e0c6b03a 	or	r3,fp,r3
 10015cc:	11400215 	stw	r5,8(r2)
 10015d0:	80c00115 	stw	r3,4(r16)
 10015d4:	10032500 	call	1003250 <__malloc_unlock>
 10015d8:	84400204 	addi	r17,r16,8
 10015dc:	003f2006 	br	1001260 <_realloc_r+0xd8>
 10015e0:	98a9883a 	add	r20,r19,r2
 10015e4:	2509883a 	add	r4,r4,r20
 10015e8:	e0800404 	addi	r2,fp,16
 10015ec:	d9000115 	stw	r4,4(sp)
 10015f0:	20bf7016 	blt	r4,r2,10013b4 <_realloc_r+0x22c>
 10015f4:	b8c00317 	ldw	r3,12(r23)
 10015f8:	b8800217 	ldw	r2,8(r23)
 10015fc:	99bfff04 	addi	r6,r19,-4
 1001600:	01400904 	movi	r5,36
 1001604:	18800215 	stw	r2,8(r3)
 1001608:	10c00315 	stw	r3,12(r2)
 100160c:	bc400204 	addi	r17,r23,8
 1001610:	29804136 	bltu	r5,r6,1001718 <_realloc_r+0x590>
 1001614:	008004c4 	movi	r2,19
 1001618:	9009883a 	mov	r4,r18
 100161c:	880f883a 	mov	r7,r17
 1001620:	11800f2e 	bgeu	r2,r6,1001660 <_realloc_r+0x4d8>
 1001624:	90800017 	ldw	r2,0(r18)
 1001628:	b9c00404 	addi	r7,r23,16
 100162c:	91000204 	addi	r4,r18,8
 1001630:	b8800215 	stw	r2,8(r23)
 1001634:	90c00117 	ldw	r3,4(r18)
 1001638:	008006c4 	movi	r2,27
 100163c:	b8c00315 	stw	r3,12(r23)
 1001640:	1180072e 	bgeu	r2,r6,1001660 <_realloc_r+0x4d8>
 1001644:	90c00217 	ldw	r3,8(r18)
 1001648:	b9c00604 	addi	r7,r23,24
 100164c:	91000404 	addi	r4,r18,16
 1001650:	b8c00415 	stw	r3,16(r23)
 1001654:	90800317 	ldw	r2,12(r18)
 1001658:	b8800515 	stw	r2,20(r23)
 100165c:	31404026 	beq	r6,r5,1001760 <_realloc_r+0x5d8>
 1001660:	20800017 	ldw	r2,0(r4)
 1001664:	38800015 	stw	r2,0(r7)
 1001668:	20c00117 	ldw	r3,4(r4)
 100166c:	38c00115 	stw	r3,4(r7)
 1001670:	20800217 	ldw	r2,8(r4)
 1001674:	38800215 	stw	r2,8(r7)
 1001678:	d8c00117 	ldw	r3,4(sp)
 100167c:	bf0b883a 	add	r5,r23,fp
 1001680:	b009883a 	mov	r4,r22
 1001684:	1f05c83a 	sub	r2,r3,fp
 1001688:	10800054 	ori	r2,r2,1
 100168c:	28800115 	stw	r2,4(r5)
 1001690:	b8c00117 	ldw	r3,4(r23)
 1001694:	00804034 	movhi	r2,256
 1001698:	10964b04 	addi	r2,r2,22828
 100169c:	11400215 	stw	r5,8(r2)
 10016a0:	18c0004c 	andi	r3,r3,1
 10016a4:	e0c6b03a 	or	r3,fp,r3
 10016a8:	b8c00115 	stw	r3,4(r23)
 10016ac:	10032500 	call	1003250 <__malloc_unlock>
 10016b0:	003eeb06 	br	1001260 <_realloc_r+0xd8>
 10016b4:	20800117 	ldw	r2,4(r4)
 10016b8:	00ffff04 	movi	r3,-4
 10016bc:	800f883a 	mov	r7,r16
 10016c0:	10c4703a 	and	r2,r2,r3
 10016c4:	98a9883a 	add	r20,r19,r2
 10016c8:	84000204 	addi	r16,r16,8
 10016cc:	003ecf06 	br	100120c <_realloc_r+0x84>
 10016d0:	900b883a 	mov	r5,r18
 10016d4:	8009883a 	mov	r4,r16
 10016d8:	10010a80 	call	10010a8 <memmove>
 10016dc:	dd000017 	ldw	r20,0(sp)
 10016e0:	b80f883a 	mov	r7,r23
 10016e4:	003ec906 	br	100120c <_realloc_r+0x84>
 10016e8:	900b883a 	mov	r5,r18
 10016ec:	8009883a 	mov	r4,r16
 10016f0:	10010a80 	call	10010a8 <memmove>
 10016f4:	b80f883a 	mov	r7,r23
 10016f8:	003ec406 	br	100120c <_realloc_r+0x84>
 10016fc:	90c00417 	ldw	r3,16(r18)
 1001700:	89400604 	addi	r5,r17,24
 1001704:	91000604 	addi	r4,r18,24
 1001708:	88c00415 	stw	r3,16(r17)
 100170c:	90800517 	ldw	r2,20(r18)
 1001710:	88800515 	stw	r2,20(r17)
 1001714:	003f6806 	br	10014b8 <_realloc_r+0x330>
 1001718:	900b883a 	mov	r5,r18
 100171c:	8809883a 	mov	r4,r17
 1001720:	10010a80 	call	10010a8 <memmove>
 1001724:	003fd406 	br	1001678 <_realloc_r+0x4f0>
 1001728:	90c00417 	ldw	r3,16(r18)
 100172c:	91000604 	addi	r4,r18,24
 1001730:	ba000804 	addi	r8,r23,32
 1001734:	b8c00615 	stw	r3,24(r23)
 1001738:	90800517 	ldw	r2,20(r18)
 100173c:	b8800715 	stw	r2,28(r23)
 1001740:	003f1206 	br	100138c <_realloc_r+0x204>
 1001744:	90c00417 	ldw	r3,16(r18)
 1001748:	91000604 	addi	r4,r18,24
 100174c:	ba000804 	addi	r8,r23,32
 1001750:	b8c00615 	stw	r3,24(r23)
 1001754:	90800517 	ldw	r2,20(r18)
 1001758:	b8800715 	stw	r2,28(r23)
 100175c:	003f3206 	br	1001428 <_realloc_r+0x2a0>
 1001760:	90c00417 	ldw	r3,16(r18)
 1001764:	91000604 	addi	r4,r18,24
 1001768:	b9c00804 	addi	r7,r23,32
 100176c:	b8c00615 	stw	r3,24(r23)
 1001770:	90800517 	ldw	r2,20(r18)
 1001774:	b8800715 	stw	r2,28(r23)
 1001778:	003fb906 	br	1001660 <_realloc_r+0x4d8>

0100177c <_sbrk_r>:
 100177c:	defffd04 	addi	sp,sp,-12
 1001780:	dc000015 	stw	r16,0(sp)
 1001784:	04004074 	movhi	r16,257
 1001788:	84227204 	addi	r16,r16,-30264
 100178c:	dc400115 	stw	r17,4(sp)
 1001790:	80000015 	stw	zero,0(r16)
 1001794:	2023883a 	mov	r17,r4
 1001798:	2809883a 	mov	r4,r5
 100179c:	dfc00215 	stw	ra,8(sp)
 10017a0:	100346c0 	call	100346c <sbrk>
 10017a4:	1007883a 	mov	r3,r2
 10017a8:	00bfffc4 	movi	r2,-1
 10017ac:	18800626 	beq	r3,r2,10017c8 <_sbrk_r+0x4c>
 10017b0:	1805883a 	mov	r2,r3
 10017b4:	dfc00217 	ldw	ra,8(sp)
 10017b8:	dc400117 	ldw	r17,4(sp)
 10017bc:	dc000017 	ldw	r16,0(sp)
 10017c0:	dec00304 	addi	sp,sp,12
 10017c4:	f800283a 	ret
 10017c8:	80800017 	ldw	r2,0(r16)
 10017cc:	103ff826 	beq	r2,zero,10017b0 <_sbrk_r+0x34>
 10017d0:	88800015 	stw	r2,0(r17)
 10017d4:	1805883a 	mov	r2,r3
 10017d8:	dfc00217 	ldw	ra,8(sp)
 10017dc:	dc400117 	ldw	r17,4(sp)
 10017e0:	dc000017 	ldw	r16,0(sp)
 10017e4:	dec00304 	addi	sp,sp,12
 10017e8:	f800283a 	ret

010017ec <__swsetup_r>:
 10017ec:	00804034 	movhi	r2,256
 10017f0:	109bcf04 	addi	r2,r2,28476
 10017f4:	10c00017 	ldw	r3,0(r2)
 10017f8:	defffd04 	addi	sp,sp,-12
 10017fc:	dc400115 	stw	r17,4(sp)
 1001800:	dc000015 	stw	r16,0(sp)
 1001804:	dfc00215 	stw	ra,8(sp)
 1001808:	2023883a 	mov	r17,r4
 100180c:	2821883a 	mov	r16,r5
 1001810:	18000226 	beq	r3,zero,100181c <__swsetup_r+0x30>
 1001814:	18800e17 	ldw	r2,56(r3)
 1001818:	10001f26 	beq	r2,zero,1001898 <__swsetup_r+0xac>
 100181c:	8100030b 	ldhu	r4,12(r16)
 1001820:	2080020c 	andi	r2,r4,8
 1001824:	10002826 	beq	r2,zero,10018c8 <__swsetup_r+0xdc>
 1001828:	81400417 	ldw	r5,16(r16)
 100182c:	28001d26 	beq	r5,zero,10018a4 <__swsetup_r+0xb8>
 1001830:	2080004c 	andi	r2,r4,1
 1001834:	1005003a 	cmpeq	r2,r2,zero
 1001838:	10000b26 	beq	r2,zero,1001868 <__swsetup_r+0x7c>
 100183c:	2080008c 	andi	r2,r4,2
 1001840:	10001226 	beq	r2,zero,100188c <__swsetup_r+0xa0>
 1001844:	0005883a 	mov	r2,zero
 1001848:	80800215 	stw	r2,8(r16)
 100184c:	28000b26 	beq	r5,zero,100187c <__swsetup_r+0x90>
 1001850:	0005883a 	mov	r2,zero
 1001854:	dfc00217 	ldw	ra,8(sp)
 1001858:	dc400117 	ldw	r17,4(sp)
 100185c:	dc000017 	ldw	r16,0(sp)
 1001860:	dec00304 	addi	sp,sp,12
 1001864:	f800283a 	ret
 1001868:	80800517 	ldw	r2,20(r16)
 100186c:	80000215 	stw	zero,8(r16)
 1001870:	0085c83a 	sub	r2,zero,r2
 1001874:	80800615 	stw	r2,24(r16)
 1001878:	283ff51e 	bne	r5,zero,1001850 <__swsetup_r+0x64>
 100187c:	2080200c 	andi	r2,r4,128
 1001880:	103ff326 	beq	r2,zero,1001850 <__swsetup_r+0x64>
 1001884:	00bfffc4 	movi	r2,-1
 1001888:	003ff206 	br	1001854 <__swsetup_r+0x68>
 100188c:	80800517 	ldw	r2,20(r16)
 1001890:	80800215 	stw	r2,8(r16)
 1001894:	003fed06 	br	100184c <__swsetup_r+0x60>
 1001898:	1809883a 	mov	r4,r3
 100189c:	1001bc00 	call	1001bc0 <__sinit>
 10018a0:	003fde06 	br	100181c <__swsetup_r+0x30>
 10018a4:	20c0a00c 	andi	r3,r4,640
 10018a8:	00808004 	movi	r2,512
 10018ac:	18bfe026 	beq	r3,r2,1001830 <__swsetup_r+0x44>
 10018b0:	8809883a 	mov	r4,r17
 10018b4:	800b883a 	mov	r5,r16
 10018b8:	100240c0 	call	100240c <__smakebuf_r>
 10018bc:	8100030b 	ldhu	r4,12(r16)
 10018c0:	81400417 	ldw	r5,16(r16)
 10018c4:	003fda06 	br	1001830 <__swsetup_r+0x44>
 10018c8:	2080040c 	andi	r2,r4,16
 10018cc:	103fed26 	beq	r2,zero,1001884 <__swsetup_r+0x98>
 10018d0:	2080010c 	andi	r2,r4,4
 10018d4:	10001226 	beq	r2,zero,1001920 <__swsetup_r+0x134>
 10018d8:	81400c17 	ldw	r5,48(r16)
 10018dc:	28000526 	beq	r5,zero,10018f4 <__swsetup_r+0x108>
 10018e0:	80801004 	addi	r2,r16,64
 10018e4:	28800226 	beq	r5,r2,10018f0 <__swsetup_r+0x104>
 10018e8:	8809883a 	mov	r4,r17
 10018ec:	1001f780 	call	1001f78 <_free_r>
 10018f0:	80000c15 	stw	zero,48(r16)
 10018f4:	8080030b 	ldhu	r2,12(r16)
 10018f8:	81400417 	ldw	r5,16(r16)
 10018fc:	80000115 	stw	zero,4(r16)
 1001900:	10bff6cc 	andi	r2,r2,65499
 1001904:	8080030d 	sth	r2,12(r16)
 1001908:	81400015 	stw	r5,0(r16)
 100190c:	8080030b 	ldhu	r2,12(r16)
 1001910:	10800214 	ori	r2,r2,8
 1001914:	113fffcc 	andi	r4,r2,65535
 1001918:	8080030d 	sth	r2,12(r16)
 100191c:	003fc306 	br	100182c <__swsetup_r+0x40>
 1001920:	81400417 	ldw	r5,16(r16)
 1001924:	003ff906 	br	100190c <__swsetup_r+0x120>

01001928 <_fflush_r>:
 1001928:	defffb04 	addi	sp,sp,-20
 100192c:	dcc00315 	stw	r19,12(sp)
 1001930:	dc800215 	stw	r18,8(sp)
 1001934:	dfc00415 	stw	ra,16(sp)
 1001938:	dc400115 	stw	r17,4(sp)
 100193c:	dc000015 	stw	r16,0(sp)
 1001940:	2027883a 	mov	r19,r4
 1001944:	2825883a 	mov	r18,r5
 1001948:	20000226 	beq	r4,zero,1001954 <_fflush_r+0x2c>
 100194c:	20800e17 	ldw	r2,56(r4)
 1001950:	10005626 	beq	r2,zero,1001aac <_fflush_r+0x184>
 1001954:	9100030b 	ldhu	r4,12(r18)
 1001958:	20ffffcc 	andi	r3,r4,65535
 100195c:	18e0001c 	xori	r3,r3,32768
 1001960:	18e00004 	addi	r3,r3,-32768
 1001964:	1880020c 	andi	r2,r3,8
 1001968:	1000261e 	bne	r2,zero,1001a04 <_fflush_r+0xdc>
 100196c:	90c00117 	ldw	r3,4(r18)
 1001970:	20820014 	ori	r2,r4,2048
 1001974:	9080030d 	sth	r2,12(r18)
 1001978:	1009883a 	mov	r4,r2
 100197c:	00c0400e 	bge	zero,r3,1001a80 <_fflush_r+0x158>
 1001980:	92000a17 	ldw	r8,40(r18)
 1001984:	40004026 	beq	r8,zero,1001a88 <_fflush_r+0x160>
 1001988:	2084000c 	andi	r2,r4,4096
 100198c:	10005326 	beq	r2,zero,1001adc <_fflush_r+0x1b4>
 1001990:	94001417 	ldw	r16,80(r18)
 1001994:	9080030b 	ldhu	r2,12(r18)
 1001998:	1080010c 	andi	r2,r2,4
 100199c:	1000481e 	bne	r2,zero,1001ac0 <_fflush_r+0x198>
 10019a0:	91400717 	ldw	r5,28(r18)
 10019a4:	9809883a 	mov	r4,r19
 10019a8:	800d883a 	mov	r6,r16
 10019ac:	000f883a 	mov	r7,zero
 10019b0:	403ee83a 	callr	r8
 10019b4:	8080261e 	bne	r16,r2,1001a50 <_fflush_r+0x128>
 10019b8:	9080030b 	ldhu	r2,12(r18)
 10019bc:	91000417 	ldw	r4,16(r18)
 10019c0:	90000115 	stw	zero,4(r18)
 10019c4:	10bdffcc 	andi	r2,r2,63487
 10019c8:	10ffffcc 	andi	r3,r2,65535
 10019cc:	18c4000c 	andi	r3,r3,4096
 10019d0:	9080030d 	sth	r2,12(r18)
 10019d4:	91000015 	stw	r4,0(r18)
 10019d8:	18002b26 	beq	r3,zero,1001a88 <_fflush_r+0x160>
 10019dc:	0007883a 	mov	r3,zero
 10019e0:	1805883a 	mov	r2,r3
 10019e4:	94001415 	stw	r16,80(r18)
 10019e8:	dfc00417 	ldw	ra,16(sp)
 10019ec:	dcc00317 	ldw	r19,12(sp)
 10019f0:	dc800217 	ldw	r18,8(sp)
 10019f4:	dc400117 	ldw	r17,4(sp)
 10019f8:	dc000017 	ldw	r16,0(sp)
 10019fc:	dec00504 	addi	sp,sp,20
 1001a00:	f800283a 	ret
 1001a04:	94400417 	ldw	r17,16(r18)
 1001a08:	88001f26 	beq	r17,zero,1001a88 <_fflush_r+0x160>
 1001a0c:	90800017 	ldw	r2,0(r18)
 1001a10:	18c000cc 	andi	r3,r3,3
 1001a14:	94400015 	stw	r17,0(r18)
 1001a18:	1461c83a 	sub	r16,r2,r17
 1001a1c:	18002526 	beq	r3,zero,1001ab4 <_fflush_r+0x18c>
 1001a20:	0005883a 	mov	r2,zero
 1001a24:	90800215 	stw	r2,8(r18)
 1001a28:	0400170e 	bge	zero,r16,1001a88 <_fflush_r+0x160>
 1001a2c:	90c00917 	ldw	r3,36(r18)
 1001a30:	91400717 	ldw	r5,28(r18)
 1001a34:	880d883a 	mov	r6,r17
 1001a38:	800f883a 	mov	r7,r16
 1001a3c:	9809883a 	mov	r4,r19
 1001a40:	183ee83a 	callr	r3
 1001a44:	88a3883a 	add	r17,r17,r2
 1001a48:	80a1c83a 	sub	r16,r16,r2
 1001a4c:	00bff616 	blt	zero,r2,1001a28 <_fflush_r+0x100>
 1001a50:	9080030b 	ldhu	r2,12(r18)
 1001a54:	00ffffc4 	movi	r3,-1
 1001a58:	10801014 	ori	r2,r2,64
 1001a5c:	9080030d 	sth	r2,12(r18)
 1001a60:	1805883a 	mov	r2,r3
 1001a64:	dfc00417 	ldw	ra,16(sp)
 1001a68:	dcc00317 	ldw	r19,12(sp)
 1001a6c:	dc800217 	ldw	r18,8(sp)
 1001a70:	dc400117 	ldw	r17,4(sp)
 1001a74:	dc000017 	ldw	r16,0(sp)
 1001a78:	dec00504 	addi	sp,sp,20
 1001a7c:	f800283a 	ret
 1001a80:	90800f17 	ldw	r2,60(r18)
 1001a84:	00bfbe16 	blt	zero,r2,1001980 <_fflush_r+0x58>
 1001a88:	0007883a 	mov	r3,zero
 1001a8c:	1805883a 	mov	r2,r3
 1001a90:	dfc00417 	ldw	ra,16(sp)
 1001a94:	dcc00317 	ldw	r19,12(sp)
 1001a98:	dc800217 	ldw	r18,8(sp)
 1001a9c:	dc400117 	ldw	r17,4(sp)
 1001aa0:	dc000017 	ldw	r16,0(sp)
 1001aa4:	dec00504 	addi	sp,sp,20
 1001aa8:	f800283a 	ret
 1001aac:	1001bc00 	call	1001bc0 <__sinit>
 1001ab0:	003fa806 	br	1001954 <_fflush_r+0x2c>
 1001ab4:	90800517 	ldw	r2,20(r18)
 1001ab8:	90800215 	stw	r2,8(r18)
 1001abc:	003fda06 	br	1001a28 <_fflush_r+0x100>
 1001ac0:	90800117 	ldw	r2,4(r18)
 1001ac4:	90c00c17 	ldw	r3,48(r18)
 1001ac8:	80a1c83a 	sub	r16,r16,r2
 1001acc:	183fb426 	beq	r3,zero,10019a0 <_fflush_r+0x78>
 1001ad0:	90800f17 	ldw	r2,60(r18)
 1001ad4:	80a1c83a 	sub	r16,r16,r2
 1001ad8:	003fb106 	br	10019a0 <_fflush_r+0x78>
 1001adc:	91400717 	ldw	r5,28(r18)
 1001ae0:	9809883a 	mov	r4,r19
 1001ae4:	000d883a 	mov	r6,zero
 1001ae8:	01c00044 	movi	r7,1
 1001aec:	403ee83a 	callr	r8
 1001af0:	1021883a 	mov	r16,r2
 1001af4:	00bfffc4 	movi	r2,-1
 1001af8:	80800226 	beq	r16,r2,1001b04 <_fflush_r+0x1dc>
 1001afc:	92000a17 	ldw	r8,40(r18)
 1001b00:	003fa406 	br	1001994 <_fflush_r+0x6c>
 1001b04:	98c00017 	ldw	r3,0(r19)
 1001b08:	00800744 	movi	r2,29
 1001b0c:	18bfde26 	beq	r3,r2,1001a88 <_fflush_r+0x160>
 1001b10:	9080030b 	ldhu	r2,12(r18)
 1001b14:	8007883a 	mov	r3,r16
 1001b18:	10801014 	ori	r2,r2,64
 1001b1c:	9080030d 	sth	r2,12(r18)
 1001b20:	003fcf06 	br	1001a60 <_fflush_r+0x138>

01001b24 <fflush>:
 1001b24:	01404034 	movhi	r5,256
 1001b28:	29464a04 	addi	r5,r5,6440
 1001b2c:	2007883a 	mov	r3,r4
 1001b30:	20000526 	beq	r4,zero,1001b48 <fflush+0x24>
 1001b34:	00804034 	movhi	r2,256
 1001b38:	109bcf04 	addi	r2,r2,28476
 1001b3c:	11000017 	ldw	r4,0(r2)
 1001b40:	180b883a 	mov	r5,r3
 1001b44:	10019281 	jmpi	1001928 <_fflush_r>
 1001b48:	00804034 	movhi	r2,256
 1001b4c:	109bd004 	addi	r2,r2,28480
 1001b50:	11000017 	ldw	r4,0(r2)
 1001b54:	100228c1 	jmpi	100228c <_fwalk_reent>

01001b58 <std>:
 1001b58:	00804034 	movhi	r2,256
 1001b5c:	10898e04 	addi	r2,r2,9784
 1001b60:	20800b15 	stw	r2,44(r4)
 1001b64:	00804034 	movhi	r2,256
 1001b68:	1089c904 	addi	r2,r2,10020
 1001b6c:	20800815 	stw	r2,32(r4)
 1001b70:	00c04034 	movhi	r3,256
 1001b74:	18c9aa04 	addi	r3,r3,9896
 1001b78:	00804034 	movhi	r2,256
 1001b7c:	10899004 	addi	r2,r2,9792
 1001b80:	2140030d 	sth	r5,12(r4)
 1001b84:	2180038d 	sth	r6,14(r4)
 1001b88:	20c00915 	stw	r3,36(r4)
 1001b8c:	20800a15 	stw	r2,40(r4)
 1001b90:	20000015 	stw	zero,0(r4)
 1001b94:	20000115 	stw	zero,4(r4)
 1001b98:	20000215 	stw	zero,8(r4)
 1001b9c:	20000415 	stw	zero,16(r4)
 1001ba0:	20000515 	stw	zero,20(r4)
 1001ba4:	20000615 	stw	zero,24(r4)
 1001ba8:	21000715 	stw	r4,28(r4)
 1001bac:	f800283a 	ret

01001bb0 <__sfp_lock_acquire>:
 1001bb0:	f800283a 	ret

01001bb4 <__sfp_lock_release>:
 1001bb4:	f800283a 	ret

01001bb8 <__sinit_lock_acquire>:
 1001bb8:	f800283a 	ret

01001bbc <__sinit_lock_release>:
 1001bbc:	f800283a 	ret

01001bc0 <__sinit>:
 1001bc0:	20800e17 	ldw	r2,56(r4)
 1001bc4:	defffd04 	addi	sp,sp,-12
 1001bc8:	dc400115 	stw	r17,4(sp)
 1001bcc:	dc000015 	stw	r16,0(sp)
 1001bd0:	dfc00215 	stw	ra,8(sp)
 1001bd4:	04400044 	movi	r17,1
 1001bd8:	01400104 	movi	r5,4
 1001bdc:	000d883a 	mov	r6,zero
 1001be0:	2021883a 	mov	r16,r4
 1001be4:	2200bb04 	addi	r8,r4,748
 1001be8:	200f883a 	mov	r7,r4
 1001bec:	10000526 	beq	r2,zero,1001c04 <__sinit+0x44>
 1001bf0:	dfc00217 	ldw	ra,8(sp)
 1001bf4:	dc400117 	ldw	r17,4(sp)
 1001bf8:	dc000017 	ldw	r16,0(sp)
 1001bfc:	dec00304 	addi	sp,sp,12
 1001c00:	f800283a 	ret
 1001c04:	21000117 	ldw	r4,4(r4)
 1001c08:	00804034 	movhi	r2,256
 1001c0c:	10872904 	addi	r2,r2,7332
 1001c10:	00c000c4 	movi	r3,3
 1001c14:	80800f15 	stw	r2,60(r16)
 1001c18:	80c0b915 	stw	r3,740(r16)
 1001c1c:	8200ba15 	stw	r8,744(r16)
 1001c20:	84400e15 	stw	r17,56(r16)
 1001c24:	8000b815 	stw	zero,736(r16)
 1001c28:	1001b580 	call	1001b58 <std>
 1001c2c:	81000217 	ldw	r4,8(r16)
 1001c30:	880d883a 	mov	r6,r17
 1001c34:	800f883a 	mov	r7,r16
 1001c38:	01400284 	movi	r5,10
 1001c3c:	1001b580 	call	1001b58 <std>
 1001c40:	81000317 	ldw	r4,12(r16)
 1001c44:	800f883a 	mov	r7,r16
 1001c48:	01400484 	movi	r5,18
 1001c4c:	01800084 	movi	r6,2
 1001c50:	dfc00217 	ldw	ra,8(sp)
 1001c54:	dc400117 	ldw	r17,4(sp)
 1001c58:	dc000017 	ldw	r16,0(sp)
 1001c5c:	dec00304 	addi	sp,sp,12
 1001c60:	1001b581 	jmpi	1001b58 <std>

01001c64 <__fp_lock>:
 1001c64:	0005883a 	mov	r2,zero
 1001c68:	f800283a 	ret

01001c6c <__fp_unlock>:
 1001c6c:	0005883a 	mov	r2,zero
 1001c70:	f800283a 	ret

01001c74 <__fp_unlock_all>:
 1001c74:	00804034 	movhi	r2,256
 1001c78:	109bcf04 	addi	r2,r2,28476
 1001c7c:	11000017 	ldw	r4,0(r2)
 1001c80:	01404034 	movhi	r5,256
 1001c84:	29471b04 	addi	r5,r5,7276
 1001c88:	10023541 	jmpi	1002354 <_fwalk>

01001c8c <__fp_lock_all>:
 1001c8c:	00804034 	movhi	r2,256
 1001c90:	109bcf04 	addi	r2,r2,28476
 1001c94:	11000017 	ldw	r4,0(r2)
 1001c98:	01404034 	movhi	r5,256
 1001c9c:	29471904 	addi	r5,r5,7268
 1001ca0:	10023541 	jmpi	1002354 <_fwalk>

01001ca4 <_cleanup_r>:
 1001ca4:	01404034 	movhi	r5,256
 1001ca8:	294a5f04 	addi	r5,r5,10620
 1001cac:	10023541 	jmpi	1002354 <_fwalk>

01001cb0 <_cleanup>:
 1001cb0:	00804034 	movhi	r2,256
 1001cb4:	109bd004 	addi	r2,r2,28480
 1001cb8:	11000017 	ldw	r4,0(r2)
 1001cbc:	1001ca41 	jmpi	1001ca4 <_cleanup_r>

01001cc0 <__sfmoreglue>:
 1001cc0:	defffc04 	addi	sp,sp,-16
 1001cc4:	dc000015 	stw	r16,0(sp)
 1001cc8:	2821883a 	mov	r16,r5
 1001ccc:	dc400115 	stw	r17,4(sp)
 1001cd0:	01401704 	movi	r5,92
 1001cd4:	2023883a 	mov	r17,r4
 1001cd8:	8009883a 	mov	r4,r16
 1001cdc:	dfc00315 	stw	ra,12(sp)
 1001ce0:	dcc00215 	stw	r19,8(sp)
 1001ce4:	1002b640 	call	1002b64 <__mulsi3>
 1001ce8:	11400304 	addi	r5,r2,12
 1001cec:	8809883a 	mov	r4,r17
 1001cf0:	1027883a 	mov	r19,r2
 1001cf4:	10007e40 	call	10007e4 <_malloc_r>
 1001cf8:	10c00304 	addi	r3,r2,12
 1001cfc:	1023883a 	mov	r17,r2
 1001d00:	1809883a 	mov	r4,r3
 1001d04:	980d883a 	mov	r6,r19
 1001d08:	000b883a 	mov	r5,zero
 1001d0c:	10000b26 	beq	r2,zero,1001d3c <__sfmoreglue+0x7c>
 1001d10:	14000115 	stw	r16,4(r2)
 1001d14:	10c00215 	stw	r3,8(r2)
 1001d18:	10000015 	stw	zero,0(r2)
 1001d1c:	10025a00 	call	10025a0 <memset>
 1001d20:	8805883a 	mov	r2,r17
 1001d24:	dfc00317 	ldw	ra,12(sp)
 1001d28:	dcc00217 	ldw	r19,8(sp)
 1001d2c:	dc400117 	ldw	r17,4(sp)
 1001d30:	dc000017 	ldw	r16,0(sp)
 1001d34:	dec00404 	addi	sp,sp,16
 1001d38:	f800283a 	ret
 1001d3c:	0023883a 	mov	r17,zero
 1001d40:	8805883a 	mov	r2,r17
 1001d44:	dfc00317 	ldw	ra,12(sp)
 1001d48:	dcc00217 	ldw	r19,8(sp)
 1001d4c:	dc400117 	ldw	r17,4(sp)
 1001d50:	dc000017 	ldw	r16,0(sp)
 1001d54:	dec00404 	addi	sp,sp,16
 1001d58:	f800283a 	ret

01001d5c <__sfp>:
 1001d5c:	defffd04 	addi	sp,sp,-12
 1001d60:	00804034 	movhi	r2,256
 1001d64:	109bd004 	addi	r2,r2,28480
 1001d68:	dc000015 	stw	r16,0(sp)
 1001d6c:	14000017 	ldw	r16,0(r2)
 1001d70:	dc400115 	stw	r17,4(sp)
 1001d74:	dfc00215 	stw	ra,8(sp)
 1001d78:	80800e17 	ldw	r2,56(r16)
 1001d7c:	2023883a 	mov	r17,r4
 1001d80:	10002626 	beq	r2,zero,1001e1c <__sfp+0xc0>
 1001d84:	8400b804 	addi	r16,r16,736
 1001d88:	80800117 	ldw	r2,4(r16)
 1001d8c:	81000217 	ldw	r4,8(r16)
 1001d90:	10ffffc4 	addi	r3,r2,-1
 1001d94:	18000916 	blt	r3,zero,1001dbc <__sfp+0x60>
 1001d98:	2080030f 	ldh	r2,12(r4)
 1001d9c:	10000b26 	beq	r2,zero,1001dcc <__sfp+0x70>
 1001da0:	017fffc4 	movi	r5,-1
 1001da4:	00000206 	br	1001db0 <__sfp+0x54>
 1001da8:	2080030f 	ldh	r2,12(r4)
 1001dac:	10000726 	beq	r2,zero,1001dcc <__sfp+0x70>
 1001db0:	18ffffc4 	addi	r3,r3,-1
 1001db4:	21001704 	addi	r4,r4,92
 1001db8:	197ffb1e 	bne	r3,r5,1001da8 <__sfp+0x4c>
 1001dbc:	80800017 	ldw	r2,0(r16)
 1001dc0:	10001926 	beq	r2,zero,1001e28 <__sfp+0xcc>
 1001dc4:	1021883a 	mov	r16,r2
 1001dc8:	003fef06 	br	1001d88 <__sfp+0x2c>
 1001dcc:	00bfffc4 	movi	r2,-1
 1001dd0:	00c00044 	movi	r3,1
 1001dd4:	2080038d 	sth	r2,14(r4)
 1001dd8:	20c0030d 	sth	r3,12(r4)
 1001ddc:	20000015 	stw	zero,0(r4)
 1001de0:	20000215 	stw	zero,8(r4)
 1001de4:	20000115 	stw	zero,4(r4)
 1001de8:	20000415 	stw	zero,16(r4)
 1001dec:	20000515 	stw	zero,20(r4)
 1001df0:	20000615 	stw	zero,24(r4)
 1001df4:	20000c15 	stw	zero,48(r4)
 1001df8:	20000d15 	stw	zero,52(r4)
 1001dfc:	20001115 	stw	zero,68(r4)
 1001e00:	20001215 	stw	zero,72(r4)
 1001e04:	2005883a 	mov	r2,r4
 1001e08:	dfc00217 	ldw	ra,8(sp)
 1001e0c:	dc400117 	ldw	r17,4(sp)
 1001e10:	dc000017 	ldw	r16,0(sp)
 1001e14:	dec00304 	addi	sp,sp,12
 1001e18:	f800283a 	ret
 1001e1c:	8009883a 	mov	r4,r16
 1001e20:	1001bc00 	call	1001bc0 <__sinit>
 1001e24:	003fd706 	br	1001d84 <__sfp+0x28>
 1001e28:	8809883a 	mov	r4,r17
 1001e2c:	01400104 	movi	r5,4
 1001e30:	1001cc00 	call	1001cc0 <__sfmoreglue>
 1001e34:	80800015 	stw	r2,0(r16)
 1001e38:	103fe21e 	bne	r2,zero,1001dc4 <__sfp+0x68>
 1001e3c:	00800304 	movi	r2,12
 1001e40:	0009883a 	mov	r4,zero
 1001e44:	88800015 	stw	r2,0(r17)
 1001e48:	003fee06 	br	1001e04 <__sfp+0xa8>

01001e4c <_malloc_trim_r>:
 1001e4c:	defffb04 	addi	sp,sp,-20
 1001e50:	dcc00315 	stw	r19,12(sp)
 1001e54:	04c04034 	movhi	r19,256
 1001e58:	9cd64b04 	addi	r19,r19,22828
 1001e5c:	dc800215 	stw	r18,8(sp)
 1001e60:	dc400115 	stw	r17,4(sp)
 1001e64:	dc000015 	stw	r16,0(sp)
 1001e68:	2823883a 	mov	r17,r5
 1001e6c:	2025883a 	mov	r18,r4
 1001e70:	dfc00415 	stw	ra,16(sp)
 1001e74:	10032300 	call	1003230 <__malloc_lock>
 1001e78:	98800217 	ldw	r2,8(r19)
 1001e7c:	9009883a 	mov	r4,r18
 1001e80:	000b883a 	mov	r5,zero
 1001e84:	10c00117 	ldw	r3,4(r2)
 1001e88:	00bfff04 	movi	r2,-4
 1001e8c:	18a0703a 	and	r16,r3,r2
 1001e90:	8463c83a 	sub	r17,r16,r17
 1001e94:	8c43fbc4 	addi	r17,r17,4079
 1001e98:	8822d33a 	srli	r17,r17,12
 1001e9c:	0083ffc4 	movi	r2,4095
 1001ea0:	8c7fffc4 	addi	r17,r17,-1
 1001ea4:	8822933a 	slli	r17,r17,12
 1001ea8:	1440060e 	bge	r2,r17,1001ec4 <_malloc_trim_r+0x78>
 1001eac:	100177c0 	call	100177c <_sbrk_r>
 1001eb0:	98c00217 	ldw	r3,8(r19)
 1001eb4:	9009883a 	mov	r4,r18
 1001eb8:	044bc83a 	sub	r5,zero,r17
 1001ebc:	80c7883a 	add	r3,r16,r3
 1001ec0:	10c00926 	beq	r2,r3,1001ee8 <_malloc_trim_r+0x9c>
 1001ec4:	10032500 	call	1003250 <__malloc_unlock>
 1001ec8:	0005883a 	mov	r2,zero
 1001ecc:	dfc00417 	ldw	ra,16(sp)
 1001ed0:	dcc00317 	ldw	r19,12(sp)
 1001ed4:	dc800217 	ldw	r18,8(sp)
 1001ed8:	dc400117 	ldw	r17,4(sp)
 1001edc:	dc000017 	ldw	r16,0(sp)
 1001ee0:	dec00504 	addi	sp,sp,20
 1001ee4:	f800283a 	ret
 1001ee8:	9009883a 	mov	r4,r18
 1001eec:	100177c0 	call	100177c <_sbrk_r>
 1001ef0:	844dc83a 	sub	r6,r16,r17
 1001ef4:	00ffffc4 	movi	r3,-1
 1001ef8:	9009883a 	mov	r4,r18
 1001efc:	000b883a 	mov	r5,zero
 1001f00:	01c04074 	movhi	r7,257
 1001f04:	39e27904 	addi	r7,r7,-30236
 1001f08:	31800054 	ori	r6,r6,1
 1001f0c:	10c00926 	beq	r2,r3,1001f34 <_malloc_trim_r+0xe8>
 1001f10:	38800017 	ldw	r2,0(r7)
 1001f14:	98c00217 	ldw	r3,8(r19)
 1001f18:	9009883a 	mov	r4,r18
 1001f1c:	1445c83a 	sub	r2,r2,r17
 1001f20:	38800015 	stw	r2,0(r7)
 1001f24:	19800115 	stw	r6,4(r3)
 1001f28:	10032500 	call	1003250 <__malloc_unlock>
 1001f2c:	00800044 	movi	r2,1
 1001f30:	003fe606 	br	1001ecc <_malloc_trim_r+0x80>
 1001f34:	100177c0 	call	100177c <_sbrk_r>
 1001f38:	99800217 	ldw	r6,8(r19)
 1001f3c:	100f883a 	mov	r7,r2
 1001f40:	9009883a 	mov	r4,r18
 1001f44:	1187c83a 	sub	r3,r2,r6
 1001f48:	008003c4 	movi	r2,15
 1001f4c:	19400054 	ori	r5,r3,1
 1001f50:	10ffdc0e 	bge	r2,r3,1001ec4 <_malloc_trim_r+0x78>
 1001f54:	00804034 	movhi	r2,256
 1001f58:	109bd204 	addi	r2,r2,28488
 1001f5c:	10c00017 	ldw	r3,0(r2)
 1001f60:	00804074 	movhi	r2,257
 1001f64:	10a27904 	addi	r2,r2,-30236
 1001f68:	31400115 	stw	r5,4(r6)
 1001f6c:	38c7c83a 	sub	r3,r7,r3
 1001f70:	10c00015 	stw	r3,0(r2)
 1001f74:	003fd306 	br	1001ec4 <_malloc_trim_r+0x78>

01001f78 <_free_r>:
 1001f78:	defffd04 	addi	sp,sp,-12
 1001f7c:	dc400115 	stw	r17,4(sp)
 1001f80:	dc000015 	stw	r16,0(sp)
 1001f84:	dfc00215 	stw	ra,8(sp)
 1001f88:	2821883a 	mov	r16,r5
 1001f8c:	2023883a 	mov	r17,r4
 1001f90:	28005a26 	beq	r5,zero,10020fc <_free_r+0x184>
 1001f94:	10032300 	call	1003230 <__malloc_lock>
 1001f98:	823ffe04 	addi	r8,r16,-8
 1001f9c:	41400117 	ldw	r5,4(r8)
 1001fa0:	00bfff84 	movi	r2,-2
 1001fa4:	02804034 	movhi	r10,256
 1001fa8:	52964b04 	addi	r10,r10,22828
 1001fac:	288e703a 	and	r7,r5,r2
 1001fb0:	41cd883a 	add	r6,r8,r7
 1001fb4:	30c00117 	ldw	r3,4(r6)
 1001fb8:	51000217 	ldw	r4,8(r10)
 1001fbc:	00bfff04 	movi	r2,-4
 1001fc0:	1892703a 	and	r9,r3,r2
 1001fc4:	5017883a 	mov	r11,r10
 1001fc8:	31006726 	beq	r6,r4,1002168 <_free_r+0x1f0>
 1001fcc:	2880004c 	andi	r2,r5,1
 1001fd0:	1005003a 	cmpeq	r2,r2,zero
 1001fd4:	32400115 	stw	r9,4(r6)
 1001fd8:	10001a1e 	bne	r2,zero,1002044 <_free_r+0xcc>
 1001fdc:	000b883a 	mov	r5,zero
 1001fe0:	3247883a 	add	r3,r6,r9
 1001fe4:	18800117 	ldw	r2,4(r3)
 1001fe8:	1080004c 	andi	r2,r2,1
 1001fec:	1000231e 	bne	r2,zero,100207c <_free_r+0x104>
 1001ff0:	280ac03a 	cmpne	r5,r5,zero
 1001ff4:	3a4f883a 	add	r7,r7,r9
 1001ff8:	2800451e 	bne	r5,zero,1002110 <_free_r+0x198>
 1001ffc:	31000217 	ldw	r4,8(r6)
 1002000:	00804034 	movhi	r2,256
 1002004:	10964d04 	addi	r2,r2,22836
 1002008:	20807b26 	beq	r4,r2,10021f8 <_free_r+0x280>
 100200c:	30800317 	ldw	r2,12(r6)
 1002010:	3a07883a 	add	r3,r7,r8
 1002014:	19c00015 	stw	r7,0(r3)
 1002018:	11000215 	stw	r4,8(r2)
 100201c:	20800315 	stw	r2,12(r4)
 1002020:	38800054 	ori	r2,r7,1
 1002024:	40800115 	stw	r2,4(r8)
 1002028:	28001a26 	beq	r5,zero,1002094 <_free_r+0x11c>
 100202c:	8809883a 	mov	r4,r17
 1002030:	dfc00217 	ldw	ra,8(sp)
 1002034:	dc400117 	ldw	r17,4(sp)
 1002038:	dc000017 	ldw	r16,0(sp)
 100203c:	dec00304 	addi	sp,sp,12
 1002040:	10032501 	jmpi	1003250 <__malloc_unlock>
 1002044:	80bffe17 	ldw	r2,-8(r16)
 1002048:	50c00204 	addi	r3,r10,8
 100204c:	4091c83a 	sub	r8,r8,r2
 1002050:	41000217 	ldw	r4,8(r8)
 1002054:	388f883a 	add	r7,r7,r2
 1002058:	20c06126 	beq	r4,r3,10021e0 <_free_r+0x268>
 100205c:	40800317 	ldw	r2,12(r8)
 1002060:	3247883a 	add	r3,r6,r9
 1002064:	000b883a 	mov	r5,zero
 1002068:	11000215 	stw	r4,8(r2)
 100206c:	20800315 	stw	r2,12(r4)
 1002070:	18800117 	ldw	r2,4(r3)
 1002074:	1080004c 	andi	r2,r2,1
 1002078:	103fdd26 	beq	r2,zero,1001ff0 <_free_r+0x78>
 100207c:	38800054 	ori	r2,r7,1
 1002080:	3a07883a 	add	r3,r7,r8
 1002084:	280ac03a 	cmpne	r5,r5,zero
 1002088:	40800115 	stw	r2,4(r8)
 100208c:	19c00015 	stw	r7,0(r3)
 1002090:	283fe61e 	bne	r5,zero,100202c <_free_r+0xb4>
 1002094:	00807fc4 	movi	r2,511
 1002098:	11c01f2e 	bgeu	r2,r7,1002118 <_free_r+0x1a0>
 100209c:	3806d27a 	srli	r3,r7,9
 10020a0:	1800481e 	bne	r3,zero,10021c4 <_free_r+0x24c>
 10020a4:	3804d0fa 	srli	r2,r7,3
 10020a8:	100690fa 	slli	r3,r2,3
 10020ac:	1acd883a 	add	r6,r3,r11
 10020b0:	31400217 	ldw	r5,8(r6)
 10020b4:	31405926 	beq	r6,r5,100221c <_free_r+0x2a4>
 10020b8:	28800117 	ldw	r2,4(r5)
 10020bc:	00ffff04 	movi	r3,-4
 10020c0:	10c4703a 	and	r2,r2,r3
 10020c4:	3880022e 	bgeu	r7,r2,10020d0 <_free_r+0x158>
 10020c8:	29400217 	ldw	r5,8(r5)
 10020cc:	317ffa1e 	bne	r6,r5,10020b8 <_free_r+0x140>
 10020d0:	29800317 	ldw	r6,12(r5)
 10020d4:	41800315 	stw	r6,12(r8)
 10020d8:	41400215 	stw	r5,8(r8)
 10020dc:	8809883a 	mov	r4,r17
 10020e0:	2a000315 	stw	r8,12(r5)
 10020e4:	32000215 	stw	r8,8(r6)
 10020e8:	dfc00217 	ldw	ra,8(sp)
 10020ec:	dc400117 	ldw	r17,4(sp)
 10020f0:	dc000017 	ldw	r16,0(sp)
 10020f4:	dec00304 	addi	sp,sp,12
 10020f8:	10032501 	jmpi	1003250 <__malloc_unlock>
 10020fc:	dfc00217 	ldw	ra,8(sp)
 1002100:	dc400117 	ldw	r17,4(sp)
 1002104:	dc000017 	ldw	r16,0(sp)
 1002108:	dec00304 	addi	sp,sp,12
 100210c:	f800283a 	ret
 1002110:	31000217 	ldw	r4,8(r6)
 1002114:	003fbd06 	br	100200c <_free_r+0x94>
 1002118:	3806d0fa 	srli	r3,r7,3
 100211c:	00800044 	movi	r2,1
 1002120:	51400117 	ldw	r5,4(r10)
 1002124:	180890fa 	slli	r4,r3,3
 1002128:	1807d0ba 	srai	r3,r3,2
 100212c:	22c9883a 	add	r4,r4,r11
 1002130:	21800217 	ldw	r6,8(r4)
 1002134:	10c4983a 	sll	r2,r2,r3
 1002138:	41000315 	stw	r4,12(r8)
 100213c:	41800215 	stw	r6,8(r8)
 1002140:	288ab03a 	or	r5,r5,r2
 1002144:	22000215 	stw	r8,8(r4)
 1002148:	8809883a 	mov	r4,r17
 100214c:	51400115 	stw	r5,4(r10)
 1002150:	32000315 	stw	r8,12(r6)
 1002154:	dfc00217 	ldw	ra,8(sp)
 1002158:	dc400117 	ldw	r17,4(sp)
 100215c:	dc000017 	ldw	r16,0(sp)
 1002160:	dec00304 	addi	sp,sp,12
 1002164:	10032501 	jmpi	1003250 <__malloc_unlock>
 1002168:	2880004c 	andi	r2,r5,1
 100216c:	3a4d883a 	add	r6,r7,r9
 1002170:	1000071e 	bne	r2,zero,1002190 <_free_r+0x218>
 1002174:	80bffe17 	ldw	r2,-8(r16)
 1002178:	4091c83a 	sub	r8,r8,r2
 100217c:	41000317 	ldw	r4,12(r8)
 1002180:	40c00217 	ldw	r3,8(r8)
 1002184:	308d883a 	add	r6,r6,r2
 1002188:	20c00215 	stw	r3,8(r4)
 100218c:	19000315 	stw	r4,12(r3)
 1002190:	00804034 	movhi	r2,256
 1002194:	109bd104 	addi	r2,r2,28484
 1002198:	11000017 	ldw	r4,0(r2)
 100219c:	30c00054 	ori	r3,r6,1
 10021a0:	52000215 	stw	r8,8(r10)
 10021a4:	40c00115 	stw	r3,4(r8)
 10021a8:	313fa036 	bltu	r6,r4,100202c <_free_r+0xb4>
 10021ac:	00804074 	movhi	r2,257
 10021b0:	10a26f04 	addi	r2,r2,-30276
 10021b4:	11400017 	ldw	r5,0(r2)
 10021b8:	8809883a 	mov	r4,r17
 10021bc:	1001e4c0 	call	1001e4c <_malloc_trim_r>
 10021c0:	003f9a06 	br	100202c <_free_r+0xb4>
 10021c4:	00800104 	movi	r2,4
 10021c8:	10c0072e 	bgeu	r2,r3,10021e8 <_free_r+0x270>
 10021cc:	00800504 	movi	r2,20
 10021d0:	10c01936 	bltu	r2,r3,1002238 <_free_r+0x2c0>
 10021d4:	188016c4 	addi	r2,r3,91
 10021d8:	100690fa 	slli	r3,r2,3
 10021dc:	003fb306 	br	10020ac <_free_r+0x134>
 10021e0:	01400044 	movi	r5,1
 10021e4:	003f7e06 	br	1001fe0 <_free_r+0x68>
 10021e8:	3804d1ba 	srli	r2,r7,6
 10021ec:	10800e04 	addi	r2,r2,56
 10021f0:	100690fa 	slli	r3,r2,3
 10021f4:	003fad06 	br	10020ac <_free_r+0x134>
 10021f8:	22000315 	stw	r8,12(r4)
 10021fc:	22000215 	stw	r8,8(r4)
 1002200:	3a05883a 	add	r2,r7,r8
 1002204:	38c00054 	ori	r3,r7,1
 1002208:	11c00015 	stw	r7,0(r2)
 100220c:	41000215 	stw	r4,8(r8)
 1002210:	40c00115 	stw	r3,4(r8)
 1002214:	41000315 	stw	r4,12(r8)
 1002218:	003f8406 	br	100202c <_free_r+0xb4>
 100221c:	1005d0ba 	srai	r2,r2,2
 1002220:	00c00044 	movi	r3,1
 1002224:	51000117 	ldw	r4,4(r10)
 1002228:	1886983a 	sll	r3,r3,r2
 100222c:	20c8b03a 	or	r4,r4,r3
 1002230:	51000115 	stw	r4,4(r10)
 1002234:	003fa706 	br	10020d4 <_free_r+0x15c>
 1002238:	00801504 	movi	r2,84
 100223c:	10c00436 	bltu	r2,r3,1002250 <_free_r+0x2d8>
 1002240:	3804d33a 	srli	r2,r7,12
 1002244:	10801b84 	addi	r2,r2,110
 1002248:	100690fa 	slli	r3,r2,3
 100224c:	003f9706 	br	10020ac <_free_r+0x134>
 1002250:	00805504 	movi	r2,340
 1002254:	10c00436 	bltu	r2,r3,1002268 <_free_r+0x2f0>
 1002258:	3804d3fa 	srli	r2,r7,15
 100225c:	10801dc4 	addi	r2,r2,119
 1002260:	100690fa 	slli	r3,r2,3
 1002264:	003f9106 	br	10020ac <_free_r+0x134>
 1002268:	00815504 	movi	r2,1364
 100226c:	10c0032e 	bgeu	r2,r3,100227c <_free_r+0x304>
 1002270:	00801f84 	movi	r2,126
 1002274:	00c0fc04 	movi	r3,1008
 1002278:	003f8c06 	br	10020ac <_free_r+0x134>
 100227c:	3804d4ba 	srli	r2,r7,18
 1002280:	10801f04 	addi	r2,r2,124
 1002284:	100690fa 	slli	r3,r2,3
 1002288:	003f8806 	br	10020ac <_free_r+0x134>

0100228c <_fwalk_reent>:
 100228c:	defff704 	addi	sp,sp,-36
 1002290:	dcc00315 	stw	r19,12(sp)
 1002294:	24c0b804 	addi	r19,r4,736
 1002298:	dd800615 	stw	r22,24(sp)
 100229c:	dd400515 	stw	r21,20(sp)
 10022a0:	dfc00815 	stw	ra,32(sp)
 10022a4:	ddc00715 	stw	r23,28(sp)
 10022a8:	dd000415 	stw	r20,16(sp)
 10022ac:	dc800215 	stw	r18,8(sp)
 10022b0:	dc400115 	stw	r17,4(sp)
 10022b4:	dc000015 	stw	r16,0(sp)
 10022b8:	202b883a 	mov	r21,r4
 10022bc:	282d883a 	mov	r22,r5
 10022c0:	1001bb00 	call	1001bb0 <__sfp_lock_acquire>
 10022c4:	98002126 	beq	r19,zero,100234c <_fwalk_reent+0xc0>
 10022c8:	002f883a 	mov	r23,zero
 10022cc:	9c800117 	ldw	r18,4(r19)
 10022d0:	9c000217 	ldw	r16,8(r19)
 10022d4:	90bfffc4 	addi	r2,r18,-1
 10022d8:	10000d16 	blt	r2,zero,1002310 <_fwalk_reent+0x84>
 10022dc:	0023883a 	mov	r17,zero
 10022e0:	053fffc4 	movi	r20,-1
 10022e4:	8080030f 	ldh	r2,12(r16)
 10022e8:	8c400044 	addi	r17,r17,1
 10022ec:	10000626 	beq	r2,zero,1002308 <_fwalk_reent+0x7c>
 10022f0:	8080038f 	ldh	r2,14(r16)
 10022f4:	800b883a 	mov	r5,r16
 10022f8:	a809883a 	mov	r4,r21
 10022fc:	15000226 	beq	r2,r20,1002308 <_fwalk_reent+0x7c>
 1002300:	b03ee83a 	callr	r22
 1002304:	b8aeb03a 	or	r23,r23,r2
 1002308:	84001704 	addi	r16,r16,92
 100230c:	947ff51e 	bne	r18,r17,10022e4 <_fwalk_reent+0x58>
 1002310:	9cc00017 	ldw	r19,0(r19)
 1002314:	983fed1e 	bne	r19,zero,10022cc <_fwalk_reent+0x40>
 1002318:	1001bb40 	call	1001bb4 <__sfp_lock_release>
 100231c:	b805883a 	mov	r2,r23
 1002320:	dfc00817 	ldw	ra,32(sp)
 1002324:	ddc00717 	ldw	r23,28(sp)
 1002328:	dd800617 	ldw	r22,24(sp)
 100232c:	dd400517 	ldw	r21,20(sp)
 1002330:	dd000417 	ldw	r20,16(sp)
 1002334:	dcc00317 	ldw	r19,12(sp)
 1002338:	dc800217 	ldw	r18,8(sp)
 100233c:	dc400117 	ldw	r17,4(sp)
 1002340:	dc000017 	ldw	r16,0(sp)
 1002344:	dec00904 	addi	sp,sp,36
 1002348:	f800283a 	ret
 100234c:	002f883a 	mov	r23,zero
 1002350:	003ff106 	br	1002318 <_fwalk_reent+0x8c>

01002354 <_fwalk>:
 1002354:	defff804 	addi	sp,sp,-32
 1002358:	dcc00315 	stw	r19,12(sp)
 100235c:	24c0b804 	addi	r19,r4,736
 1002360:	dd400515 	stw	r21,20(sp)
 1002364:	dfc00715 	stw	ra,28(sp)
 1002368:	dd800615 	stw	r22,24(sp)
 100236c:	dd000415 	stw	r20,16(sp)
 1002370:	dc800215 	stw	r18,8(sp)
 1002374:	dc400115 	stw	r17,4(sp)
 1002378:	dc000015 	stw	r16,0(sp)
 100237c:	282b883a 	mov	r21,r5
 1002380:	1001bb00 	call	1001bb0 <__sfp_lock_acquire>
 1002384:	98001f26 	beq	r19,zero,1002404 <_fwalk+0xb0>
 1002388:	002d883a 	mov	r22,zero
 100238c:	9c800117 	ldw	r18,4(r19)
 1002390:	9c000217 	ldw	r16,8(r19)
 1002394:	90bfffc4 	addi	r2,r18,-1
 1002398:	10000c16 	blt	r2,zero,10023cc <_fwalk+0x78>
 100239c:	0023883a 	mov	r17,zero
 10023a0:	053fffc4 	movi	r20,-1
 10023a4:	8080030f 	ldh	r2,12(r16)
 10023a8:	8c400044 	addi	r17,r17,1
 10023ac:	10000526 	beq	r2,zero,10023c4 <_fwalk+0x70>
 10023b0:	8080038f 	ldh	r2,14(r16)
 10023b4:	8009883a 	mov	r4,r16
 10023b8:	15000226 	beq	r2,r20,10023c4 <_fwalk+0x70>
 10023bc:	a83ee83a 	callr	r21
 10023c0:	b0acb03a 	or	r22,r22,r2
 10023c4:	84001704 	addi	r16,r16,92
 10023c8:	947ff61e 	bne	r18,r17,10023a4 <_fwalk+0x50>
 10023cc:	9cc00017 	ldw	r19,0(r19)
 10023d0:	983fee1e 	bne	r19,zero,100238c <_fwalk+0x38>
 10023d4:	1001bb40 	call	1001bb4 <__sfp_lock_release>
 10023d8:	b005883a 	mov	r2,r22
 10023dc:	dfc00717 	ldw	ra,28(sp)
 10023e0:	dd800617 	ldw	r22,24(sp)
 10023e4:	dd400517 	ldw	r21,20(sp)
 10023e8:	dd000417 	ldw	r20,16(sp)
 10023ec:	dcc00317 	ldw	r19,12(sp)
 10023f0:	dc800217 	ldw	r18,8(sp)
 10023f4:	dc400117 	ldw	r17,4(sp)
 10023f8:	dc000017 	ldw	r16,0(sp)
 10023fc:	dec00804 	addi	sp,sp,32
 1002400:	f800283a 	ret
 1002404:	002d883a 	mov	r22,zero
 1002408:	003ff206 	br	10023d4 <_fwalk+0x80>

0100240c <__smakebuf_r>:
 100240c:	2880030b 	ldhu	r2,12(r5)
 1002410:	deffed04 	addi	sp,sp,-76
 1002414:	dc401015 	stw	r17,64(sp)
 1002418:	1080008c 	andi	r2,r2,2
 100241c:	dc000f15 	stw	r16,60(sp)
 1002420:	dfc01215 	stw	ra,72(sp)
 1002424:	dc801115 	stw	r18,68(sp)
 1002428:	2821883a 	mov	r16,r5
 100242c:	2023883a 	mov	r17,r4
 1002430:	10000b26 	beq	r2,zero,1002460 <__smakebuf_r+0x54>
 1002434:	28c010c4 	addi	r3,r5,67
 1002438:	00800044 	movi	r2,1
 100243c:	28800515 	stw	r2,20(r5)
 1002440:	28c00415 	stw	r3,16(r5)
 1002444:	28c00015 	stw	r3,0(r5)
 1002448:	dfc01217 	ldw	ra,72(sp)
 100244c:	dc801117 	ldw	r18,68(sp)
 1002450:	dc401017 	ldw	r17,64(sp)
 1002454:	dc000f17 	ldw	r16,60(sp)
 1002458:	dec01304 	addi	sp,sp,76
 100245c:	f800283a 	ret
 1002460:	2940038f 	ldh	r5,14(r5)
 1002464:	28002116 	blt	r5,zero,10024ec <__smakebuf_r+0xe0>
 1002468:	d80d883a 	mov	r6,sp
 100246c:	10029900 	call	1002990 <_fstat_r>
 1002470:	10001e16 	blt	r2,zero,10024ec <__smakebuf_r+0xe0>
 1002474:	d8800117 	ldw	r2,4(sp)
 1002478:	00e00014 	movui	r3,32768
 100247c:	113c000c 	andi	r4,r2,61440
 1002480:	20c03126 	beq	r4,r3,1002548 <__smakebuf_r+0x13c>
 1002484:	8080030b 	ldhu	r2,12(r16)
 1002488:	00c80004 	movi	r3,8192
 100248c:	10820014 	ori	r2,r2,2048
 1002490:	8080030d 	sth	r2,12(r16)
 1002494:	20c01e26 	beq	r4,r3,1002510 <__smakebuf_r+0x104>
 1002498:	04810004 	movi	r18,1024
 100249c:	8809883a 	mov	r4,r17
 10024a0:	900b883a 	mov	r5,r18
 10024a4:	10007e40 	call	10007e4 <_malloc_r>
 10024a8:	1009883a 	mov	r4,r2
 10024ac:	10003126 	beq	r2,zero,1002574 <__smakebuf_r+0x168>
 10024b0:	80c0030b 	ldhu	r3,12(r16)
 10024b4:	00804034 	movhi	r2,256
 10024b8:	10872904 	addi	r2,r2,7332
 10024bc:	88800f15 	stw	r2,60(r17)
 10024c0:	18c02014 	ori	r3,r3,128
 10024c4:	84800515 	stw	r18,20(r16)
 10024c8:	80c0030d 	sth	r3,12(r16)
 10024cc:	81000415 	stw	r4,16(r16)
 10024d0:	81000015 	stw	r4,0(r16)
 10024d4:	dfc01217 	ldw	ra,72(sp)
 10024d8:	dc801117 	ldw	r18,68(sp)
 10024dc:	dc401017 	ldw	r17,64(sp)
 10024e0:	dc000f17 	ldw	r16,60(sp)
 10024e4:	dec01304 	addi	sp,sp,76
 10024e8:	f800283a 	ret
 10024ec:	80c0030b 	ldhu	r3,12(r16)
 10024f0:	1880200c 	andi	r2,r3,128
 10024f4:	10000426 	beq	r2,zero,1002508 <__smakebuf_r+0xfc>
 10024f8:	04801004 	movi	r18,64
 10024fc:	18820014 	ori	r2,r3,2048
 1002500:	8080030d 	sth	r2,12(r16)
 1002504:	003fe506 	br	100249c <__smakebuf_r+0x90>
 1002508:	04810004 	movi	r18,1024
 100250c:	003ffb06 	br	10024fc <__smakebuf_r+0xf0>
 1002510:	8140038f 	ldh	r5,14(r16)
 1002514:	8809883a 	mov	r4,r17
 1002518:	1002a040 	call	1002a04 <_isatty_r>
 100251c:	103fde26 	beq	r2,zero,1002498 <__smakebuf_r+0x8c>
 1002520:	8080030b 	ldhu	r2,12(r16)
 1002524:	80c010c4 	addi	r3,r16,67
 1002528:	04810004 	movi	r18,1024
 100252c:	10800054 	ori	r2,r2,1
 1002530:	8080030d 	sth	r2,12(r16)
 1002534:	00800044 	movi	r2,1
 1002538:	80c00415 	stw	r3,16(r16)
 100253c:	80800515 	stw	r2,20(r16)
 1002540:	80c00015 	stw	r3,0(r16)
 1002544:	003fd506 	br	100249c <__smakebuf_r+0x90>
 1002548:	80c00a17 	ldw	r3,40(r16)
 100254c:	00804034 	movhi	r2,256
 1002550:	10899004 	addi	r2,r2,9792
 1002554:	18bfcb1e 	bne	r3,r2,1002484 <__smakebuf_r+0x78>
 1002558:	8080030b 	ldhu	r2,12(r16)
 100255c:	00c10004 	movi	r3,1024
 1002560:	1825883a 	mov	r18,r3
 1002564:	10c4b03a 	or	r2,r2,r3
 1002568:	8080030d 	sth	r2,12(r16)
 100256c:	80c01315 	stw	r3,76(r16)
 1002570:	003fca06 	br	100249c <__smakebuf_r+0x90>
 1002574:	8100030b 	ldhu	r4,12(r16)
 1002578:	2080800c 	andi	r2,r4,512
 100257c:	103fb21e 	bne	r2,zero,1002448 <__smakebuf_r+0x3c>
 1002580:	80c010c4 	addi	r3,r16,67
 1002584:	21000094 	ori	r4,r4,2
 1002588:	00800044 	movi	r2,1
 100258c:	80800515 	stw	r2,20(r16)
 1002590:	8100030d 	sth	r4,12(r16)
 1002594:	80c00415 	stw	r3,16(r16)
 1002598:	80c00015 	stw	r3,0(r16)
 100259c:	003faa06 	br	1002448 <__smakebuf_r+0x3c>

010025a0 <memset>:
 10025a0:	008000c4 	movi	r2,3
 10025a4:	29403fcc 	andi	r5,r5,255
 10025a8:	2007883a 	mov	r3,r4
 10025ac:	1180022e 	bgeu	r2,r6,10025b8 <memset+0x18>
 10025b0:	2084703a 	and	r2,r4,r2
 10025b4:	10000826 	beq	r2,zero,10025d8 <memset+0x38>
 10025b8:	30000526 	beq	r6,zero,10025d0 <memset+0x30>
 10025bc:	2805883a 	mov	r2,r5
 10025c0:	30cd883a 	add	r6,r6,r3
 10025c4:	18800005 	stb	r2,0(r3)
 10025c8:	18c00044 	addi	r3,r3,1
 10025cc:	19bffd1e 	bne	r3,r6,10025c4 <memset+0x24>
 10025d0:	2005883a 	mov	r2,r4
 10025d4:	f800283a 	ret
 10025d8:	2804923a 	slli	r2,r5,8
 10025dc:	020003c4 	movi	r8,15
 10025e0:	200f883a 	mov	r7,r4
 10025e4:	2884b03a 	or	r2,r5,r2
 10025e8:	1006943a 	slli	r3,r2,16
 10025ec:	10c6b03a 	or	r3,r2,r3
 10025f0:	41800a2e 	bgeu	r8,r6,100261c <memset+0x7c>
 10025f4:	4005883a 	mov	r2,r8
 10025f8:	31bffc04 	addi	r6,r6,-16
 10025fc:	38c00015 	stw	r3,0(r7)
 1002600:	38c00115 	stw	r3,4(r7)
 1002604:	38c00215 	stw	r3,8(r7)
 1002608:	38c00315 	stw	r3,12(r7)
 100260c:	39c00404 	addi	r7,r7,16
 1002610:	11bff936 	bltu	r2,r6,10025f8 <memset+0x58>
 1002614:	008000c4 	movi	r2,3
 1002618:	1180052e 	bgeu	r2,r6,1002630 <memset+0x90>
 100261c:	31bfff04 	addi	r6,r6,-4
 1002620:	008000c4 	movi	r2,3
 1002624:	38c00015 	stw	r3,0(r7)
 1002628:	39c00104 	addi	r7,r7,4
 100262c:	11bffb36 	bltu	r2,r6,100261c <memset+0x7c>
 1002630:	3807883a 	mov	r3,r7
 1002634:	003fe006 	br	10025b8 <memset+0x18>

01002638 <__sclose>:
 1002638:	2940038f 	ldh	r5,14(r5)
 100263c:	10027fc1 	jmpi	10027fc <_close_r>

01002640 <__sseek>:
 1002640:	defffe04 	addi	sp,sp,-8
 1002644:	dc000015 	stw	r16,0(sp)
 1002648:	2821883a 	mov	r16,r5
 100264c:	2940038f 	ldh	r5,14(r5)
 1002650:	dfc00115 	stw	ra,4(sp)
 1002654:	1002a740 	call	1002a74 <_lseek_r>
 1002658:	1007883a 	mov	r3,r2
 100265c:	00bfffc4 	movi	r2,-1
 1002660:	18800926 	beq	r3,r2,1002688 <__sseek+0x48>
 1002664:	8080030b 	ldhu	r2,12(r16)
 1002668:	80c01415 	stw	r3,80(r16)
 100266c:	10840014 	ori	r2,r2,4096
 1002670:	8080030d 	sth	r2,12(r16)
 1002674:	1805883a 	mov	r2,r3
 1002678:	dfc00117 	ldw	ra,4(sp)
 100267c:	dc000017 	ldw	r16,0(sp)
 1002680:	dec00204 	addi	sp,sp,8
 1002684:	f800283a 	ret
 1002688:	8080030b 	ldhu	r2,12(r16)
 100268c:	10bbffcc 	andi	r2,r2,61439
 1002690:	8080030d 	sth	r2,12(r16)
 1002694:	1805883a 	mov	r2,r3
 1002698:	dfc00117 	ldw	ra,4(sp)
 100269c:	dc000017 	ldw	r16,0(sp)
 10026a0:	dec00204 	addi	sp,sp,8
 10026a4:	f800283a 	ret

010026a8 <__swrite>:
 10026a8:	2880030b 	ldhu	r2,12(r5)
 10026ac:	defffb04 	addi	sp,sp,-20
 10026b0:	dcc00315 	stw	r19,12(sp)
 10026b4:	1080400c 	andi	r2,r2,256
 10026b8:	dc800215 	stw	r18,8(sp)
 10026bc:	dc400115 	stw	r17,4(sp)
 10026c0:	dc000015 	stw	r16,0(sp)
 10026c4:	3027883a 	mov	r19,r6
 10026c8:	3825883a 	mov	r18,r7
 10026cc:	dfc00415 	stw	ra,16(sp)
 10026d0:	2821883a 	mov	r16,r5
 10026d4:	000d883a 	mov	r6,zero
 10026d8:	01c00084 	movi	r7,2
 10026dc:	2023883a 	mov	r17,r4
 10026e0:	10000226 	beq	r2,zero,10026ec <__swrite+0x44>
 10026e4:	2940038f 	ldh	r5,14(r5)
 10026e8:	1002a740 	call	1002a74 <_lseek_r>
 10026ec:	8080030b 	ldhu	r2,12(r16)
 10026f0:	8140038f 	ldh	r5,14(r16)
 10026f4:	8809883a 	mov	r4,r17
 10026f8:	10bbffcc 	andi	r2,r2,61439
 10026fc:	980d883a 	mov	r6,r19
 1002700:	900f883a 	mov	r7,r18
 1002704:	8080030d 	sth	r2,12(r16)
 1002708:	dfc00417 	ldw	ra,16(sp)
 100270c:	dcc00317 	ldw	r19,12(sp)
 1002710:	dc800217 	ldw	r18,8(sp)
 1002714:	dc400117 	ldw	r17,4(sp)
 1002718:	dc000017 	ldw	r16,0(sp)
 100271c:	dec00504 	addi	sp,sp,20
 1002720:	10027841 	jmpi	1002784 <_write_r>

01002724 <__sread>:
 1002724:	defffe04 	addi	sp,sp,-8
 1002728:	dc000015 	stw	r16,0(sp)
 100272c:	2821883a 	mov	r16,r5
 1002730:	2940038f 	ldh	r5,14(r5)
 1002734:	dfc00115 	stw	ra,4(sp)
 1002738:	1002aec0 	call	1002aec <_read_r>
 100273c:	1007883a 	mov	r3,r2
 1002740:	10000816 	blt	r2,zero,1002764 <__sread+0x40>
 1002744:	80801417 	ldw	r2,80(r16)
 1002748:	10c5883a 	add	r2,r2,r3
 100274c:	80801415 	stw	r2,80(r16)
 1002750:	1805883a 	mov	r2,r3
 1002754:	dfc00117 	ldw	ra,4(sp)
 1002758:	dc000017 	ldw	r16,0(sp)
 100275c:	dec00204 	addi	sp,sp,8
 1002760:	f800283a 	ret
 1002764:	8080030b 	ldhu	r2,12(r16)
 1002768:	10bbffcc 	andi	r2,r2,61439
 100276c:	8080030d 	sth	r2,12(r16)
 1002770:	1805883a 	mov	r2,r3
 1002774:	dfc00117 	ldw	ra,4(sp)
 1002778:	dc000017 	ldw	r16,0(sp)
 100277c:	dec00204 	addi	sp,sp,8
 1002780:	f800283a 	ret

01002784 <_write_r>:
 1002784:	defffd04 	addi	sp,sp,-12
 1002788:	dc000015 	stw	r16,0(sp)
 100278c:	04004074 	movhi	r16,257
 1002790:	84227204 	addi	r16,r16,-30264
 1002794:	dc400115 	stw	r17,4(sp)
 1002798:	80000015 	stw	zero,0(r16)
 100279c:	2023883a 	mov	r17,r4
 10027a0:	2809883a 	mov	r4,r5
 10027a4:	300b883a 	mov	r5,r6
 10027a8:	380d883a 	mov	r6,r7
 10027ac:	dfc00215 	stw	ra,8(sp)
 10027b0:	10035280 	call	1003528 <write>
 10027b4:	1007883a 	mov	r3,r2
 10027b8:	00bfffc4 	movi	r2,-1
 10027bc:	18800626 	beq	r3,r2,10027d8 <_write_r+0x54>
 10027c0:	1805883a 	mov	r2,r3
 10027c4:	dfc00217 	ldw	ra,8(sp)
 10027c8:	dc400117 	ldw	r17,4(sp)
 10027cc:	dc000017 	ldw	r16,0(sp)
 10027d0:	dec00304 	addi	sp,sp,12
 10027d4:	f800283a 	ret
 10027d8:	80800017 	ldw	r2,0(r16)
 10027dc:	103ff826 	beq	r2,zero,10027c0 <_write_r+0x3c>
 10027e0:	88800015 	stw	r2,0(r17)
 10027e4:	1805883a 	mov	r2,r3
 10027e8:	dfc00217 	ldw	ra,8(sp)
 10027ec:	dc400117 	ldw	r17,4(sp)
 10027f0:	dc000017 	ldw	r16,0(sp)
 10027f4:	dec00304 	addi	sp,sp,12
 10027f8:	f800283a 	ret

010027fc <_close_r>:
 10027fc:	defffd04 	addi	sp,sp,-12
 1002800:	dc000015 	stw	r16,0(sp)
 1002804:	04004074 	movhi	r16,257
 1002808:	84227204 	addi	r16,r16,-30264
 100280c:	dc400115 	stw	r17,4(sp)
 1002810:	80000015 	stw	zero,0(r16)
 1002814:	2023883a 	mov	r17,r4
 1002818:	2809883a 	mov	r4,r5
 100281c:	dfc00215 	stw	ra,8(sp)
 1002820:	1002b9c0 	call	1002b9c <close>
 1002824:	1007883a 	mov	r3,r2
 1002828:	00bfffc4 	movi	r2,-1
 100282c:	18800626 	beq	r3,r2,1002848 <_close_r+0x4c>
 1002830:	1805883a 	mov	r2,r3
 1002834:	dfc00217 	ldw	ra,8(sp)
 1002838:	dc400117 	ldw	r17,4(sp)
 100283c:	dc000017 	ldw	r16,0(sp)
 1002840:	dec00304 	addi	sp,sp,12
 1002844:	f800283a 	ret
 1002848:	80800017 	ldw	r2,0(r16)
 100284c:	103ff826 	beq	r2,zero,1002830 <_close_r+0x34>
 1002850:	88800015 	stw	r2,0(r17)
 1002854:	1805883a 	mov	r2,r3
 1002858:	dfc00217 	ldw	ra,8(sp)
 100285c:	dc400117 	ldw	r17,4(sp)
 1002860:	dc000017 	ldw	r16,0(sp)
 1002864:	dec00304 	addi	sp,sp,12
 1002868:	f800283a 	ret

0100286c <_fclose_r>:
 100286c:	defffc04 	addi	sp,sp,-16
 1002870:	dc400115 	stw	r17,4(sp)
 1002874:	dc000015 	stw	r16,0(sp)
 1002878:	dfc00315 	stw	ra,12(sp)
 100287c:	dc800215 	stw	r18,8(sp)
 1002880:	2821883a 	mov	r16,r5
 1002884:	2023883a 	mov	r17,r4
 1002888:	28002926 	beq	r5,zero,1002930 <_fclose_r+0xc4>
 100288c:	1001bb00 	call	1001bb0 <__sfp_lock_acquire>
 1002890:	88000226 	beq	r17,zero,100289c <_fclose_r+0x30>
 1002894:	88800e17 	ldw	r2,56(r17)
 1002898:	10002d26 	beq	r2,zero,1002950 <_fclose_r+0xe4>
 100289c:	8080030f 	ldh	r2,12(r16)
 10028a0:	10002226 	beq	r2,zero,100292c <_fclose_r+0xc0>
 10028a4:	8809883a 	mov	r4,r17
 10028a8:	800b883a 	mov	r5,r16
 10028ac:	10019280 	call	1001928 <_fflush_r>
 10028b0:	1025883a 	mov	r18,r2
 10028b4:	80800b17 	ldw	r2,44(r16)
 10028b8:	10000426 	beq	r2,zero,10028cc <_fclose_r+0x60>
 10028bc:	81400717 	ldw	r5,28(r16)
 10028c0:	8809883a 	mov	r4,r17
 10028c4:	103ee83a 	callr	r2
 10028c8:	10002a16 	blt	r2,zero,1002974 <_fclose_r+0x108>
 10028cc:	8080030b 	ldhu	r2,12(r16)
 10028d0:	1080200c 	andi	r2,r2,128
 10028d4:	1000231e 	bne	r2,zero,1002964 <_fclose_r+0xf8>
 10028d8:	81400c17 	ldw	r5,48(r16)
 10028dc:	28000526 	beq	r5,zero,10028f4 <_fclose_r+0x88>
 10028e0:	80801004 	addi	r2,r16,64
 10028e4:	28800226 	beq	r5,r2,10028f0 <_fclose_r+0x84>
 10028e8:	8809883a 	mov	r4,r17
 10028ec:	1001f780 	call	1001f78 <_free_r>
 10028f0:	80000c15 	stw	zero,48(r16)
 10028f4:	81401117 	ldw	r5,68(r16)
 10028f8:	28000326 	beq	r5,zero,1002908 <_fclose_r+0x9c>
 10028fc:	8809883a 	mov	r4,r17
 1002900:	1001f780 	call	1001f78 <_free_r>
 1002904:	80001115 	stw	zero,68(r16)
 1002908:	8000030d 	sth	zero,12(r16)
 100290c:	1001bb40 	call	1001bb4 <__sfp_lock_release>
 1002910:	9005883a 	mov	r2,r18
 1002914:	dfc00317 	ldw	ra,12(sp)
 1002918:	dc800217 	ldw	r18,8(sp)
 100291c:	dc400117 	ldw	r17,4(sp)
 1002920:	dc000017 	ldw	r16,0(sp)
 1002924:	dec00404 	addi	sp,sp,16
 1002928:	f800283a 	ret
 100292c:	1001bb40 	call	1001bb4 <__sfp_lock_release>
 1002930:	0025883a 	mov	r18,zero
 1002934:	9005883a 	mov	r2,r18
 1002938:	dfc00317 	ldw	ra,12(sp)
 100293c:	dc800217 	ldw	r18,8(sp)
 1002940:	dc400117 	ldw	r17,4(sp)
 1002944:	dc000017 	ldw	r16,0(sp)
 1002948:	dec00404 	addi	sp,sp,16
 100294c:	f800283a 	ret
 1002950:	8809883a 	mov	r4,r17
 1002954:	1001bc00 	call	1001bc0 <__sinit>
 1002958:	8080030f 	ldh	r2,12(r16)
 100295c:	103fd11e 	bne	r2,zero,10028a4 <_fclose_r+0x38>
 1002960:	003ff206 	br	100292c <_fclose_r+0xc0>
 1002964:	81400417 	ldw	r5,16(r16)
 1002968:	8809883a 	mov	r4,r17
 100296c:	1001f780 	call	1001f78 <_free_r>
 1002970:	003fd906 	br	10028d8 <_fclose_r+0x6c>
 1002974:	04bfffc4 	movi	r18,-1
 1002978:	003fd406 	br	10028cc <_fclose_r+0x60>

0100297c <fclose>:
 100297c:	00804034 	movhi	r2,256
 1002980:	109bcf04 	addi	r2,r2,28476
 1002984:	200b883a 	mov	r5,r4
 1002988:	11000017 	ldw	r4,0(r2)
 100298c:	100286c1 	jmpi	100286c <_fclose_r>

01002990 <_fstat_r>:
 1002990:	defffd04 	addi	sp,sp,-12
 1002994:	dc000015 	stw	r16,0(sp)
 1002998:	04004074 	movhi	r16,257
 100299c:	84227204 	addi	r16,r16,-30264
 10029a0:	dc400115 	stw	r17,4(sp)
 10029a4:	80000015 	stw	zero,0(r16)
 10029a8:	2023883a 	mov	r17,r4
 10029ac:	2809883a 	mov	r4,r5
 10029b0:	300b883a 	mov	r5,r6
 10029b4:	dfc00215 	stw	ra,8(sp)
 10029b8:	1002d280 	call	1002d28 <fstat>
 10029bc:	1007883a 	mov	r3,r2
 10029c0:	00bfffc4 	movi	r2,-1
 10029c4:	18800626 	beq	r3,r2,10029e0 <_fstat_r+0x50>
 10029c8:	1805883a 	mov	r2,r3
 10029cc:	dfc00217 	ldw	ra,8(sp)
 10029d0:	dc400117 	ldw	r17,4(sp)
 10029d4:	dc000017 	ldw	r16,0(sp)
 10029d8:	dec00304 	addi	sp,sp,12
 10029dc:	f800283a 	ret
 10029e0:	80800017 	ldw	r2,0(r16)
 10029e4:	103ff826 	beq	r2,zero,10029c8 <_fstat_r+0x38>
 10029e8:	88800015 	stw	r2,0(r17)
 10029ec:	1805883a 	mov	r2,r3
 10029f0:	dfc00217 	ldw	ra,8(sp)
 10029f4:	dc400117 	ldw	r17,4(sp)
 10029f8:	dc000017 	ldw	r16,0(sp)
 10029fc:	dec00304 	addi	sp,sp,12
 1002a00:	f800283a 	ret

01002a04 <_isatty_r>:
 1002a04:	defffd04 	addi	sp,sp,-12
 1002a08:	dc000015 	stw	r16,0(sp)
 1002a0c:	04004074 	movhi	r16,257
 1002a10:	84227204 	addi	r16,r16,-30264
 1002a14:	dc400115 	stw	r17,4(sp)
 1002a18:	80000015 	stw	zero,0(r16)
 1002a1c:	2023883a 	mov	r17,r4
 1002a20:	2809883a 	mov	r4,r5
 1002a24:	dfc00215 	stw	ra,8(sp)
 1002a28:	1002e600 	call	1002e60 <isatty>
 1002a2c:	1007883a 	mov	r3,r2
 1002a30:	00bfffc4 	movi	r2,-1
 1002a34:	18800626 	beq	r3,r2,1002a50 <_isatty_r+0x4c>
 1002a38:	1805883a 	mov	r2,r3
 1002a3c:	dfc00217 	ldw	ra,8(sp)
 1002a40:	dc400117 	ldw	r17,4(sp)
 1002a44:	dc000017 	ldw	r16,0(sp)
 1002a48:	dec00304 	addi	sp,sp,12
 1002a4c:	f800283a 	ret
 1002a50:	80800017 	ldw	r2,0(r16)
 1002a54:	103ff826 	beq	r2,zero,1002a38 <_isatty_r+0x34>
 1002a58:	88800015 	stw	r2,0(r17)
 1002a5c:	1805883a 	mov	r2,r3
 1002a60:	dfc00217 	ldw	ra,8(sp)
 1002a64:	dc400117 	ldw	r17,4(sp)
 1002a68:	dc000017 	ldw	r16,0(sp)
 1002a6c:	dec00304 	addi	sp,sp,12
 1002a70:	f800283a 	ret

01002a74 <_lseek_r>:
 1002a74:	defffd04 	addi	sp,sp,-12
 1002a78:	dc000015 	stw	r16,0(sp)
 1002a7c:	04004074 	movhi	r16,257
 1002a80:	84227204 	addi	r16,r16,-30264
 1002a84:	dc400115 	stw	r17,4(sp)
 1002a88:	80000015 	stw	zero,0(r16)
 1002a8c:	2023883a 	mov	r17,r4
 1002a90:	2809883a 	mov	r4,r5
 1002a94:	300b883a 	mov	r5,r6
 1002a98:	380d883a 	mov	r6,r7
 1002a9c:	dfc00215 	stw	ra,8(sp)
 1002aa0:	10030700 	call	1003070 <lseek>
 1002aa4:	1007883a 	mov	r3,r2
 1002aa8:	00bfffc4 	movi	r2,-1
 1002aac:	18800626 	beq	r3,r2,1002ac8 <_lseek_r+0x54>
 1002ab0:	1805883a 	mov	r2,r3
 1002ab4:	dfc00217 	ldw	ra,8(sp)
 1002ab8:	dc400117 	ldw	r17,4(sp)
 1002abc:	dc000017 	ldw	r16,0(sp)
 1002ac0:	dec00304 	addi	sp,sp,12
 1002ac4:	f800283a 	ret
 1002ac8:	80800017 	ldw	r2,0(r16)
 1002acc:	103ff826 	beq	r2,zero,1002ab0 <_lseek_r+0x3c>
 1002ad0:	88800015 	stw	r2,0(r17)
 1002ad4:	1805883a 	mov	r2,r3
 1002ad8:	dfc00217 	ldw	ra,8(sp)
 1002adc:	dc400117 	ldw	r17,4(sp)
 1002ae0:	dc000017 	ldw	r16,0(sp)
 1002ae4:	dec00304 	addi	sp,sp,12
 1002ae8:	f800283a 	ret

01002aec <_read_r>:
 1002aec:	defffd04 	addi	sp,sp,-12
 1002af0:	dc000015 	stw	r16,0(sp)
 1002af4:	04004074 	movhi	r16,257
 1002af8:	84227204 	addi	r16,r16,-30264
 1002afc:	dc400115 	stw	r17,4(sp)
 1002b00:	80000015 	stw	zero,0(r16)
 1002b04:	2023883a 	mov	r17,r4
 1002b08:	2809883a 	mov	r4,r5
 1002b0c:	300b883a 	mov	r5,r6
 1002b10:	380d883a 	mov	r6,r7
 1002b14:	dfc00215 	stw	ra,8(sp)
 1002b18:	10032700 	call	1003270 <read>
 1002b1c:	1007883a 	mov	r3,r2
 1002b20:	00bfffc4 	movi	r2,-1
 1002b24:	18800626 	beq	r3,r2,1002b40 <_read_r+0x54>
 1002b28:	1805883a 	mov	r2,r3
 1002b2c:	dfc00217 	ldw	ra,8(sp)
 1002b30:	dc400117 	ldw	r17,4(sp)
 1002b34:	dc000017 	ldw	r16,0(sp)
 1002b38:	dec00304 	addi	sp,sp,12
 1002b3c:	f800283a 	ret
 1002b40:	80800017 	ldw	r2,0(r16)
 1002b44:	103ff826 	beq	r2,zero,1002b28 <_read_r+0x3c>
 1002b48:	88800015 	stw	r2,0(r17)
 1002b4c:	1805883a 	mov	r2,r3
 1002b50:	dfc00217 	ldw	ra,8(sp)
 1002b54:	dc400117 	ldw	r17,4(sp)
 1002b58:	dc000017 	ldw	r16,0(sp)
 1002b5c:	dec00304 	addi	sp,sp,12
 1002b60:	f800283a 	ret

01002b64 <__mulsi3>:
 1002b64:	20000a26 	beq	r4,zero,1002b90 <__mulsi3+0x2c>
 1002b68:	0007883a 	mov	r3,zero
 1002b6c:	2080004c 	andi	r2,r4,1
 1002b70:	1005003a 	cmpeq	r2,r2,zero
 1002b74:	2008d07a 	srli	r4,r4,1
 1002b78:	1000011e 	bne	r2,zero,1002b80 <__mulsi3+0x1c>
 1002b7c:	1947883a 	add	r3,r3,r5
 1002b80:	294b883a 	add	r5,r5,r5
 1002b84:	203ff91e 	bne	r4,zero,1002b6c <__mulsi3+0x8>
 1002b88:	1805883a 	mov	r2,r3
 1002b8c:	f800283a 	ret
 1002b90:	0007883a 	mov	r3,zero
 1002b94:	1805883a 	mov	r2,r3
 1002b98:	f800283a 	ret

01002b9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1002b9c:	defff804 	addi	sp,sp,-32
 1002ba0:	dfc00715 	stw	ra,28(sp)
 1002ba4:	df000615 	stw	fp,24(sp)
 1002ba8:	df000604 	addi	fp,sp,24
 1002bac:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1002bb0:	e0bffc17 	ldw	r2,-16(fp)
 1002bb4:	1004803a 	cmplt	r2,r2,zero
 1002bb8:	1000091e 	bne	r2,zero,1002be0 <close+0x44>
 1002bbc:	e13ffc17 	ldw	r4,-16(fp)
 1002bc0:	01400304 	movi	r5,12
 1002bc4:	1002b640 	call	1002b64 <__mulsi3>
 1002bc8:	1007883a 	mov	r3,r2
 1002bcc:	00804034 	movhi	r2,256
 1002bd0:	10975704 	addi	r2,r2,23900
 1002bd4:	1887883a 	add	r3,r3,r2
 1002bd8:	e0ffff15 	stw	r3,-4(fp)
 1002bdc:	00000106 	br	1002be4 <close+0x48>
 1002be0:	e03fff15 	stw	zero,-4(fp)
 1002be4:	e0bfff17 	ldw	r2,-4(fp)
 1002be8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1002bec:	e0bffb17 	ldw	r2,-20(fp)
 1002bf0:	1005003a 	cmpeq	r2,r2,zero
 1002bf4:	10001d1e 	bne	r2,zero,1002c6c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002bf8:	e0bffb17 	ldw	r2,-20(fp)
 1002bfc:	10800017 	ldw	r2,0(r2)
 1002c00:	10800417 	ldw	r2,16(r2)
 1002c04:	1005003a 	cmpeq	r2,r2,zero
 1002c08:	1000071e 	bne	r2,zero,1002c28 <close+0x8c>
 1002c0c:	e0bffb17 	ldw	r2,-20(fp)
 1002c10:	10800017 	ldw	r2,0(r2)
 1002c14:	10800417 	ldw	r2,16(r2)
 1002c18:	e13ffb17 	ldw	r4,-20(fp)
 1002c1c:	103ee83a 	callr	r2
 1002c20:	e0bffe15 	stw	r2,-8(fp)
 1002c24:	00000106 	br	1002c2c <close+0x90>
 1002c28:	e03ffe15 	stw	zero,-8(fp)
 1002c2c:	e0bffe17 	ldw	r2,-8(fp)
 1002c30:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1002c34:	e13ffc17 	ldw	r4,-16(fp)
 1002c38:	10033f40 	call	10033f4 <alt_release_fd>
    if (rval < 0)
 1002c3c:	e0bffa17 	ldw	r2,-24(fp)
 1002c40:	1004403a 	cmpge	r2,r2,zero
 1002c44:	1000071e 	bne	r2,zero,1002c64 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1002c48:	1002c9c0 	call	1002c9c <alt_get_errno>
 1002c4c:	e0fffa17 	ldw	r3,-24(fp)
 1002c50:	00c7c83a 	sub	r3,zero,r3
 1002c54:	10c00015 	stw	r3,0(r2)
      return -1;
 1002c58:	00bfffc4 	movi	r2,-1
 1002c5c:	e0bffd15 	stw	r2,-12(fp)
 1002c60:	00000806 	br	1002c84 <close+0xe8>
    }
    return 0;
 1002c64:	e03ffd15 	stw	zero,-12(fp)
 1002c68:	00000606 	br	1002c84 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002c6c:	1002c9c0 	call	1002c9c <alt_get_errno>
 1002c70:	1007883a 	mov	r3,r2
 1002c74:	00801444 	movi	r2,81
 1002c78:	18800015 	stw	r2,0(r3)
    return -1;
 1002c7c:	00bfffc4 	movi	r2,-1
 1002c80:	e0bffd15 	stw	r2,-12(fp)
 1002c84:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1002c88:	e037883a 	mov	sp,fp
 1002c8c:	dfc00117 	ldw	ra,4(sp)
 1002c90:	df000017 	ldw	fp,0(sp)
 1002c94:	dec00204 	addi	sp,sp,8
 1002c98:	f800283a 	ret

01002c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002c9c:	defffd04 	addi	sp,sp,-12
 1002ca0:	dfc00215 	stw	ra,8(sp)
 1002ca4:	df000115 	stw	fp,4(sp)
 1002ca8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002cac:	00804034 	movhi	r2,256
 1002cb0:	109bd804 	addi	r2,r2,28512
 1002cb4:	10800017 	ldw	r2,0(r2)
 1002cb8:	1005003a 	cmpeq	r2,r2,zero
 1002cbc:	1000061e 	bne	r2,zero,1002cd8 <alt_get_errno+0x3c>
 1002cc0:	00804034 	movhi	r2,256
 1002cc4:	109bd804 	addi	r2,r2,28512
 1002cc8:	10800017 	ldw	r2,0(r2)
 1002ccc:	103ee83a 	callr	r2
 1002cd0:	e0bfff15 	stw	r2,-4(fp)
 1002cd4:	00000306 	br	1002ce4 <alt_get_errno+0x48>
 1002cd8:	00804074 	movhi	r2,257
 1002cdc:	10a27204 	addi	r2,r2,-30264
 1002ce0:	e0bfff15 	stw	r2,-4(fp)
 1002ce4:	e0bfff17 	ldw	r2,-4(fp)
}
 1002ce8:	e037883a 	mov	sp,fp
 1002cec:	dfc00117 	ldw	ra,4(sp)
 1002cf0:	df000017 	ldw	fp,0(sp)
 1002cf4:	dec00204 	addi	sp,sp,8
 1002cf8:	f800283a 	ret

01002cfc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002cfc:	defffc04 	addi	sp,sp,-16
 1002d00:	df000315 	stw	fp,12(sp)
 1002d04:	df000304 	addi	fp,sp,12
 1002d08:	e13ffd15 	stw	r4,-12(fp)
 1002d0c:	e17ffe15 	stw	r5,-8(fp)
 1002d10:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002d14:	e0bfff17 	ldw	r2,-4(fp)
}
 1002d18:	e037883a 	mov	sp,fp
 1002d1c:	df000017 	ldw	fp,0(sp)
 1002d20:	dec00104 	addi	sp,sp,4
 1002d24:	f800283a 	ret

01002d28 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1002d28:	defff904 	addi	sp,sp,-28
 1002d2c:	dfc00615 	stw	ra,24(sp)
 1002d30:	df000515 	stw	fp,20(sp)
 1002d34:	df000504 	addi	fp,sp,20
 1002d38:	e13ffc15 	stw	r4,-16(fp)
 1002d3c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002d40:	e0bffc17 	ldw	r2,-16(fp)
 1002d44:	1004803a 	cmplt	r2,r2,zero
 1002d48:	1000091e 	bne	r2,zero,1002d70 <fstat+0x48>
 1002d4c:	e13ffc17 	ldw	r4,-16(fp)
 1002d50:	01400304 	movi	r5,12
 1002d54:	1002b640 	call	1002b64 <__mulsi3>
 1002d58:	1007883a 	mov	r3,r2
 1002d5c:	00804034 	movhi	r2,256
 1002d60:	10975704 	addi	r2,r2,23900
 1002d64:	1887883a 	add	r3,r3,r2
 1002d68:	e0ffff15 	stw	r3,-4(fp)
 1002d6c:	00000106 	br	1002d74 <fstat+0x4c>
 1002d70:	e03fff15 	stw	zero,-4(fp)
 1002d74:	e0bfff17 	ldw	r2,-4(fp)
 1002d78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1002d7c:	e0bffb17 	ldw	r2,-20(fp)
 1002d80:	1005003a 	cmpeq	r2,r2,zero
 1002d84:	1000121e 	bne	r2,zero,1002dd0 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1002d88:	e0bffb17 	ldw	r2,-20(fp)
 1002d8c:	10800017 	ldw	r2,0(r2)
 1002d90:	10800817 	ldw	r2,32(r2)
 1002d94:	1005003a 	cmpeq	r2,r2,zero
 1002d98:	1000081e 	bne	r2,zero,1002dbc <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 1002d9c:	e0bffb17 	ldw	r2,-20(fp)
 1002da0:	10800017 	ldw	r2,0(r2)
 1002da4:	10800817 	ldw	r2,32(r2)
 1002da8:	e13ffb17 	ldw	r4,-20(fp)
 1002dac:	e17ffd17 	ldw	r5,-12(fp)
 1002db0:	103ee83a 	callr	r2
 1002db4:	e0bffe15 	stw	r2,-8(fp)
 1002db8:	00000b06 	br	1002de8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1002dbc:	e0fffd17 	ldw	r3,-12(fp)
 1002dc0:	00880004 	movi	r2,8192
 1002dc4:	18800115 	stw	r2,4(r3)
      return 0;
 1002dc8:	e03ffe15 	stw	zero,-8(fp)
 1002dcc:	00000606 	br	1002de8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002dd0:	1002e000 	call	1002e00 <alt_get_errno>
 1002dd4:	1007883a 	mov	r3,r2
 1002dd8:	00801444 	movi	r2,81
 1002ddc:	18800015 	stw	r2,0(r3)
    return -1;
 1002de0:	00bfffc4 	movi	r2,-1
 1002de4:	e0bffe15 	stw	r2,-8(fp)
 1002de8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002dec:	e037883a 	mov	sp,fp
 1002df0:	dfc00117 	ldw	ra,4(sp)
 1002df4:	df000017 	ldw	fp,0(sp)
 1002df8:	dec00204 	addi	sp,sp,8
 1002dfc:	f800283a 	ret

01002e00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002e00:	defffd04 	addi	sp,sp,-12
 1002e04:	dfc00215 	stw	ra,8(sp)
 1002e08:	df000115 	stw	fp,4(sp)
 1002e0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002e10:	00804034 	movhi	r2,256
 1002e14:	109bd804 	addi	r2,r2,28512
 1002e18:	10800017 	ldw	r2,0(r2)
 1002e1c:	1005003a 	cmpeq	r2,r2,zero
 1002e20:	1000061e 	bne	r2,zero,1002e3c <alt_get_errno+0x3c>
 1002e24:	00804034 	movhi	r2,256
 1002e28:	109bd804 	addi	r2,r2,28512
 1002e2c:	10800017 	ldw	r2,0(r2)
 1002e30:	103ee83a 	callr	r2
 1002e34:	e0bfff15 	stw	r2,-4(fp)
 1002e38:	00000306 	br	1002e48 <alt_get_errno+0x48>
 1002e3c:	00804074 	movhi	r2,257
 1002e40:	10a27204 	addi	r2,r2,-30264
 1002e44:	e0bfff15 	stw	r2,-4(fp)
 1002e48:	e0bfff17 	ldw	r2,-4(fp)
}
 1002e4c:	e037883a 	mov	sp,fp
 1002e50:	dfc00117 	ldw	ra,4(sp)
 1002e54:	df000017 	ldw	fp,0(sp)
 1002e58:	dec00204 	addi	sp,sp,8
 1002e5c:	f800283a 	ret

01002e60 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1002e60:	deffeb04 	addi	sp,sp,-84
 1002e64:	dfc01415 	stw	ra,80(sp)
 1002e68:	df001315 	stw	fp,76(sp)
 1002e6c:	df001304 	addi	fp,sp,76
 1002e70:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002e74:	e0bffd17 	ldw	r2,-12(fp)
 1002e78:	1004803a 	cmplt	r2,r2,zero
 1002e7c:	1000091e 	bne	r2,zero,1002ea4 <isatty+0x44>
 1002e80:	e13ffd17 	ldw	r4,-12(fp)
 1002e84:	01400304 	movi	r5,12
 1002e88:	1002b640 	call	1002b64 <__mulsi3>
 1002e8c:	1007883a 	mov	r3,r2
 1002e90:	00804034 	movhi	r2,256
 1002e94:	10975704 	addi	r2,r2,23900
 1002e98:	1887883a 	add	r3,r3,r2
 1002e9c:	e0ffff15 	stw	r3,-4(fp)
 1002ea0:	00000106 	br	1002ea8 <isatty+0x48>
 1002ea4:	e03fff15 	stw	zero,-4(fp)
 1002ea8:	e0bfff17 	ldw	r2,-4(fp)
 1002eac:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1002eb0:	e0bfed17 	ldw	r2,-76(fp)
 1002eb4:	1005003a 	cmpeq	r2,r2,zero
 1002eb8:	10000f1e 	bne	r2,zero,1002ef8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1002ebc:	e0bfed17 	ldw	r2,-76(fp)
 1002ec0:	10800017 	ldw	r2,0(r2)
 1002ec4:	10800817 	ldw	r2,32(r2)
 1002ec8:	1004c03a 	cmpne	r2,r2,zero
 1002ecc:	1000031e 	bne	r2,zero,1002edc <isatty+0x7c>
    {
      return 1;
 1002ed0:	00800044 	movi	r2,1
 1002ed4:	e0bffe15 	stw	r2,-8(fp)
 1002ed8:	00000c06 	br	1002f0c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1002edc:	e17fee04 	addi	r5,fp,-72
 1002ee0:	e13ffd17 	ldw	r4,-12(fp)
 1002ee4:	1002d280 	call	1002d28 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1002ee8:	e0bfef17 	ldw	r2,-68(fp)
 1002eec:	10880020 	cmpeqi	r2,r2,8192
 1002ef0:	e0bffe15 	stw	r2,-8(fp)
 1002ef4:	00000506 	br	1002f0c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002ef8:	1002f240 	call	1002f24 <alt_get_errno>
 1002efc:	1007883a 	mov	r3,r2
 1002f00:	00801444 	movi	r2,81
 1002f04:	18800015 	stw	r2,0(r3)
    return 0;
 1002f08:	e03ffe15 	stw	zero,-8(fp)
 1002f0c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002f10:	e037883a 	mov	sp,fp
 1002f14:	dfc00117 	ldw	ra,4(sp)
 1002f18:	df000017 	ldw	fp,0(sp)
 1002f1c:	dec00204 	addi	sp,sp,8
 1002f20:	f800283a 	ret

01002f24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002f24:	defffd04 	addi	sp,sp,-12
 1002f28:	dfc00215 	stw	ra,8(sp)
 1002f2c:	df000115 	stw	fp,4(sp)
 1002f30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002f34:	00804034 	movhi	r2,256
 1002f38:	109bd804 	addi	r2,r2,28512
 1002f3c:	10800017 	ldw	r2,0(r2)
 1002f40:	1005003a 	cmpeq	r2,r2,zero
 1002f44:	1000061e 	bne	r2,zero,1002f60 <alt_get_errno+0x3c>
 1002f48:	00804034 	movhi	r2,256
 1002f4c:	109bd804 	addi	r2,r2,28512
 1002f50:	10800017 	ldw	r2,0(r2)
 1002f54:	103ee83a 	callr	r2
 1002f58:	e0bfff15 	stw	r2,-4(fp)
 1002f5c:	00000306 	br	1002f6c <alt_get_errno+0x48>
 1002f60:	00804074 	movhi	r2,257
 1002f64:	10a27204 	addi	r2,r2,-30264
 1002f68:	e0bfff15 	stw	r2,-4(fp)
 1002f6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1002f70:	e037883a 	mov	sp,fp
 1002f74:	dfc00117 	ldw	ra,4(sp)
 1002f78:	df000017 	ldw	fp,0(sp)
 1002f7c:	dec00204 	addi	sp,sp,8
 1002f80:	f800283a 	ret

01002f84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1002f84:	defffe04 	addi	sp,sp,-8
 1002f88:	dfc00115 	stw	ra,4(sp)
 1002f8c:	df000015 	stw	fp,0(sp)
 1002f90:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1002f94:	01004034 	movhi	r4,256
 1002f98:	211bdd04 	addi	r4,r4,28532
 1002f9c:	01404034 	movhi	r5,256
 1002fa0:	29554b04 	addi	r5,r5,21804
 1002fa4:	01804034 	movhi	r6,256
 1002fa8:	319bdd04 	addi	r6,r6,28532
 1002fac:	10030040 	call	1003004 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1002fb0:	01004034 	movhi	r4,256
 1002fb4:	21000804 	addi	r4,r4,32
 1002fb8:	01404034 	movhi	r5,256
 1002fbc:	29400804 	addi	r5,r5,32
 1002fc0:	01804034 	movhi	r6,256
 1002fc4:	31806d04 	addi	r6,r6,436
 1002fc8:	10030040 	call	1003004 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1002fcc:	01004034 	movhi	r4,256
 1002fd0:	21153104 	addi	r4,r4,21700
 1002fd4:	01404034 	movhi	r5,256
 1002fd8:	29553104 	addi	r5,r5,21700
 1002fdc:	01804034 	movhi	r6,256
 1002fe0:	31954b04 	addi	r6,r6,21804
 1002fe4:	10030040 	call	1003004 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1002fe8:	100435c0 	call	100435c <alt_dcache_flush_all>
  alt_icache_flush_all();
 1002fec:	10045540 	call	1004554 <alt_icache_flush_all>
}
 1002ff0:	e037883a 	mov	sp,fp
 1002ff4:	dfc00117 	ldw	ra,4(sp)
 1002ff8:	df000017 	ldw	fp,0(sp)
 1002ffc:	dec00204 	addi	sp,sp,8
 1003000:	f800283a 	ret

01003004 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1003004:	defffc04 	addi	sp,sp,-16
 1003008:	df000315 	stw	fp,12(sp)
 100300c:	df000304 	addi	fp,sp,12
 1003010:	e13ffd15 	stw	r4,-12(fp)
 1003014:	e17ffe15 	stw	r5,-8(fp)
 1003018:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100301c:	e0fffe17 	ldw	r3,-8(fp)
 1003020:	e0bffd17 	ldw	r2,-12(fp)
 1003024:	18800e26 	beq	r3,r2,1003060 <alt_load_section+0x5c>
  {
    while( to != end )
 1003028:	00000a06 	br	1003054 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100302c:	e0bffd17 	ldw	r2,-12(fp)
 1003030:	10c00017 	ldw	r3,0(r2)
 1003034:	e0bffe17 	ldw	r2,-8(fp)
 1003038:	10c00015 	stw	r3,0(r2)
 100303c:	e0bffe17 	ldw	r2,-8(fp)
 1003040:	10800104 	addi	r2,r2,4
 1003044:	e0bffe15 	stw	r2,-8(fp)
 1003048:	e0bffd17 	ldw	r2,-12(fp)
 100304c:	10800104 	addi	r2,r2,4
 1003050:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1003054:	e0fffe17 	ldw	r3,-8(fp)
 1003058:	e0bfff17 	ldw	r2,-4(fp)
 100305c:	18bff31e 	bne	r3,r2,100302c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1003060:	e037883a 	mov	sp,fp
 1003064:	df000017 	ldw	fp,0(sp)
 1003068:	dec00104 	addi	sp,sp,4
 100306c:	f800283a 	ret

01003070 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1003070:	defff804 	addi	sp,sp,-32
 1003074:	dfc00715 	stw	ra,28(sp)
 1003078:	df000615 	stw	fp,24(sp)
 100307c:	df000604 	addi	fp,sp,24
 1003080:	e13ffc15 	stw	r4,-16(fp)
 1003084:	e17ffd15 	stw	r5,-12(fp)
 1003088:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100308c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003090:	e0bffc17 	ldw	r2,-16(fp)
 1003094:	1004803a 	cmplt	r2,r2,zero
 1003098:	1000091e 	bne	r2,zero,10030c0 <lseek+0x50>
 100309c:	e13ffc17 	ldw	r4,-16(fp)
 10030a0:	01400304 	movi	r5,12
 10030a4:	1002b640 	call	1002b64 <__mulsi3>
 10030a8:	1007883a 	mov	r3,r2
 10030ac:	00804034 	movhi	r2,256
 10030b0:	10975704 	addi	r2,r2,23900
 10030b4:	1887883a 	add	r3,r3,r2
 10030b8:	e0ffff15 	stw	r3,-4(fp)
 10030bc:	00000106 	br	10030c4 <lseek+0x54>
 10030c0:	e03fff15 	stw	zero,-4(fp)
 10030c4:	e0bfff17 	ldw	r2,-4(fp)
 10030c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 10030cc:	e0bffb17 	ldw	r2,-20(fp)
 10030d0:	1005003a 	cmpeq	r2,r2,zero
 10030d4:	1000111e 	bne	r2,zero,100311c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 10030d8:	e0bffb17 	ldw	r2,-20(fp)
 10030dc:	10800017 	ldw	r2,0(r2)
 10030e0:	10800717 	ldw	r2,28(r2)
 10030e4:	1005003a 	cmpeq	r2,r2,zero
 10030e8:	1000091e 	bne	r2,zero,1003110 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 10030ec:	e0bffb17 	ldw	r2,-20(fp)
 10030f0:	10800017 	ldw	r2,0(r2)
 10030f4:	10800717 	ldw	r2,28(r2)
 10030f8:	e13ffb17 	ldw	r4,-20(fp)
 10030fc:	e17ffd17 	ldw	r5,-12(fp)
 1003100:	e1bffe17 	ldw	r6,-8(fp)
 1003104:	103ee83a 	callr	r2
 1003108:	e0bffa15 	stw	r2,-24(fp)
 100310c:	00000506 	br	1003124 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1003110:	00bfde84 	movi	r2,-134
 1003114:	e0bffa15 	stw	r2,-24(fp)
 1003118:	00000206 	br	1003124 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100311c:	00bfebc4 	movi	r2,-81
 1003120:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1003124:	e0bffa17 	ldw	r2,-24(fp)
 1003128:	1004403a 	cmpge	r2,r2,zero
 100312c:	1000071e 	bne	r2,zero,100314c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 1003130:	10031640 	call	1003164 <alt_get_errno>
 1003134:	1007883a 	mov	r3,r2
 1003138:	e0bffa17 	ldw	r2,-24(fp)
 100313c:	0085c83a 	sub	r2,zero,r2
 1003140:	18800015 	stw	r2,0(r3)
    rc = -1;
 1003144:	00bfffc4 	movi	r2,-1
 1003148:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100314c:	e0bffa17 	ldw	r2,-24(fp)
}
 1003150:	e037883a 	mov	sp,fp
 1003154:	dfc00117 	ldw	ra,4(sp)
 1003158:	df000017 	ldw	fp,0(sp)
 100315c:	dec00204 	addi	sp,sp,8
 1003160:	f800283a 	ret

01003164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003164:	defffd04 	addi	sp,sp,-12
 1003168:	dfc00215 	stw	ra,8(sp)
 100316c:	df000115 	stw	fp,4(sp)
 1003170:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003174:	00804034 	movhi	r2,256
 1003178:	109bd804 	addi	r2,r2,28512
 100317c:	10800017 	ldw	r2,0(r2)
 1003180:	1005003a 	cmpeq	r2,r2,zero
 1003184:	1000061e 	bne	r2,zero,10031a0 <alt_get_errno+0x3c>
 1003188:	00804034 	movhi	r2,256
 100318c:	109bd804 	addi	r2,r2,28512
 1003190:	10800017 	ldw	r2,0(r2)
 1003194:	103ee83a 	callr	r2
 1003198:	e0bfff15 	stw	r2,-4(fp)
 100319c:	00000306 	br	10031ac <alt_get_errno+0x48>
 10031a0:	00804074 	movhi	r2,257
 10031a4:	10a27204 	addi	r2,r2,-30264
 10031a8:	e0bfff15 	stw	r2,-4(fp)
 10031ac:	e0bfff17 	ldw	r2,-4(fp)
}
 10031b0:	e037883a 	mov	sp,fp
 10031b4:	dfc00117 	ldw	ra,4(sp)
 10031b8:	df000017 	ldw	fp,0(sp)
 10031bc:	dec00204 	addi	sp,sp,8
 10031c0:	f800283a 	ret

010031c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10031c4:	defffd04 	addi	sp,sp,-12
 10031c8:	dfc00215 	stw	ra,8(sp)
 10031cc:	df000115 	stw	fp,4(sp)
 10031d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10031d4:	0009883a 	mov	r4,zero
 10031d8:	10036ac0 	call	10036ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10031dc:	10036e00 	call	10036e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 10031e0:	01004034 	movhi	r4,256
 10031e4:	21154104 	addi	r4,r4,21764
 10031e8:	01404034 	movhi	r5,256
 10031ec:	29554104 	addi	r5,r5,21764
 10031f0:	01804034 	movhi	r6,256
 10031f4:	31954104 	addi	r6,r6,21764
 10031f8:	10049140 	call	1004914 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 10031fc:	100448c0 	call	100448c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1003200:	01004034 	movhi	r4,256
 1003204:	21113c04 	addi	r4,r4,17648
 1003208:	10050b80 	call	10050b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100320c:	d126a417 	ldw	r4,-25968(gp)
 1003210:	d166a517 	ldw	r5,-25964(gp)
 1003214:	d1a6a617 	ldw	r6,-25960(gp)
 1003218:	10001f00 	call	10001f0 <main>
 100321c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1003220:	01000044 	movi	r4,1
 1003224:	1002b9c0 	call	1002b9c <close>
  exit (result);
 1003228:	e13fff17 	ldw	r4,-4(fp)
 100322c:	10050cc0 	call	10050cc <exit>

01003230 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1003230:	defffe04 	addi	sp,sp,-8
 1003234:	df000115 	stw	fp,4(sp)
 1003238:	df000104 	addi	fp,sp,4
 100323c:	e13fff15 	stw	r4,-4(fp)
}
 1003240:	e037883a 	mov	sp,fp
 1003244:	df000017 	ldw	fp,0(sp)
 1003248:	dec00104 	addi	sp,sp,4
 100324c:	f800283a 	ret

01003250 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1003250:	defffe04 	addi	sp,sp,-8
 1003254:	df000115 	stw	fp,4(sp)
 1003258:	df000104 	addi	fp,sp,4
 100325c:	e13fff15 	stw	r4,-4(fp)
}
 1003260:	e037883a 	mov	sp,fp
 1003264:	df000017 	ldw	fp,0(sp)
 1003268:	dec00104 	addi	sp,sp,4
 100326c:	f800283a 	ret

01003270 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1003270:	defff704 	addi	sp,sp,-36
 1003274:	dfc00815 	stw	ra,32(sp)
 1003278:	df000715 	stw	fp,28(sp)
 100327c:	df000704 	addi	fp,sp,28
 1003280:	e13ffb15 	stw	r4,-20(fp)
 1003284:	e17ffc15 	stw	r5,-16(fp)
 1003288:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100328c:	e0bffb17 	ldw	r2,-20(fp)
 1003290:	1004803a 	cmplt	r2,r2,zero
 1003294:	1000091e 	bne	r2,zero,10032bc <read+0x4c>
 1003298:	e13ffb17 	ldw	r4,-20(fp)
 100329c:	01400304 	movi	r5,12
 10032a0:	1002b640 	call	1002b64 <__mulsi3>
 10032a4:	1007883a 	mov	r3,r2
 10032a8:	00804034 	movhi	r2,256
 10032ac:	10975704 	addi	r2,r2,23900
 10032b0:	1887883a 	add	r3,r3,r2
 10032b4:	e0ffff15 	stw	r3,-4(fp)
 10032b8:	00000106 	br	10032c0 <read+0x50>
 10032bc:	e03fff15 	stw	zero,-4(fp)
 10032c0:	e0bfff17 	ldw	r2,-4(fp)
 10032c4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10032c8:	e0bffa17 	ldw	r2,-24(fp)
 10032cc:	1005003a 	cmpeq	r2,r2,zero
 10032d0:	1000241e 	bne	r2,zero,1003364 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 10032d4:	e0bffa17 	ldw	r2,-24(fp)
 10032d8:	10800217 	ldw	r2,8(r2)
 10032dc:	108000cc 	andi	r2,r2,3
 10032e0:	10800060 	cmpeqi	r2,r2,1
 10032e4:	10001a1e 	bne	r2,zero,1003350 <read+0xe0>
 10032e8:	e0bffa17 	ldw	r2,-24(fp)
 10032ec:	10800017 	ldw	r2,0(r2)
 10032f0:	10800517 	ldw	r2,20(r2)
 10032f4:	1005003a 	cmpeq	r2,r2,zero
 10032f8:	1000151e 	bne	r2,zero,1003350 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 10032fc:	e0bffa17 	ldw	r2,-24(fp)
 1003300:	10800017 	ldw	r2,0(r2)
 1003304:	10800517 	ldw	r2,20(r2)
 1003308:	e17ffc17 	ldw	r5,-16(fp)
 100330c:	e1bffd17 	ldw	r6,-12(fp)
 1003310:	e13ffa17 	ldw	r4,-24(fp)
 1003314:	103ee83a 	callr	r2
 1003318:	e0bff915 	stw	r2,-28(fp)
 100331c:	e0bff917 	ldw	r2,-28(fp)
 1003320:	1004403a 	cmpge	r2,r2,zero
 1003324:	1000071e 	bne	r2,zero,1003344 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 1003328:	10033940 	call	1003394 <alt_get_errno>
 100332c:	e0fff917 	ldw	r3,-28(fp)
 1003330:	00c7c83a 	sub	r3,zero,r3
 1003334:	10c00015 	stw	r3,0(r2)
          return -1;
 1003338:	00bfffc4 	movi	r2,-1
 100333c:	e0bffe15 	stw	r2,-8(fp)
 1003340:	00000e06 	br	100337c <read+0x10c>
        }
        return rval;
 1003344:	e0bff917 	ldw	r2,-28(fp)
 1003348:	e0bffe15 	stw	r2,-8(fp)
 100334c:	00000b06 	br	100337c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1003350:	10033940 	call	1003394 <alt_get_errno>
 1003354:	1007883a 	mov	r3,r2
 1003358:	00800344 	movi	r2,13
 100335c:	18800015 	stw	r2,0(r3)
 1003360:	00000406 	br	1003374 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1003364:	10033940 	call	1003394 <alt_get_errno>
 1003368:	1007883a 	mov	r3,r2
 100336c:	00801444 	movi	r2,81
 1003370:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003374:	00bfffc4 	movi	r2,-1
 1003378:	e0bffe15 	stw	r2,-8(fp)
 100337c:	e0bffe17 	ldw	r2,-8(fp)
}
 1003380:	e037883a 	mov	sp,fp
 1003384:	dfc00117 	ldw	ra,4(sp)
 1003388:	df000017 	ldw	fp,0(sp)
 100338c:	dec00204 	addi	sp,sp,8
 1003390:	f800283a 	ret

01003394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003394:	defffd04 	addi	sp,sp,-12
 1003398:	dfc00215 	stw	ra,8(sp)
 100339c:	df000115 	stw	fp,4(sp)
 10033a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10033a4:	00804034 	movhi	r2,256
 10033a8:	109bd804 	addi	r2,r2,28512
 10033ac:	10800017 	ldw	r2,0(r2)
 10033b0:	1005003a 	cmpeq	r2,r2,zero
 10033b4:	1000061e 	bne	r2,zero,10033d0 <alt_get_errno+0x3c>
 10033b8:	00804034 	movhi	r2,256
 10033bc:	109bd804 	addi	r2,r2,28512
 10033c0:	10800017 	ldw	r2,0(r2)
 10033c4:	103ee83a 	callr	r2
 10033c8:	e0bfff15 	stw	r2,-4(fp)
 10033cc:	00000306 	br	10033dc <alt_get_errno+0x48>
 10033d0:	00804074 	movhi	r2,257
 10033d4:	10a27204 	addi	r2,r2,-30264
 10033d8:	e0bfff15 	stw	r2,-4(fp)
 10033dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10033e0:	e037883a 	mov	sp,fp
 10033e4:	dfc00117 	ldw	ra,4(sp)
 10033e8:	df000017 	ldw	fp,0(sp)
 10033ec:	dec00204 	addi	sp,sp,8
 10033f0:	f800283a 	ret

010033f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10033f4:	defffc04 	addi	sp,sp,-16
 10033f8:	dfc00315 	stw	ra,12(sp)
 10033fc:	df000215 	stw	fp,8(sp)
 1003400:	dc000115 	stw	r16,4(sp)
 1003404:	df000104 	addi	fp,sp,4
 1003408:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100340c:	e0bfff17 	ldw	r2,-4(fp)
 1003410:	108000d0 	cmplti	r2,r2,3
 1003414:	10000f1e 	bne	r2,zero,1003454 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 1003418:	e13fff17 	ldw	r4,-4(fp)
 100341c:	04004034 	movhi	r16,256
 1003420:	84175704 	addi	r16,r16,23900
 1003424:	01400304 	movi	r5,12
 1003428:	1002b640 	call	1002b64 <__mulsi3>
 100342c:	1405883a 	add	r2,r2,r16
 1003430:	10800204 	addi	r2,r2,8
 1003434:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1003438:	e13fff17 	ldw	r4,-4(fp)
 100343c:	04004034 	movhi	r16,256
 1003440:	84175704 	addi	r16,r16,23900
 1003444:	01400304 	movi	r5,12
 1003448:	1002b640 	call	1002b64 <__mulsi3>
 100344c:	1405883a 	add	r2,r2,r16
 1003450:	10000015 	stw	zero,0(r2)
  }
}
 1003454:	e037883a 	mov	sp,fp
 1003458:	dfc00217 	ldw	ra,8(sp)
 100345c:	df000117 	ldw	fp,4(sp)
 1003460:	dc000017 	ldw	r16,0(sp)
 1003464:	dec00304 	addi	sp,sp,12
 1003468:	f800283a 	ret

0100346c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100346c:	defff804 	addi	sp,sp,-32
 1003470:	df000715 	stw	fp,28(sp)
 1003474:	df000704 	addi	fp,sp,28
 1003478:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100347c:	0005303a 	rdctl	r2,status
 1003480:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003484:	e0fffb17 	ldw	r3,-20(fp)
 1003488:	00bfff84 	movi	r2,-2
 100348c:	1884703a 	and	r2,r3,r2
 1003490:	1001703a 	wrctl	status,r2
  
  return context;
 1003494:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003498:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100349c:	d0a00a17 	ldw	r2,-32728(gp)
 10034a0:	10c000c4 	addi	r3,r2,3
 10034a4:	00bfff04 	movi	r2,-4
 10034a8:	1884703a 	and	r2,r3,r2
 10034ac:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 10034b0:	d0e00a17 	ldw	r3,-32728(gp)
 10034b4:	e0bffe17 	ldw	r2,-8(fp)
 10034b8:	1887883a 	add	r3,r3,r2
 10034bc:	00806034 	movhi	r2,384
 10034c0:	10800004 	addi	r2,r2,0
 10034c4:	10c0072e 	bgeu	r2,r3,10034e4 <sbrk+0x78>
 10034c8:	e0bffd17 	ldw	r2,-12(fp)
 10034cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10034d0:	e0bffa17 	ldw	r2,-24(fp)
 10034d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 10034d8:	00bfffc4 	movi	r2,-1
 10034dc:	e0bfff15 	stw	r2,-4(fp)
 10034e0:	00000c06 	br	1003514 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 10034e4:	d0a00a17 	ldw	r2,-32728(gp)
 10034e8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 10034ec:	d0e00a17 	ldw	r3,-32728(gp)
 10034f0:	e0bffe17 	ldw	r2,-8(fp)
 10034f4:	1885883a 	add	r2,r3,r2
 10034f8:	d0a00a15 	stw	r2,-32728(gp)
 10034fc:	e0bffd17 	ldw	r2,-12(fp)
 1003500:	e0bff915 	stw	r2,-28(fp)
 1003504:	e0bff917 	ldw	r2,-28(fp)
 1003508:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100350c:	e0bffc17 	ldw	r2,-16(fp)
 1003510:	e0bfff15 	stw	r2,-4(fp)
 1003514:	e0bfff17 	ldw	r2,-4(fp)
} 
 1003518:	e037883a 	mov	sp,fp
 100351c:	df000017 	ldw	fp,0(sp)
 1003520:	dec00104 	addi	sp,sp,4
 1003524:	f800283a 	ret

01003528 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1003528:	defff704 	addi	sp,sp,-36
 100352c:	dfc00815 	stw	ra,32(sp)
 1003530:	df000715 	stw	fp,28(sp)
 1003534:	df000704 	addi	fp,sp,28
 1003538:	e13ffb15 	stw	r4,-20(fp)
 100353c:	e17ffc15 	stw	r5,-16(fp)
 1003540:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003544:	e0bffb17 	ldw	r2,-20(fp)
 1003548:	1004803a 	cmplt	r2,r2,zero
 100354c:	1000091e 	bne	r2,zero,1003574 <write+0x4c>
 1003550:	e13ffb17 	ldw	r4,-20(fp)
 1003554:	01400304 	movi	r5,12
 1003558:	1002b640 	call	1002b64 <__mulsi3>
 100355c:	1007883a 	mov	r3,r2
 1003560:	00804034 	movhi	r2,256
 1003564:	10975704 	addi	r2,r2,23900
 1003568:	1887883a 	add	r3,r3,r2
 100356c:	e0ffff15 	stw	r3,-4(fp)
 1003570:	00000106 	br	1003578 <write+0x50>
 1003574:	e03fff15 	stw	zero,-4(fp)
 1003578:	e0bfff17 	ldw	r2,-4(fp)
 100357c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1003580:	e0bffa17 	ldw	r2,-24(fp)
 1003584:	1005003a 	cmpeq	r2,r2,zero
 1003588:	1000241e 	bne	r2,zero,100361c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100358c:	e0bffa17 	ldw	r2,-24(fp)
 1003590:	10800217 	ldw	r2,8(r2)
 1003594:	108000cc 	andi	r2,r2,3
 1003598:	1005003a 	cmpeq	r2,r2,zero
 100359c:	10001a1e 	bne	r2,zero,1003608 <write+0xe0>
 10035a0:	e0bffa17 	ldw	r2,-24(fp)
 10035a4:	10800017 	ldw	r2,0(r2)
 10035a8:	10800617 	ldw	r2,24(r2)
 10035ac:	1005003a 	cmpeq	r2,r2,zero
 10035b0:	1000151e 	bne	r2,zero,1003608 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10035b4:	e0bffa17 	ldw	r2,-24(fp)
 10035b8:	10800017 	ldw	r2,0(r2)
 10035bc:	10800617 	ldw	r2,24(r2)
 10035c0:	e17ffc17 	ldw	r5,-16(fp)
 10035c4:	e1bffd17 	ldw	r6,-12(fp)
 10035c8:	e13ffa17 	ldw	r4,-24(fp)
 10035cc:	103ee83a 	callr	r2
 10035d0:	e0bff915 	stw	r2,-28(fp)
 10035d4:	e0bff917 	ldw	r2,-28(fp)
 10035d8:	1004403a 	cmpge	r2,r2,zero
 10035dc:	1000071e 	bne	r2,zero,10035fc <write+0xd4>
      {
        ALT_ERRNO = -rval;
 10035e0:	100364c0 	call	100364c <alt_get_errno>
 10035e4:	e0fff917 	ldw	r3,-28(fp)
 10035e8:	00c7c83a 	sub	r3,zero,r3
 10035ec:	10c00015 	stw	r3,0(r2)
        return -1;
 10035f0:	00bfffc4 	movi	r2,-1
 10035f4:	e0bffe15 	stw	r2,-8(fp)
 10035f8:	00000e06 	br	1003634 <write+0x10c>
      }
      return rval;
 10035fc:	e0bff917 	ldw	r2,-28(fp)
 1003600:	e0bffe15 	stw	r2,-8(fp)
 1003604:	00000b06 	br	1003634 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003608:	100364c0 	call	100364c <alt_get_errno>
 100360c:	1007883a 	mov	r3,r2
 1003610:	00800344 	movi	r2,13
 1003614:	18800015 	stw	r2,0(r3)
 1003618:	00000406 	br	100362c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100361c:	100364c0 	call	100364c <alt_get_errno>
 1003620:	1007883a 	mov	r3,r2
 1003624:	00801444 	movi	r2,81
 1003628:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100362c:	00bfffc4 	movi	r2,-1
 1003630:	e0bffe15 	stw	r2,-8(fp)
 1003634:	e0bffe17 	ldw	r2,-8(fp)
}
 1003638:	e037883a 	mov	sp,fp
 100363c:	dfc00117 	ldw	ra,4(sp)
 1003640:	df000017 	ldw	fp,0(sp)
 1003644:	dec00204 	addi	sp,sp,8
 1003648:	f800283a 	ret

0100364c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100364c:	defffd04 	addi	sp,sp,-12
 1003650:	dfc00215 	stw	ra,8(sp)
 1003654:	df000115 	stw	fp,4(sp)
 1003658:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100365c:	00804034 	movhi	r2,256
 1003660:	109bd804 	addi	r2,r2,28512
 1003664:	10800017 	ldw	r2,0(r2)
 1003668:	1005003a 	cmpeq	r2,r2,zero
 100366c:	1000061e 	bne	r2,zero,1003688 <alt_get_errno+0x3c>
 1003670:	00804034 	movhi	r2,256
 1003674:	109bd804 	addi	r2,r2,28512
 1003678:	10800017 	ldw	r2,0(r2)
 100367c:	103ee83a 	callr	r2
 1003680:	e0bfff15 	stw	r2,-4(fp)
 1003684:	00000306 	br	1003694 <alt_get_errno+0x48>
 1003688:	00804074 	movhi	r2,257
 100368c:	10a27204 	addi	r2,r2,-30264
 1003690:	e0bfff15 	stw	r2,-4(fp)
 1003694:	e0bfff17 	ldw	r2,-4(fp)
}
 1003698:	e037883a 	mov	sp,fp
 100369c:	dfc00117 	ldw	ra,4(sp)
 10036a0:	df000017 	ldw	fp,0(sp)
 10036a4:	dec00204 	addi	sp,sp,8
 10036a8:	f800283a 	ret

010036ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10036ac:	defffd04 	addi	sp,sp,-12
 10036b0:	dfc00215 	stw	ra,8(sp)
 10036b4:	df000115 	stw	fp,4(sp)
 10036b8:	df000104 	addi	fp,sp,4
 10036bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 10036c0:	1004e140 	call	1004e14 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 10036c4:	00800044 	movi	r2,1
 10036c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 10036cc:	e037883a 	mov	sp,fp
 10036d0:	dfc00117 	ldw	ra,4(sp)
 10036d4:	df000017 	ldw	fp,0(sp)
 10036d8:	dec00204 	addi	sp,sp,8
 10036dc:	f800283a 	ret

010036e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 10036e0:	defffe04 	addi	sp,sp,-8
 10036e4:	dfc00115 	stw	ra,4(sp)
 10036e8:	df000015 	stw	fp,0(sp)
 10036ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10036f0:	01004034 	movhi	r4,256
 10036f4:	2117c104 	addi	r4,r4,24324
 10036f8:	000b883a 	mov	r5,zero
 10036fc:	01800144 	movi	r6,5
 1003700:	10038a40 	call	10038a4 <altera_avalon_jtag_uart_init>
 1003704:	01004034 	movhi	r4,256
 1003708:	2117b704 	addi	r4,r4,24284
 100370c:	10037240 	call	1003724 <alt_dev_reg>
}
 1003710:	e037883a 	mov	sp,fp
 1003714:	dfc00117 	ldw	ra,4(sp)
 1003718:	df000017 	ldw	fp,0(sp)
 100371c:	dec00204 	addi	sp,sp,8
 1003720:	f800283a 	ret

01003724 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1003724:	defffd04 	addi	sp,sp,-12
 1003728:	dfc00215 	stw	ra,8(sp)
 100372c:	df000115 	stw	fp,4(sp)
 1003730:	df000104 	addi	fp,sp,4
 1003734:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1003738:	e13fff17 	ldw	r4,-4(fp)
 100373c:	01404034 	movhi	r5,256
 1003740:	295bd504 	addi	r5,r5,28500
 1003744:	10043780 	call	1004378 <alt_dev_llist_insert>
}
 1003748:	e037883a 	mov	sp,fp
 100374c:	dfc00117 	ldw	ra,4(sp)
 1003750:	df000017 	ldw	fp,0(sp)
 1003754:	dec00204 	addi	sp,sp,8
 1003758:	f800283a 	ret

0100375c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100375c:	defffa04 	addi	sp,sp,-24
 1003760:	dfc00515 	stw	ra,20(sp)
 1003764:	df000415 	stw	fp,16(sp)
 1003768:	df000404 	addi	fp,sp,16
 100376c:	e13ffd15 	stw	r4,-12(fp)
 1003770:	e17ffe15 	stw	r5,-8(fp)
 1003774:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003778:	e0bffd17 	ldw	r2,-12(fp)
 100377c:	10800017 	ldw	r2,0(r2)
 1003780:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1003784:	e0bffc17 	ldw	r2,-16(fp)
 1003788:	11000a04 	addi	r4,r2,40
 100378c:	e0bffd17 	ldw	r2,-12(fp)
 1003790:	11c00217 	ldw	r7,8(r2)
 1003794:	e17ffe17 	ldw	r5,-8(fp)
 1003798:	e1bfff17 	ldw	r6,-4(fp)
 100379c:	1003da40 	call	1003da4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10037a0:	e037883a 	mov	sp,fp
 10037a4:	dfc00117 	ldw	ra,4(sp)
 10037a8:	df000017 	ldw	fp,0(sp)
 10037ac:	dec00204 	addi	sp,sp,8
 10037b0:	f800283a 	ret

010037b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10037b4:	defffa04 	addi	sp,sp,-24
 10037b8:	dfc00515 	stw	ra,20(sp)
 10037bc:	df000415 	stw	fp,16(sp)
 10037c0:	df000404 	addi	fp,sp,16
 10037c4:	e13ffd15 	stw	r4,-12(fp)
 10037c8:	e17ffe15 	stw	r5,-8(fp)
 10037cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10037d0:	e0bffd17 	ldw	r2,-12(fp)
 10037d4:	10800017 	ldw	r2,0(r2)
 10037d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 10037dc:	e0bffc17 	ldw	r2,-16(fp)
 10037e0:	11000a04 	addi	r4,r2,40
 10037e4:	e0bffd17 	ldw	r2,-12(fp)
 10037e8:	11c00217 	ldw	r7,8(r2)
 10037ec:	e17ffe17 	ldw	r5,-8(fp)
 10037f0:	e1bfff17 	ldw	r6,-4(fp)
 10037f4:	1003fc80 	call	1003fc8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 10037f8:	e037883a 	mov	sp,fp
 10037fc:	dfc00117 	ldw	ra,4(sp)
 1003800:	df000017 	ldw	fp,0(sp)
 1003804:	dec00204 	addi	sp,sp,8
 1003808:	f800283a 	ret

0100380c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100380c:	defffc04 	addi	sp,sp,-16
 1003810:	dfc00315 	stw	ra,12(sp)
 1003814:	df000215 	stw	fp,8(sp)
 1003818:	df000204 	addi	fp,sp,8
 100381c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003820:	e0bfff17 	ldw	r2,-4(fp)
 1003824:	10800017 	ldw	r2,0(r2)
 1003828:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100382c:	e0bffe17 	ldw	r2,-8(fp)
 1003830:	11000a04 	addi	r4,r2,40
 1003834:	e0bfff17 	ldw	r2,-4(fp)
 1003838:	11400217 	ldw	r5,8(r2)
 100383c:	1003c3c0 	call	1003c3c <altera_avalon_jtag_uart_close>
}
 1003840:	e037883a 	mov	sp,fp
 1003844:	dfc00117 	ldw	ra,4(sp)
 1003848:	df000017 	ldw	fp,0(sp)
 100384c:	dec00204 	addi	sp,sp,8
 1003850:	f800283a 	ret

01003854 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1003854:	defffa04 	addi	sp,sp,-24
 1003858:	dfc00515 	stw	ra,20(sp)
 100385c:	df000415 	stw	fp,16(sp)
 1003860:	df000404 	addi	fp,sp,16
 1003864:	e13ffd15 	stw	r4,-12(fp)
 1003868:	e17ffe15 	stw	r5,-8(fp)
 100386c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1003870:	e0bffd17 	ldw	r2,-12(fp)
 1003874:	10800017 	ldw	r2,0(r2)
 1003878:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100387c:	e0bffc17 	ldw	r2,-16(fp)
 1003880:	11000a04 	addi	r4,r2,40
 1003884:	e17ffe17 	ldw	r5,-8(fp)
 1003888:	e1bfff17 	ldw	r6,-4(fp)
 100388c:	1003cb00 	call	1003cb0 <altera_avalon_jtag_uart_ioctl>
}
 1003890:	e037883a 	mov	sp,fp
 1003894:	dfc00117 	ldw	ra,4(sp)
 1003898:	df000017 	ldw	fp,0(sp)
 100389c:	dec00204 	addi	sp,sp,8
 10038a0:	f800283a 	ret

010038a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10038a4:	defffa04 	addi	sp,sp,-24
 10038a8:	dfc00515 	stw	ra,20(sp)
 10038ac:	df000415 	stw	fp,16(sp)
 10038b0:	df000404 	addi	fp,sp,16
 10038b4:	e13ffd15 	stw	r4,-12(fp)
 10038b8:	e17ffe15 	stw	r5,-8(fp)
 10038bc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10038c0:	e0fffd17 	ldw	r3,-12(fp)
 10038c4:	00800044 	movi	r2,1
 10038c8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 10038cc:	e0bffd17 	ldw	r2,-12(fp)
 10038d0:	10800017 	ldw	r2,0(r2)
 10038d4:	11000104 	addi	r4,r2,4
 10038d8:	e0bffd17 	ldw	r2,-12(fp)
 10038dc:	10800817 	ldw	r2,32(r2)
 10038e0:	1007883a 	mov	r3,r2
 10038e4:	2005883a 	mov	r2,r4
 10038e8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 10038ec:	e13ffe17 	ldw	r4,-8(fp)
 10038f0:	e17fff17 	ldw	r5,-4(fp)
 10038f4:	d8000015 	stw	zero,0(sp)
 10038f8:	01804034 	movhi	r6,256
 10038fc:	318e5904 	addi	r6,r6,14692
 1003900:	e1fffd17 	ldw	r7,-12(fp)
 1003904:	10045700 	call	1004570 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1003908:	e0bffd17 	ldw	r2,-12(fp)
 100390c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1003910:	e0bffd17 	ldw	r2,-12(fp)
 1003914:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1003918:	00804074 	movhi	r2,257
 100391c:	10a27704 	addi	r2,r2,-30244
 1003920:	10800017 	ldw	r2,0(r2)
 1003924:	100b883a 	mov	r5,r2
 1003928:	01804034 	movhi	r6,256
 100392c:	318ee304 	addi	r6,r6,15244
 1003930:	e1fffd17 	ldw	r7,-12(fp)
 1003934:	10042080 	call	1004208 <alt_alarm_start>
 1003938:	1004403a 	cmpge	r2,r2,zero
 100393c:	1000041e 	bne	r2,zero,1003950 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1003940:	e0fffd17 	ldw	r3,-12(fp)
 1003944:	00a00034 	movhi	r2,32768
 1003948:	10bfffc4 	addi	r2,r2,-1
 100394c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1003950:	e037883a 	mov	sp,fp
 1003954:	dfc00117 	ldw	ra,4(sp)
 1003958:	df000017 	ldw	fp,0(sp)
 100395c:	dec00204 	addi	sp,sp,8
 1003960:	f800283a 	ret

01003964 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1003964:	defff804 	addi	sp,sp,-32
 1003968:	df000715 	stw	fp,28(sp)
 100396c:	df000704 	addi	fp,sp,28
 1003970:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1003974:	e0bfff17 	ldw	r2,-4(fp)
 1003978:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100397c:	e0bffe17 	ldw	r2,-8(fp)
 1003980:	10800017 	ldw	r2,0(r2)
 1003984:	e0bffd15 	stw	r2,-12(fp)
 1003988:	00000006 	br	100398c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100398c:	e0bffd17 	ldw	r2,-12(fp)
 1003990:	10800104 	addi	r2,r2,4
 1003994:	10800037 	ldwio	r2,0(r2)
 1003998:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100399c:	e0bffc17 	ldw	r2,-16(fp)
 10039a0:	1080c00c 	andi	r2,r2,768
 10039a4:	1005003a 	cmpeq	r2,r2,zero
 10039a8:	1000741e 	bne	r2,zero,1003b7c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 10039ac:	e0bffc17 	ldw	r2,-16(fp)
 10039b0:	1080400c 	andi	r2,r2,256
 10039b4:	1005003a 	cmpeq	r2,r2,zero
 10039b8:	1000351e 	bne	r2,zero,1003a90 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 10039bc:	00800074 	movhi	r2,1
 10039c0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10039c4:	e0bffe17 	ldw	r2,-8(fp)
 10039c8:	10800a17 	ldw	r2,40(r2)
 10039cc:	10800044 	addi	r2,r2,1
 10039d0:	1081ffcc 	andi	r2,r2,2047
 10039d4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 10039d8:	e0bffe17 	ldw	r2,-8(fp)
 10039dc:	10c00b17 	ldw	r3,44(r2)
 10039e0:	e0bffa17 	ldw	r2,-24(fp)
 10039e4:	18801626 	beq	r3,r2,1003a40 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10039e8:	e0bffd17 	ldw	r2,-12(fp)
 10039ec:	10800037 	ldwio	r2,0(r2)
 10039f0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 10039f4:	e0bffb17 	ldw	r2,-20(fp)
 10039f8:	10a0000c 	andi	r2,r2,32768
 10039fc:	1005003a 	cmpeq	r2,r2,zero
 1003a00:	10000f1e 	bne	r2,zero,1003a40 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1003a04:	e0bffe17 	ldw	r2,-8(fp)
 1003a08:	10c00a17 	ldw	r3,40(r2)
 1003a0c:	e0bffb17 	ldw	r2,-20(fp)
 1003a10:	1009883a 	mov	r4,r2
 1003a14:	e0bffe17 	ldw	r2,-8(fp)
 1003a18:	1885883a 	add	r2,r3,r2
 1003a1c:	10800e04 	addi	r2,r2,56
 1003a20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003a24:	e0bffe17 	ldw	r2,-8(fp)
 1003a28:	10800a17 	ldw	r2,40(r2)
 1003a2c:	10800044 	addi	r2,r2,1
 1003a30:	10c1ffcc 	andi	r3,r2,2047
 1003a34:	e0bffe17 	ldw	r2,-8(fp)
 1003a38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1003a3c:	003fe106 	br	10039c4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1003a40:	e0bffb17 	ldw	r2,-20(fp)
 1003a44:	10bfffec 	andhi	r2,r2,65535
 1003a48:	1005003a 	cmpeq	r2,r2,zero
 1003a4c:	1000101e 	bne	r2,zero,1003a90 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003a50:	e0bffe17 	ldw	r2,-8(fp)
 1003a54:	10c00817 	ldw	r3,32(r2)
 1003a58:	00bfff84 	movi	r2,-2
 1003a5c:	1886703a 	and	r3,r3,r2
 1003a60:	e0bffe17 	ldw	r2,-8(fp)
 1003a64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1003a68:	e0bffd17 	ldw	r2,-12(fp)
 1003a6c:	11000104 	addi	r4,r2,4
 1003a70:	e0bffe17 	ldw	r2,-8(fp)
 1003a74:	10800817 	ldw	r2,32(r2)
 1003a78:	1007883a 	mov	r3,r2
 1003a7c:	2005883a 	mov	r2,r4
 1003a80:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003a84:	e0bffd17 	ldw	r2,-12(fp)
 1003a88:	10800104 	addi	r2,r2,4
 1003a8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1003a90:	e0bffc17 	ldw	r2,-16(fp)
 1003a94:	1080800c 	andi	r2,r2,512
 1003a98:	1005003a 	cmpeq	r2,r2,zero
 1003a9c:	103fbb1e 	bne	r2,zero,100398c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1003aa0:	e0bffc17 	ldw	r2,-16(fp)
 1003aa4:	10bfffec 	andhi	r2,r2,65535
 1003aa8:	1004d43a 	srli	r2,r2,16
 1003aac:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003ab0:	00001506 	br	1003b08 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1003ab4:	e13ffd17 	ldw	r4,-12(fp)
 1003ab8:	e0bffe17 	ldw	r2,-8(fp)
 1003abc:	10c00d17 	ldw	r3,52(r2)
 1003ac0:	e0bffe17 	ldw	r2,-8(fp)
 1003ac4:	1885883a 	add	r2,r3,r2
 1003ac8:	10820e04 	addi	r2,r2,2104
 1003acc:	10800003 	ldbu	r2,0(r2)
 1003ad0:	10c03fcc 	andi	r3,r2,255
 1003ad4:	18c0201c 	xori	r3,r3,128
 1003ad8:	18ffe004 	addi	r3,r3,-128
 1003adc:	2005883a 	mov	r2,r4
 1003ae0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003ae4:	e0bffe17 	ldw	r2,-8(fp)
 1003ae8:	10800d17 	ldw	r2,52(r2)
 1003aec:	10800044 	addi	r2,r2,1
 1003af0:	10c1ffcc 	andi	r3,r2,2047
 1003af4:	e0bffe17 	ldw	r2,-8(fp)
 1003af8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1003afc:	e0bff917 	ldw	r2,-28(fp)
 1003b00:	10bfffc4 	addi	r2,r2,-1
 1003b04:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003b08:	e0bff917 	ldw	r2,-28(fp)
 1003b0c:	1005003a 	cmpeq	r2,r2,zero
 1003b10:	1000051e 	bne	r2,zero,1003b28 <altera_avalon_jtag_uart_irq+0x1c4>
 1003b14:	e0bffe17 	ldw	r2,-8(fp)
 1003b18:	10c00d17 	ldw	r3,52(r2)
 1003b1c:	e0bffe17 	ldw	r2,-8(fp)
 1003b20:	10800c17 	ldw	r2,48(r2)
 1003b24:	18bfe31e 	bne	r3,r2,1003ab4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1003b28:	e0bff917 	ldw	r2,-28(fp)
 1003b2c:	1005003a 	cmpeq	r2,r2,zero
 1003b30:	103f961e 	bne	r2,zero,100398c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1003b34:	e0bffe17 	ldw	r2,-8(fp)
 1003b38:	10c00817 	ldw	r3,32(r2)
 1003b3c:	00bfff44 	movi	r2,-3
 1003b40:	1886703a 	and	r3,r3,r2
 1003b44:	e0bffe17 	ldw	r2,-8(fp)
 1003b48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1003b4c:	e0bffe17 	ldw	r2,-8(fp)
 1003b50:	10800017 	ldw	r2,0(r2)
 1003b54:	11000104 	addi	r4,r2,4
 1003b58:	e0bffe17 	ldw	r2,-8(fp)
 1003b5c:	10800817 	ldw	r2,32(r2)
 1003b60:	1007883a 	mov	r3,r2
 1003b64:	2005883a 	mov	r2,r4
 1003b68:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003b6c:	e0bffd17 	ldw	r2,-12(fp)
 1003b70:	10800104 	addi	r2,r2,4
 1003b74:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1003b78:	003f8406 	br	100398c <altera_avalon_jtag_uart_irq+0x28>
}
 1003b7c:	e037883a 	mov	sp,fp
 1003b80:	df000017 	ldw	fp,0(sp)
 1003b84:	dec00104 	addi	sp,sp,4
 1003b88:	f800283a 	ret

01003b8c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1003b8c:	defffc04 	addi	sp,sp,-16
 1003b90:	df000315 	stw	fp,12(sp)
 1003b94:	df000304 	addi	fp,sp,12
 1003b98:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1003b9c:	e0bfff17 	ldw	r2,-4(fp)
 1003ba0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1003ba4:	e0bffe17 	ldw	r2,-8(fp)
 1003ba8:	10800017 	ldw	r2,0(r2)
 1003bac:	10800104 	addi	r2,r2,4
 1003bb0:	10800037 	ldwio	r2,0(r2)
 1003bb4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1003bb8:	e0bffd17 	ldw	r2,-12(fp)
 1003bbc:	1081000c 	andi	r2,r2,1024
 1003bc0:	1005003a 	cmpeq	r2,r2,zero
 1003bc4:	10000c1e 	bne	r2,zero,1003bf8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1003bc8:	e0bffe17 	ldw	r2,-8(fp)
 1003bcc:	10800017 	ldw	r2,0(r2)
 1003bd0:	11000104 	addi	r4,r2,4
 1003bd4:	e0bffe17 	ldw	r2,-8(fp)
 1003bd8:	10800817 	ldw	r2,32(r2)
 1003bdc:	10810014 	ori	r2,r2,1024
 1003be0:	1007883a 	mov	r3,r2
 1003be4:	2005883a 	mov	r2,r4
 1003be8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1003bec:	e0bffe17 	ldw	r2,-8(fp)
 1003bf0:	10000915 	stw	zero,36(r2)
 1003bf4:	00000a06 	br	1003c20 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1003bf8:	e0bffe17 	ldw	r2,-8(fp)
 1003bfc:	10c00917 	ldw	r3,36(r2)
 1003c00:	00a00034 	movhi	r2,32768
 1003c04:	10bfff04 	addi	r2,r2,-4
 1003c08:	10c00536 	bltu	r2,r3,1003c20 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1003c0c:	e0bffe17 	ldw	r2,-8(fp)
 1003c10:	10800917 	ldw	r2,36(r2)
 1003c14:	10c00044 	addi	r3,r2,1
 1003c18:	e0bffe17 	ldw	r2,-8(fp)
 1003c1c:	10c00915 	stw	r3,36(r2)
 1003c20:	00804074 	movhi	r2,257
 1003c24:	10a27704 	addi	r2,r2,-30244
 1003c28:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1003c2c:	e037883a 	mov	sp,fp
 1003c30:	df000017 	ldw	fp,0(sp)
 1003c34:	dec00104 	addi	sp,sp,4
 1003c38:	f800283a 	ret

01003c3c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1003c3c:	defffc04 	addi	sp,sp,-16
 1003c40:	df000315 	stw	fp,12(sp)
 1003c44:	df000304 	addi	fp,sp,12
 1003c48:	e13ffd15 	stw	r4,-12(fp)
 1003c4c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1003c50:	00000706 	br	1003c70 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1003c54:	e0bffe17 	ldw	r2,-8(fp)
 1003c58:	1090000c 	andi	r2,r2,16384
 1003c5c:	1005003a 	cmpeq	r2,r2,zero
 1003c60:	1000031e 	bne	r2,zero,1003c70 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1003c64:	00bffd44 	movi	r2,-11
 1003c68:	e0bfff15 	stw	r2,-4(fp)
 1003c6c:	00000b06 	br	1003c9c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1003c70:	e0bffd17 	ldw	r2,-12(fp)
 1003c74:	10c00d17 	ldw	r3,52(r2)
 1003c78:	e0bffd17 	ldw	r2,-12(fp)
 1003c7c:	10800c17 	ldw	r2,48(r2)
 1003c80:	18800526 	beq	r3,r2,1003c98 <altera_avalon_jtag_uart_close+0x5c>
 1003c84:	e0bffd17 	ldw	r2,-12(fp)
 1003c88:	10c00917 	ldw	r3,36(r2)
 1003c8c:	e0bffd17 	ldw	r2,-12(fp)
 1003c90:	10800117 	ldw	r2,4(r2)
 1003c94:	18bfef36 	bltu	r3,r2,1003c54 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1003c98:	e03fff15 	stw	zero,-4(fp)
 1003c9c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003ca0:	e037883a 	mov	sp,fp
 1003ca4:	df000017 	ldw	fp,0(sp)
 1003ca8:	dec00104 	addi	sp,sp,4
 1003cac:	f800283a 	ret

01003cb0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1003cb0:	defff804 	addi	sp,sp,-32
 1003cb4:	df000715 	stw	fp,28(sp)
 1003cb8:	df000704 	addi	fp,sp,28
 1003cbc:	e13ffb15 	stw	r4,-20(fp)
 1003cc0:	e17ffc15 	stw	r5,-16(fp)
 1003cc4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1003cc8:	00bff9c4 	movi	r2,-25
 1003ccc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1003cd0:	e0bffc17 	ldw	r2,-16(fp)
 1003cd4:	e0bfff15 	stw	r2,-4(fp)
 1003cd8:	e0ffff17 	ldw	r3,-4(fp)
 1003cdc:	189a8060 	cmpeqi	r2,r3,27137
 1003ce0:	1000041e 	bne	r2,zero,1003cf4 <altera_avalon_jtag_uart_ioctl+0x44>
 1003ce4:	e0ffff17 	ldw	r3,-4(fp)
 1003ce8:	189a80a0 	cmpeqi	r2,r3,27138
 1003cec:	10001b1e 	bne	r2,zero,1003d5c <altera_avalon_jtag_uart_ioctl+0xac>
 1003cf0:	00002706 	br	1003d90 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1003cf4:	e0bffb17 	ldw	r2,-20(fp)
 1003cf8:	10c00117 	ldw	r3,4(r2)
 1003cfc:	00a00034 	movhi	r2,32768
 1003d00:	10bfffc4 	addi	r2,r2,-1
 1003d04:	18802226 	beq	r3,r2,1003d90 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1003d08:	e0bffd17 	ldw	r2,-12(fp)
 1003d0c:	10800017 	ldw	r2,0(r2)
 1003d10:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1003d14:	e0bff917 	ldw	r2,-28(fp)
 1003d18:	10800090 	cmplti	r2,r2,2
 1003d1c:	1000071e 	bne	r2,zero,1003d3c <altera_avalon_jtag_uart_ioctl+0x8c>
 1003d20:	e0fff917 	ldw	r3,-28(fp)
 1003d24:	00a00034 	movhi	r2,32768
 1003d28:	10bfffc4 	addi	r2,r2,-1
 1003d2c:	18800326 	beq	r3,r2,1003d3c <altera_avalon_jtag_uart_ioctl+0x8c>
 1003d30:	e0bff917 	ldw	r2,-28(fp)
 1003d34:	e0bffe15 	stw	r2,-8(fp)
 1003d38:	00000306 	br	1003d48 <altera_avalon_jtag_uart_ioctl+0x98>
 1003d3c:	00e00034 	movhi	r3,32768
 1003d40:	18ffff84 	addi	r3,r3,-2
 1003d44:	e0fffe15 	stw	r3,-8(fp)
 1003d48:	e0bffb17 	ldw	r2,-20(fp)
 1003d4c:	e0fffe17 	ldw	r3,-8(fp)
 1003d50:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1003d54:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1003d58:	00000d06 	br	1003d90 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1003d5c:	e0bffb17 	ldw	r2,-20(fp)
 1003d60:	10c00117 	ldw	r3,4(r2)
 1003d64:	00a00034 	movhi	r2,32768
 1003d68:	10bfffc4 	addi	r2,r2,-1
 1003d6c:	18800826 	beq	r3,r2,1003d90 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1003d70:	e13ffd17 	ldw	r4,-12(fp)
 1003d74:	e0bffb17 	ldw	r2,-20(fp)
 1003d78:	10c00917 	ldw	r3,36(r2)
 1003d7c:	e0bffb17 	ldw	r2,-20(fp)
 1003d80:	10800117 	ldw	r2,4(r2)
 1003d84:	1885803a 	cmpltu	r2,r3,r2
 1003d88:	20800015 	stw	r2,0(r4)
      rc = 0;
 1003d8c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1003d90:	e0bffa17 	ldw	r2,-24(fp)
}
 1003d94:	e037883a 	mov	sp,fp
 1003d98:	df000017 	ldw	fp,0(sp)
 1003d9c:	dec00104 	addi	sp,sp,4
 1003da0:	f800283a 	ret

01003da4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1003da4:	defff204 	addi	sp,sp,-56
 1003da8:	dfc00d15 	stw	ra,52(sp)
 1003dac:	df000c15 	stw	fp,48(sp)
 1003db0:	df000c04 	addi	fp,sp,48
 1003db4:	e13ffb15 	stw	r4,-20(fp)
 1003db8:	e17ffc15 	stw	r5,-16(fp)
 1003dbc:	e1bffd15 	stw	r6,-12(fp)
 1003dc0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1003dc4:	e0bffc17 	ldw	r2,-16(fp)
 1003dc8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1003dcc:	00004806 	br	1003ef0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1003dd0:	e0bffb17 	ldw	r2,-20(fp)
 1003dd4:	10800a17 	ldw	r2,40(r2)
 1003dd8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1003ddc:	e0bffb17 	ldw	r2,-20(fp)
 1003de0:	10800b17 	ldw	r2,44(r2)
 1003de4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1003de8:	e0fff717 	ldw	r3,-36(fp)
 1003dec:	e0bff617 	ldw	r2,-40(fp)
 1003df0:	18800536 	bltu	r3,r2,1003e08 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1003df4:	e0bff717 	ldw	r2,-36(fp)
 1003df8:	e0fff617 	ldw	r3,-40(fp)
 1003dfc:	10c5c83a 	sub	r2,r2,r3
 1003e00:	e0bff815 	stw	r2,-32(fp)
 1003e04:	00000406 	br	1003e18 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1003e08:	00820004 	movi	r2,2048
 1003e0c:	e0fff617 	ldw	r3,-40(fp)
 1003e10:	10c5c83a 	sub	r2,r2,r3
 1003e14:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1003e18:	e0bff817 	ldw	r2,-32(fp)
 1003e1c:	1005003a 	cmpeq	r2,r2,zero
 1003e20:	10001f1e 	bne	r2,zero,1003ea0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1003e24:	e0fffd17 	ldw	r3,-12(fp)
 1003e28:	e0bff817 	ldw	r2,-32(fp)
 1003e2c:	1880022e 	bgeu	r3,r2,1003e38 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1003e30:	e0bffd17 	ldw	r2,-12(fp)
 1003e34:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1003e38:	e0bffb17 	ldw	r2,-20(fp)
 1003e3c:	10c00e04 	addi	r3,r2,56
 1003e40:	e0bff617 	ldw	r2,-40(fp)
 1003e44:	1887883a 	add	r3,r3,r2
 1003e48:	e0bffa17 	ldw	r2,-24(fp)
 1003e4c:	1009883a 	mov	r4,r2
 1003e50:	180b883a 	mov	r5,r3
 1003e54:	e1bff817 	ldw	r6,-32(fp)
 1003e58:	10010080 	call	1001008 <memcpy>
      ptr   += n;
 1003e5c:	e0fff817 	ldw	r3,-32(fp)
 1003e60:	e0bffa17 	ldw	r2,-24(fp)
 1003e64:	10c5883a 	add	r2,r2,r3
 1003e68:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1003e6c:	e0fffd17 	ldw	r3,-12(fp)
 1003e70:	e0bff817 	ldw	r2,-32(fp)
 1003e74:	1885c83a 	sub	r2,r3,r2
 1003e78:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003e7c:	e0fff617 	ldw	r3,-40(fp)
 1003e80:	e0bff817 	ldw	r2,-32(fp)
 1003e84:	1885883a 	add	r2,r3,r2
 1003e88:	10c1ffcc 	andi	r3,r2,2047
 1003e8c:	e0bffb17 	ldw	r2,-20(fp)
 1003e90:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1003e94:	e0bffd17 	ldw	r2,-12(fp)
 1003e98:	10800048 	cmpgei	r2,r2,1
 1003e9c:	103fcc1e 	bne	r2,zero,1003dd0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1003ea0:	e0fffa17 	ldw	r3,-24(fp)
 1003ea4:	e0bffc17 	ldw	r2,-16(fp)
 1003ea8:	1880141e 	bne	r3,r2,1003efc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1003eac:	e0bffe17 	ldw	r2,-8(fp)
 1003eb0:	1090000c 	andi	r2,r2,16384
 1003eb4:	1004c03a 	cmpne	r2,r2,zero
 1003eb8:	1000101e 	bne	r2,zero,1003efc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1003ebc:	e0bffb17 	ldw	r2,-20(fp)
 1003ec0:	10c00a17 	ldw	r3,40(r2)
 1003ec4:	e0bff717 	ldw	r2,-36(fp)
 1003ec8:	1880051e 	bne	r3,r2,1003ee0 <altera_avalon_jtag_uart_read+0x13c>
 1003ecc:	e0bffb17 	ldw	r2,-20(fp)
 1003ed0:	10c00917 	ldw	r3,36(r2)
 1003ed4:	e0bffb17 	ldw	r2,-20(fp)
 1003ed8:	10800117 	ldw	r2,4(r2)
 1003edc:	18bff736 	bltu	r3,r2,1003ebc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1003ee0:	e0bffb17 	ldw	r2,-20(fp)
 1003ee4:	10c00a17 	ldw	r3,40(r2)
 1003ee8:	e0bff717 	ldw	r2,-36(fp)
 1003eec:	18800326 	beq	r3,r2,1003efc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1003ef0:	e0bffd17 	ldw	r2,-12(fp)
 1003ef4:	10800048 	cmpgei	r2,r2,1
 1003ef8:	103fb51e 	bne	r2,zero,1003dd0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1003efc:	e0fffa17 	ldw	r3,-24(fp)
 1003f00:	e0bffc17 	ldw	r2,-16(fp)
 1003f04:	18801926 	beq	r3,r2,1003f6c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003f08:	0005303a 	rdctl	r2,status
 1003f0c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003f10:	e0fff517 	ldw	r3,-44(fp)
 1003f14:	00bfff84 	movi	r2,-2
 1003f18:	1884703a 	and	r2,r3,r2
 1003f1c:	1001703a 	wrctl	status,r2
  
  return context;
 1003f20:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1003f24:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003f28:	e0bffb17 	ldw	r2,-20(fp)
 1003f2c:	10800817 	ldw	r2,32(r2)
 1003f30:	10c00054 	ori	r3,r2,1
 1003f34:	e0bffb17 	ldw	r2,-20(fp)
 1003f38:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1003f3c:	e0bffb17 	ldw	r2,-20(fp)
 1003f40:	10800017 	ldw	r2,0(r2)
 1003f44:	11000104 	addi	r4,r2,4
 1003f48:	e0bffb17 	ldw	r2,-20(fp)
 1003f4c:	10800817 	ldw	r2,32(r2)
 1003f50:	1007883a 	mov	r3,r2
 1003f54:	2005883a 	mov	r2,r4
 1003f58:	10c00035 	stwio	r3,0(r2)
 1003f5c:	e0bff917 	ldw	r2,-28(fp)
 1003f60:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003f64:	e0bff417 	ldw	r2,-48(fp)
 1003f68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1003f6c:	e0fffa17 	ldw	r3,-24(fp)
 1003f70:	e0bffc17 	ldw	r2,-16(fp)
 1003f74:	18800526 	beq	r3,r2,1003f8c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1003f78:	e0fffa17 	ldw	r3,-24(fp)
 1003f7c:	e0bffc17 	ldw	r2,-16(fp)
 1003f80:	1887c83a 	sub	r3,r3,r2
 1003f84:	e0ffff15 	stw	r3,-4(fp)
 1003f88:	00000906 	br	1003fb0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1003f8c:	e0bffe17 	ldw	r2,-8(fp)
 1003f90:	1090000c 	andi	r2,r2,16384
 1003f94:	1005003a 	cmpeq	r2,r2,zero
 1003f98:	1000031e 	bne	r2,zero,1003fa8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1003f9c:	00bffd44 	movi	r2,-11
 1003fa0:	e0bfff15 	stw	r2,-4(fp)
 1003fa4:	00000206 	br	1003fb0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1003fa8:	00bffec4 	movi	r2,-5
 1003fac:	e0bfff15 	stw	r2,-4(fp)
 1003fb0:	e0bfff17 	ldw	r2,-4(fp)
}
 1003fb4:	e037883a 	mov	sp,fp
 1003fb8:	dfc00117 	ldw	ra,4(sp)
 1003fbc:	df000017 	ldw	fp,0(sp)
 1003fc0:	dec00204 	addi	sp,sp,8
 1003fc4:	f800283a 	ret

01003fc8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1003fc8:	defff204 	addi	sp,sp,-56
 1003fcc:	dfc00d15 	stw	ra,52(sp)
 1003fd0:	df000c15 	stw	fp,48(sp)
 1003fd4:	df000c04 	addi	fp,sp,48
 1003fd8:	e13ffb15 	stw	r4,-20(fp)
 1003fdc:	e17ffc15 	stw	r5,-16(fp)
 1003fe0:	e1bffd15 	stw	r6,-12(fp)
 1003fe4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1003fe8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1003fec:	e0bffc17 	ldw	r2,-16(fp)
 1003ff0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1003ff4:	00003a06 	br	10040e0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1003ff8:	e0bffb17 	ldw	r2,-20(fp)
 1003ffc:	10800c17 	ldw	r2,48(r2)
 1004000:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1004004:	e0bffb17 	ldw	r2,-20(fp)
 1004008:	10800d17 	ldw	r2,52(r2)
 100400c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1004010:	e0fffa17 	ldw	r3,-24(fp)
 1004014:	e0bff917 	ldw	r2,-28(fp)
 1004018:	1880062e 	bgeu	r3,r2,1004034 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100401c:	e0fff917 	ldw	r3,-28(fp)
 1004020:	e0bffa17 	ldw	r2,-24(fp)
 1004024:	1885c83a 	sub	r2,r3,r2
 1004028:	10bfffc4 	addi	r2,r2,-1
 100402c:	e0bff815 	stw	r2,-32(fp)
 1004030:	00000c06 	br	1004064 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 1004034:	e0bff917 	ldw	r2,-28(fp)
 1004038:	1005003a 	cmpeq	r2,r2,zero
 100403c:	1000051e 	bne	r2,zero,1004054 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1004040:	00820004 	movi	r2,2048
 1004044:	e0fffa17 	ldw	r3,-24(fp)
 1004048:	10c5c83a 	sub	r2,r2,r3
 100404c:	e0bff815 	stw	r2,-32(fp)
 1004050:	00000406 	br	1004064 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1004054:	0081ffc4 	movi	r2,2047
 1004058:	e0fffa17 	ldw	r3,-24(fp)
 100405c:	10c5c83a 	sub	r2,r2,r3
 1004060:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1004064:	e0bff817 	ldw	r2,-32(fp)
 1004068:	1005003a 	cmpeq	r2,r2,zero
 100406c:	10001f1e 	bne	r2,zero,10040ec <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 1004070:	e0fffd17 	ldw	r3,-12(fp)
 1004074:	e0bff817 	ldw	r2,-32(fp)
 1004078:	1880022e 	bgeu	r3,r2,1004084 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100407c:	e0bffd17 	ldw	r2,-12(fp)
 1004080:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1004084:	e0bffb17 	ldw	r2,-20(fp)
 1004088:	10c20e04 	addi	r3,r2,2104
 100408c:	e0bffa17 	ldw	r2,-24(fp)
 1004090:	1885883a 	add	r2,r3,r2
 1004094:	e0fffc17 	ldw	r3,-16(fp)
 1004098:	1009883a 	mov	r4,r2
 100409c:	180b883a 	mov	r5,r3
 10040a0:	e1bff817 	ldw	r6,-32(fp)
 10040a4:	10010080 	call	1001008 <memcpy>
      ptr   += n;
 10040a8:	e0fff817 	ldw	r3,-32(fp)
 10040ac:	e0bffc17 	ldw	r2,-16(fp)
 10040b0:	10c5883a 	add	r2,r2,r3
 10040b4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 10040b8:	e0fffd17 	ldw	r3,-12(fp)
 10040bc:	e0bff817 	ldw	r2,-32(fp)
 10040c0:	1885c83a 	sub	r2,r3,r2
 10040c4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10040c8:	e0fffa17 	ldw	r3,-24(fp)
 10040cc:	e0bff817 	ldw	r2,-32(fp)
 10040d0:	1885883a 	add	r2,r3,r2
 10040d4:	10c1ffcc 	andi	r3,r2,2047
 10040d8:	e0bffb17 	ldw	r2,-20(fp)
 10040dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10040e0:	e0bffd17 	ldw	r2,-12(fp)
 10040e4:	10800048 	cmpgei	r2,r2,1
 10040e8:	103fc31e 	bne	r2,zero,1003ff8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10040ec:	0005303a 	rdctl	r2,status
 10040f0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10040f4:	e0fff517 	ldw	r3,-44(fp)
 10040f8:	00bfff84 	movi	r2,-2
 10040fc:	1884703a 	and	r2,r3,r2
 1004100:	1001703a 	wrctl	status,r2
  
  return context;
 1004104:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1004108:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100410c:	e0bffb17 	ldw	r2,-20(fp)
 1004110:	10800817 	ldw	r2,32(r2)
 1004114:	10c00094 	ori	r3,r2,2
 1004118:	e0bffb17 	ldw	r2,-20(fp)
 100411c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004120:	e0bffb17 	ldw	r2,-20(fp)
 1004124:	10800017 	ldw	r2,0(r2)
 1004128:	11000104 	addi	r4,r2,4
 100412c:	e0bffb17 	ldw	r2,-20(fp)
 1004130:	10800817 	ldw	r2,32(r2)
 1004134:	1007883a 	mov	r3,r2
 1004138:	2005883a 	mov	r2,r4
 100413c:	10c00035 	stwio	r3,0(r2)
 1004140:	e0bff717 	ldw	r2,-36(fp)
 1004144:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004148:	e0bff417 	ldw	r2,-48(fp)
 100414c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1004150:	e0bffd17 	ldw	r2,-12(fp)
 1004154:	10800050 	cmplti	r2,r2,1
 1004158:	1000111e 	bne	r2,zero,10041a0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100415c:	e0bffe17 	ldw	r2,-8(fp)
 1004160:	1090000c 	andi	r2,r2,16384
 1004164:	1004c03a 	cmpne	r2,r2,zero
 1004168:	1000101e 	bne	r2,zero,10041ac <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100416c:	e0bffb17 	ldw	r2,-20(fp)
 1004170:	10c00d17 	ldw	r3,52(r2)
 1004174:	e0bff917 	ldw	r2,-28(fp)
 1004178:	1880051e 	bne	r3,r2,1004190 <altera_avalon_jtag_uart_write+0x1c8>
 100417c:	e0bffb17 	ldw	r2,-20(fp)
 1004180:	10c00917 	ldw	r3,36(r2)
 1004184:	e0bffb17 	ldw	r2,-20(fp)
 1004188:	10800117 	ldw	r2,4(r2)
 100418c:	18bff736 	bltu	r3,r2,100416c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1004190:	e0bffb17 	ldw	r2,-20(fp)
 1004194:	10c00d17 	ldw	r3,52(r2)
 1004198:	e0bff917 	ldw	r2,-28(fp)
 100419c:	18800326 	beq	r3,r2,10041ac <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 10041a0:	e0bffd17 	ldw	r2,-12(fp)
 10041a4:	10800048 	cmpgei	r2,r2,1
 10041a8:	103fcd1e 	bne	r2,zero,10040e0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 10041ac:	e0fffc17 	ldw	r3,-16(fp)
 10041b0:	e0bff617 	ldw	r2,-40(fp)
 10041b4:	18800526 	beq	r3,r2,10041cc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 10041b8:	e0fffc17 	ldw	r3,-16(fp)
 10041bc:	e0bff617 	ldw	r2,-40(fp)
 10041c0:	1887c83a 	sub	r3,r3,r2
 10041c4:	e0ffff15 	stw	r3,-4(fp)
 10041c8:	00000906 	br	10041f0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 10041cc:	e0bffe17 	ldw	r2,-8(fp)
 10041d0:	1090000c 	andi	r2,r2,16384
 10041d4:	1005003a 	cmpeq	r2,r2,zero
 10041d8:	1000031e 	bne	r2,zero,10041e8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 10041dc:	00bffd44 	movi	r2,-11
 10041e0:	e0bfff15 	stw	r2,-4(fp)
 10041e4:	00000206 	br	10041f0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 10041e8:	00bffec4 	movi	r2,-5
 10041ec:	e0bfff15 	stw	r2,-4(fp)
 10041f0:	e0bfff17 	ldw	r2,-4(fp)
}
 10041f4:	e037883a 	mov	sp,fp
 10041f8:	dfc00117 	ldw	ra,4(sp)
 10041fc:	df000017 	ldw	fp,0(sp)
 1004200:	dec00204 	addi	sp,sp,8
 1004204:	f800283a 	ret

01004208 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1004208:	defff404 	addi	sp,sp,-48
 100420c:	df000b15 	stw	fp,44(sp)
 1004210:	df000b04 	addi	fp,sp,44
 1004214:	e13ffb15 	stw	r4,-20(fp)
 1004218:	e17ffc15 	stw	r5,-16(fp)
 100421c:	e1bffd15 	stw	r6,-12(fp)
 1004220:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1004224:	e03ff915 	stw	zero,-28(fp)
 1004228:	00804074 	movhi	r2,257
 100422c:	10a27704 	addi	r2,r2,-30244
 1004230:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1004234:	1005003a 	cmpeq	r2,r2,zero
 1004238:	1000411e 	bne	r2,zero,1004340 <alt_alarm_start+0x138>
  {
    if (alarm)
 100423c:	e0bffb17 	ldw	r2,-20(fp)
 1004240:	1005003a 	cmpeq	r2,r2,zero
 1004244:	10003b1e 	bne	r2,zero,1004334 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1004248:	e0fffb17 	ldw	r3,-20(fp)
 100424c:	e0bffd17 	ldw	r2,-12(fp)
 1004250:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1004254:	e0fffb17 	ldw	r3,-20(fp)
 1004258:	e0bffe17 	ldw	r2,-8(fp)
 100425c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004260:	0005303a 	rdctl	r2,status
 1004264:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004268:	e0fff817 	ldw	r3,-32(fp)
 100426c:	00bfff84 	movi	r2,-2
 1004270:	1884703a 	and	r2,r3,r2
 1004274:	1001703a 	wrctl	status,r2
  
  return context;
 1004278:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100427c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1004280:	00804074 	movhi	r2,257
 1004284:	10a27804 	addi	r2,r2,-30240
 1004288:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100428c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1004290:	e0fffc17 	ldw	r3,-16(fp)
 1004294:	e0bff917 	ldw	r2,-28(fp)
 1004298:	1885883a 	add	r2,r3,r2
 100429c:	10c00044 	addi	r3,r2,1
 10042a0:	e0bffb17 	ldw	r2,-20(fp)
 10042a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10042a8:	e0bffb17 	ldw	r2,-20(fp)
 10042ac:	10c00217 	ldw	r3,8(r2)
 10042b0:	e0bff917 	ldw	r2,-28(fp)
 10042b4:	1880042e 	bgeu	r3,r2,10042c8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 10042b8:	e0fffb17 	ldw	r3,-20(fp)
 10042bc:	00800044 	movi	r2,1
 10042c0:	18800405 	stb	r2,16(r3)
 10042c4:	00000206 	br	10042d0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10042c8:	e0bffb17 	ldw	r2,-20(fp)
 10042cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10042d0:	e0fffb17 	ldw	r3,-20(fp)
 10042d4:	00804034 	movhi	r2,256
 10042d8:	109bdb04 	addi	r2,r2,28524
 10042dc:	e0bff615 	stw	r2,-40(fp)
 10042e0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10042e4:	e0fff717 	ldw	r3,-36(fp)
 10042e8:	e0bff617 	ldw	r2,-40(fp)
 10042ec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10042f0:	e0bff617 	ldw	r2,-40(fp)
 10042f4:	10c00017 	ldw	r3,0(r2)
 10042f8:	e0bff717 	ldw	r2,-36(fp)
 10042fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004300:	e0bff617 	ldw	r2,-40(fp)
 1004304:	10c00017 	ldw	r3,0(r2)
 1004308:	e0bff717 	ldw	r2,-36(fp)
 100430c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1004310:	e0fff617 	ldw	r3,-40(fp)
 1004314:	e0bff717 	ldw	r2,-36(fp)
 1004318:	18800015 	stw	r2,0(r3)
 100431c:	e0bffa17 	ldw	r2,-24(fp)
 1004320:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004324:	e0bff517 	ldw	r2,-44(fp)
 1004328:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100432c:	e03fff15 	stw	zero,-4(fp)
 1004330:	00000506 	br	1004348 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1004334:	00bffa84 	movi	r2,-22
 1004338:	e0bfff15 	stw	r2,-4(fp)
 100433c:	00000206 	br	1004348 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1004340:	00bfde84 	movi	r2,-134
 1004344:	e0bfff15 	stw	r2,-4(fp)
 1004348:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100434c:	e037883a 	mov	sp,fp
 1004350:	df000017 	ldw	fp,0(sp)
 1004354:	dec00104 	addi	sp,sp,4
 1004358:	f800283a 	ret

0100435c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100435c:	deffff04 	addi	sp,sp,-4
 1004360:	df000015 	stw	fp,0(sp)
 1004364:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1004368:	e037883a 	mov	sp,fp
 100436c:	df000017 	ldw	fp,0(sp)
 1004370:	dec00104 	addi	sp,sp,4
 1004374:	f800283a 	ret

01004378 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1004378:	defff904 	addi	sp,sp,-28
 100437c:	dfc00615 	stw	ra,24(sp)
 1004380:	df000515 	stw	fp,20(sp)
 1004384:	df000504 	addi	fp,sp,20
 1004388:	e13ffd15 	stw	r4,-12(fp)
 100438c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1004390:	e0bffd17 	ldw	r2,-12(fp)
 1004394:	1005003a 	cmpeq	r2,r2,zero
 1004398:	1000041e 	bne	r2,zero,10043ac <alt_dev_llist_insert+0x34>
 100439c:	e0bffd17 	ldw	r2,-12(fp)
 10043a0:	10800217 	ldw	r2,8(r2)
 10043a4:	1004c03a 	cmpne	r2,r2,zero
 10043a8:	1000071e 	bne	r2,zero,10043c8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 10043ac:	100442c0 	call	100442c <alt_get_errno>
 10043b0:	1007883a 	mov	r3,r2
 10043b4:	00800584 	movi	r2,22
 10043b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10043bc:	00bffa84 	movi	r2,-22
 10043c0:	e0bfff15 	stw	r2,-4(fp)
 10043c4:	00001306 	br	1004414 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10043c8:	e0fffd17 	ldw	r3,-12(fp)
 10043cc:	e0bffe17 	ldw	r2,-8(fp)
 10043d0:	e0bffb15 	stw	r2,-20(fp)
 10043d4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10043d8:	e0fffc17 	ldw	r3,-16(fp)
 10043dc:	e0bffb17 	ldw	r2,-20(fp)
 10043e0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10043e4:	e0bffb17 	ldw	r2,-20(fp)
 10043e8:	10c00017 	ldw	r3,0(r2)
 10043ec:	e0bffc17 	ldw	r2,-16(fp)
 10043f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10043f4:	e0bffb17 	ldw	r2,-20(fp)
 10043f8:	10c00017 	ldw	r3,0(r2)
 10043fc:	e0bffc17 	ldw	r2,-16(fp)
 1004400:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1004404:	e0fffb17 	ldw	r3,-20(fp)
 1004408:	e0bffc17 	ldw	r2,-16(fp)
 100440c:	18800015 	stw	r2,0(r3)

  return 0;  
 1004410:	e03fff15 	stw	zero,-4(fp)
 1004414:	e0bfff17 	ldw	r2,-4(fp)
}
 1004418:	e037883a 	mov	sp,fp
 100441c:	dfc00117 	ldw	ra,4(sp)
 1004420:	df000017 	ldw	fp,0(sp)
 1004424:	dec00204 	addi	sp,sp,8
 1004428:	f800283a 	ret

0100442c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100442c:	defffd04 	addi	sp,sp,-12
 1004430:	dfc00215 	stw	ra,8(sp)
 1004434:	df000115 	stw	fp,4(sp)
 1004438:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100443c:	00804034 	movhi	r2,256
 1004440:	109bd804 	addi	r2,r2,28512
 1004444:	10800017 	ldw	r2,0(r2)
 1004448:	1005003a 	cmpeq	r2,r2,zero
 100444c:	1000061e 	bne	r2,zero,1004468 <alt_get_errno+0x3c>
 1004450:	00804034 	movhi	r2,256
 1004454:	109bd804 	addi	r2,r2,28512
 1004458:	10800017 	ldw	r2,0(r2)
 100445c:	103ee83a 	callr	r2
 1004460:	e0bfff15 	stw	r2,-4(fp)
 1004464:	00000306 	br	1004474 <alt_get_errno+0x48>
 1004468:	00804074 	movhi	r2,257
 100446c:	10a27204 	addi	r2,r2,-30264
 1004470:	e0bfff15 	stw	r2,-4(fp)
 1004474:	e0bfff17 	ldw	r2,-4(fp)
}
 1004478:	e037883a 	mov	sp,fp
 100447c:	dfc00117 	ldw	ra,4(sp)
 1004480:	df000017 	ldw	fp,0(sp)
 1004484:	dec00204 	addi	sp,sp,8
 1004488:	f800283a 	ret

0100448c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100448c:	defffd04 	addi	sp,sp,-12
 1004490:	dfc00215 	stw	ra,8(sp)
 1004494:	df000115 	stw	fp,4(sp)
 1004498:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100449c:	00bfff04 	movi	r2,-4
 10044a0:	00c04034 	movhi	r3,256
 10044a4:	18d53104 	addi	r3,r3,21700
 10044a8:	1885883a 	add	r2,r3,r2
 10044ac:	e0bfff15 	stw	r2,-4(fp)
 10044b0:	00000606 	br	10044cc <_do_ctors+0x40>
        (*ctor) (); 
 10044b4:	e0bfff17 	ldw	r2,-4(fp)
 10044b8:	10800017 	ldw	r2,0(r2)
 10044bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10044c0:	e0bfff17 	ldw	r2,-4(fp)
 10044c4:	10bfff04 	addi	r2,r2,-4
 10044c8:	e0bfff15 	stw	r2,-4(fp)
 10044cc:	e0ffff17 	ldw	r3,-4(fp)
 10044d0:	00804034 	movhi	r2,256
 10044d4:	10953004 	addi	r2,r2,21696
 10044d8:	18bff62e 	bgeu	r3,r2,10044b4 <_do_ctors+0x28>
        (*ctor) (); 
}
 10044dc:	e037883a 	mov	sp,fp
 10044e0:	dfc00117 	ldw	ra,4(sp)
 10044e4:	df000017 	ldw	fp,0(sp)
 10044e8:	dec00204 	addi	sp,sp,8
 10044ec:	f800283a 	ret

010044f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10044f0:	defffd04 	addi	sp,sp,-12
 10044f4:	dfc00215 	stw	ra,8(sp)
 10044f8:	df000115 	stw	fp,4(sp)
 10044fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004500:	00bfff04 	movi	r2,-4
 1004504:	00c04034 	movhi	r3,256
 1004508:	18d53104 	addi	r3,r3,21700
 100450c:	1885883a 	add	r2,r3,r2
 1004510:	e0bfff15 	stw	r2,-4(fp)
 1004514:	00000606 	br	1004530 <_do_dtors+0x40>
        (*dtor) (); 
 1004518:	e0bfff17 	ldw	r2,-4(fp)
 100451c:	10800017 	ldw	r2,0(r2)
 1004520:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004524:	e0bfff17 	ldw	r2,-4(fp)
 1004528:	10bfff04 	addi	r2,r2,-4
 100452c:	e0bfff15 	stw	r2,-4(fp)
 1004530:	e0ffff17 	ldw	r3,-4(fp)
 1004534:	00804034 	movhi	r2,256
 1004538:	10953104 	addi	r2,r2,21700
 100453c:	18bff62e 	bgeu	r3,r2,1004518 <_do_dtors+0x28>
        (*dtor) (); 
}
 1004540:	e037883a 	mov	sp,fp
 1004544:	dfc00117 	ldw	ra,4(sp)
 1004548:	df000017 	ldw	fp,0(sp)
 100454c:	dec00204 	addi	sp,sp,8
 1004550:	f800283a 	ret

01004554 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1004554:	deffff04 	addi	sp,sp,-4
 1004558:	df000015 	stw	fp,0(sp)
 100455c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1004560:	e037883a 	mov	sp,fp
 1004564:	df000017 	ldw	fp,0(sp)
 1004568:	dec00104 	addi	sp,sp,4
 100456c:	f800283a 	ret

01004570 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1004570:	defff904 	addi	sp,sp,-28
 1004574:	dfc00615 	stw	ra,24(sp)
 1004578:	df000515 	stw	fp,20(sp)
 100457c:	df000504 	addi	fp,sp,20
 1004580:	e13ffc15 	stw	r4,-16(fp)
 1004584:	e17ffd15 	stw	r5,-12(fp)
 1004588:	e1bffe15 	stw	r6,-8(fp)
 100458c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1004590:	e0800217 	ldw	r2,8(fp)
 1004594:	d8800015 	stw	r2,0(sp)
 1004598:	e13ffc17 	ldw	r4,-16(fp)
 100459c:	e17ffd17 	ldw	r5,-12(fp)
 10045a0:	e1bffe17 	ldw	r6,-8(fp)
 10045a4:	e1ffff17 	ldw	r7,-4(fp)
 10045a8:	10047440 	call	1004744 <alt_iic_isr_register>
}  
 10045ac:	e037883a 	mov	sp,fp
 10045b0:	dfc00117 	ldw	ra,4(sp)
 10045b4:	df000017 	ldw	fp,0(sp)
 10045b8:	dec00204 	addi	sp,sp,8
 10045bc:	f800283a 	ret

010045c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 10045c0:	defff904 	addi	sp,sp,-28
 10045c4:	df000615 	stw	fp,24(sp)
 10045c8:	df000604 	addi	fp,sp,24
 10045cc:	e13ffe15 	stw	r4,-8(fp)
 10045d0:	e17fff15 	stw	r5,-4(fp)
 10045d4:	e0bfff17 	ldw	r2,-4(fp)
 10045d8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10045dc:	0005303a 	rdctl	r2,status
 10045e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10045e4:	e0fffb17 	ldw	r3,-20(fp)
 10045e8:	00bfff84 	movi	r2,-2
 10045ec:	1884703a 	and	r2,r3,r2
 10045f0:	1001703a 	wrctl	status,r2
  
  return context;
 10045f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10045f8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 10045fc:	e0fffc17 	ldw	r3,-16(fp)
 1004600:	00800044 	movi	r2,1
 1004604:	10c4983a 	sll	r2,r2,r3
 1004608:	1007883a 	mov	r3,r2
 100460c:	00804074 	movhi	r2,257
 1004610:	10a27604 	addi	r2,r2,-30248
 1004614:	10800017 	ldw	r2,0(r2)
 1004618:	1886b03a 	or	r3,r3,r2
 100461c:	00804074 	movhi	r2,257
 1004620:	10a27604 	addi	r2,r2,-30248
 1004624:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1004628:	00804074 	movhi	r2,257
 100462c:	10a27604 	addi	r2,r2,-30248
 1004630:	10800017 	ldw	r2,0(r2)
 1004634:	100170fa 	wrctl	ienable,r2
 1004638:	e0bffd17 	ldw	r2,-12(fp)
 100463c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004640:	e0bffa17 	ldw	r2,-24(fp)
 1004644:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1004648:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 100464c:	e037883a 	mov	sp,fp
 1004650:	df000017 	ldw	fp,0(sp)
 1004654:	dec00104 	addi	sp,sp,4
 1004658:	f800283a 	ret

0100465c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100465c:	defff904 	addi	sp,sp,-28
 1004660:	df000615 	stw	fp,24(sp)
 1004664:	df000604 	addi	fp,sp,24
 1004668:	e13ffe15 	stw	r4,-8(fp)
 100466c:	e17fff15 	stw	r5,-4(fp)
 1004670:	e0bfff17 	ldw	r2,-4(fp)
 1004674:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004678:	0005303a 	rdctl	r2,status
 100467c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004680:	e0fffb17 	ldw	r3,-20(fp)
 1004684:	00bfff84 	movi	r2,-2
 1004688:	1884703a 	and	r2,r3,r2
 100468c:	1001703a 	wrctl	status,r2
  
  return context;
 1004690:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1004694:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1004698:	e0fffc17 	ldw	r3,-16(fp)
 100469c:	00800044 	movi	r2,1
 10046a0:	10c4983a 	sll	r2,r2,r3
 10046a4:	0084303a 	nor	r2,zero,r2
 10046a8:	1007883a 	mov	r3,r2
 10046ac:	00804074 	movhi	r2,257
 10046b0:	10a27604 	addi	r2,r2,-30248
 10046b4:	10800017 	ldw	r2,0(r2)
 10046b8:	1886703a 	and	r3,r3,r2
 10046bc:	00804074 	movhi	r2,257
 10046c0:	10a27604 	addi	r2,r2,-30248
 10046c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10046c8:	00804074 	movhi	r2,257
 10046cc:	10a27604 	addi	r2,r2,-30248
 10046d0:	10800017 	ldw	r2,0(r2)
 10046d4:	100170fa 	wrctl	ienable,r2
 10046d8:	e0bffd17 	ldw	r2,-12(fp)
 10046dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10046e0:	e0bffa17 	ldw	r2,-24(fp)
 10046e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10046e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 10046ec:	e037883a 	mov	sp,fp
 10046f0:	df000017 	ldw	fp,0(sp)
 10046f4:	dec00104 	addi	sp,sp,4
 10046f8:	f800283a 	ret

010046fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 10046fc:	defffc04 	addi	sp,sp,-16
 1004700:	df000315 	stw	fp,12(sp)
 1004704:	df000304 	addi	fp,sp,12
 1004708:	e13ffe15 	stw	r4,-8(fp)
 100470c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1004710:	000530fa 	rdctl	r2,ienable
 1004714:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1004718:	e0ffff17 	ldw	r3,-4(fp)
 100471c:	00800044 	movi	r2,1
 1004720:	10c4983a 	sll	r2,r2,r3
 1004724:	1007883a 	mov	r3,r2
 1004728:	e0bffd17 	ldw	r2,-12(fp)
 100472c:	1884703a 	and	r2,r3,r2
 1004730:	1004c03a 	cmpne	r2,r2,zero
}
 1004734:	e037883a 	mov	sp,fp
 1004738:	df000017 	ldw	fp,0(sp)
 100473c:	dec00104 	addi	sp,sp,4
 1004740:	f800283a 	ret

01004744 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1004744:	defff404 	addi	sp,sp,-48
 1004748:	dfc00b15 	stw	ra,44(sp)
 100474c:	df000a15 	stw	fp,40(sp)
 1004750:	df000a04 	addi	fp,sp,40
 1004754:	e13ffb15 	stw	r4,-20(fp)
 1004758:	e17ffc15 	stw	r5,-16(fp)
 100475c:	e1bffd15 	stw	r6,-12(fp)
 1004760:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1004764:	00bffa84 	movi	r2,-22
 1004768:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100476c:	e0bffc17 	ldw	r2,-16(fp)
 1004770:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1004774:	e0bff917 	ldw	r2,-28(fp)
 1004778:	10800808 	cmpgei	r2,r2,32
 100477c:	1000291e 	bne	r2,zero,1004824 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004780:	0005303a 	rdctl	r2,status
 1004784:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004788:	e0fff717 	ldw	r3,-36(fp)
 100478c:	00bfff84 	movi	r2,-2
 1004790:	1884703a 	and	r2,r3,r2
 1004794:	1001703a 	wrctl	status,r2
  
  return context;
 1004798:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100479c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 10047a0:	e0bff917 	ldw	r2,-28(fp)
 10047a4:	00c04074 	movhi	r3,257
 10047a8:	18e28304 	addi	r3,r3,-30196
 10047ac:	100490fa 	slli	r2,r2,3
 10047b0:	10c7883a 	add	r3,r2,r3
 10047b4:	e0bffd17 	ldw	r2,-12(fp)
 10047b8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 10047bc:	e0bff917 	ldw	r2,-28(fp)
 10047c0:	00c04074 	movhi	r3,257
 10047c4:	18e28304 	addi	r3,r3,-30196
 10047c8:	100490fa 	slli	r2,r2,3
 10047cc:	10c5883a 	add	r2,r2,r3
 10047d0:	10c00104 	addi	r3,r2,4
 10047d4:	e0bffe17 	ldw	r2,-8(fp)
 10047d8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10047dc:	e0bffd17 	ldw	r2,-12(fp)
 10047e0:	1005003a 	cmpeq	r2,r2,zero
 10047e4:	1000051e 	bne	r2,zero,10047fc <alt_iic_isr_register+0xb8>
 10047e8:	e17ff917 	ldw	r5,-28(fp)
 10047ec:	e13ffb17 	ldw	r4,-20(fp)
 10047f0:	10045c00 	call	10045c0 <alt_ic_irq_enable>
 10047f4:	e0bfff15 	stw	r2,-4(fp)
 10047f8:	00000406 	br	100480c <alt_iic_isr_register+0xc8>
 10047fc:	e17ff917 	ldw	r5,-28(fp)
 1004800:	e13ffb17 	ldw	r4,-20(fp)
 1004804:	100465c0 	call	100465c <alt_ic_irq_disable>
 1004808:	e0bfff15 	stw	r2,-4(fp)
 100480c:	e0bfff17 	ldw	r2,-4(fp)
 1004810:	e0bffa15 	stw	r2,-24(fp)
 1004814:	e0bff817 	ldw	r2,-32(fp)
 1004818:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100481c:	e0bff617 	ldw	r2,-40(fp)
 1004820:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1004824:	e0bffa17 	ldw	r2,-24(fp)
}
 1004828:	e037883a 	mov	sp,fp
 100482c:	dfc00117 	ldw	ra,4(sp)
 1004830:	df000017 	ldw	fp,0(sp)
 1004834:	dec00204 	addi	sp,sp,8
 1004838:	f800283a 	ret

0100483c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100483c:	defff804 	addi	sp,sp,-32
 1004840:	dfc00715 	stw	ra,28(sp)
 1004844:	df000615 	stw	fp,24(sp)
 1004848:	dc000515 	stw	r16,20(sp)
 100484c:	df000504 	addi	fp,sp,20
 1004850:	e13ffc15 	stw	r4,-16(fp)
 1004854:	e17ffd15 	stw	r5,-12(fp)
 1004858:	e1bffe15 	stw	r6,-8(fp)
 100485c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1004860:	e13ffd17 	ldw	r4,-12(fp)
 1004864:	e17ffe17 	ldw	r5,-8(fp)
 1004868:	e1bfff17 	ldw	r6,-4(fp)
 100486c:	1004a840 	call	1004a84 <open>
 1004870:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1004874:	e0bffb17 	ldw	r2,-20(fp)
 1004878:	1004803a 	cmplt	r2,r2,zero
 100487c:	10001f1e 	bne	r2,zero,10048fc <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1004880:	e13ffb17 	ldw	r4,-20(fp)
 1004884:	04004034 	movhi	r16,256
 1004888:	84175704 	addi	r16,r16,23900
 100488c:	01400304 	movi	r5,12
 1004890:	1002b640 	call	1002b64 <__mulsi3>
 1004894:	1405883a 	add	r2,r2,r16
 1004898:	10c00017 	ldw	r3,0(r2)
 100489c:	e0bffc17 	ldw	r2,-16(fp)
 10048a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10048a4:	e13ffb17 	ldw	r4,-20(fp)
 10048a8:	04004034 	movhi	r16,256
 10048ac:	84175704 	addi	r16,r16,23900
 10048b0:	01400304 	movi	r5,12
 10048b4:	1002b640 	call	1002b64 <__mulsi3>
 10048b8:	1405883a 	add	r2,r2,r16
 10048bc:	10800104 	addi	r2,r2,4
 10048c0:	10c00017 	ldw	r3,0(r2)
 10048c4:	e0bffc17 	ldw	r2,-16(fp)
 10048c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10048cc:	e13ffb17 	ldw	r4,-20(fp)
 10048d0:	04004034 	movhi	r16,256
 10048d4:	84175704 	addi	r16,r16,23900
 10048d8:	01400304 	movi	r5,12
 10048dc:	1002b640 	call	1002b64 <__mulsi3>
 10048e0:	1405883a 	add	r2,r2,r16
 10048e4:	10800204 	addi	r2,r2,8
 10048e8:	10c00017 	ldw	r3,0(r2)
 10048ec:	e0bffc17 	ldw	r2,-16(fp)
 10048f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10048f4:	e13ffb17 	ldw	r4,-20(fp)
 10048f8:	10033f40 	call	10033f4 <alt_release_fd>
  }
} 
 10048fc:	e037883a 	mov	sp,fp
 1004900:	dfc00217 	ldw	ra,8(sp)
 1004904:	df000117 	ldw	fp,4(sp)
 1004908:	dc000017 	ldw	r16,0(sp)
 100490c:	dec00304 	addi	sp,sp,12
 1004910:	f800283a 	ret

01004914 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1004914:	defffb04 	addi	sp,sp,-20
 1004918:	dfc00415 	stw	ra,16(sp)
 100491c:	df000315 	stw	fp,12(sp)
 1004920:	df000304 	addi	fp,sp,12
 1004924:	e13ffd15 	stw	r4,-12(fp)
 1004928:	e17ffe15 	stw	r5,-8(fp)
 100492c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1004930:	01004034 	movhi	r4,256
 1004934:	21175a04 	addi	r4,r4,23912
 1004938:	e17ffd17 	ldw	r5,-12(fp)
 100493c:	01800044 	movi	r6,1
 1004940:	01c07fc4 	movi	r7,511
 1004944:	100483c0 	call	100483c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1004948:	01004034 	movhi	r4,256
 100494c:	21175704 	addi	r4,r4,23900
 1004950:	e17ffe17 	ldw	r5,-8(fp)
 1004954:	000d883a 	mov	r6,zero
 1004958:	01c07fc4 	movi	r7,511
 100495c:	100483c0 	call	100483c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1004960:	01004034 	movhi	r4,256
 1004964:	21175d04 	addi	r4,r4,23924
 1004968:	e17fff17 	ldw	r5,-4(fp)
 100496c:	01800044 	movi	r6,1
 1004970:	01c07fc4 	movi	r7,511
 1004974:	100483c0 	call	100483c <alt_open_fd>
}  
 1004978:	e037883a 	mov	sp,fp
 100497c:	dfc00117 	ldw	ra,4(sp)
 1004980:	df000017 	ldw	fp,0(sp)
 1004984:	dec00204 	addi	sp,sp,8
 1004988:	f800283a 	ret

0100498c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100498c:	defffa04 	addi	sp,sp,-24
 1004990:	dfc00515 	stw	ra,20(sp)
 1004994:	df000415 	stw	fp,16(sp)
 1004998:	dc000315 	stw	r16,12(sp)
 100499c:	df000304 	addi	fp,sp,12
 10049a0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10049a4:	e0bffe17 	ldw	r2,-8(fp)
 10049a8:	10800217 	ldw	r2,8(r2)
 10049ac:	10d00034 	orhi	r3,r2,16384
 10049b0:	e0bffe17 	ldw	r2,-8(fp)
 10049b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10049b8:	e03ffd15 	stw	zero,-12(fp)
 10049bc:	00002306 	br	1004a4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10049c0:	e13ffd17 	ldw	r4,-12(fp)
 10049c4:	04004034 	movhi	r16,256
 10049c8:	84175704 	addi	r16,r16,23900
 10049cc:	01400304 	movi	r5,12
 10049d0:	1002b640 	call	1002b64 <__mulsi3>
 10049d4:	1405883a 	add	r2,r2,r16
 10049d8:	10c00017 	ldw	r3,0(r2)
 10049dc:	e0bffe17 	ldw	r2,-8(fp)
 10049e0:	10800017 	ldw	r2,0(r2)
 10049e4:	1880161e 	bne	r3,r2,1004a40 <alt_file_locked+0xb4>
 10049e8:	e13ffd17 	ldw	r4,-12(fp)
 10049ec:	04004034 	movhi	r16,256
 10049f0:	84175704 	addi	r16,r16,23900
 10049f4:	01400304 	movi	r5,12
 10049f8:	1002b640 	call	1002b64 <__mulsi3>
 10049fc:	1405883a 	add	r2,r2,r16
 1004a00:	10800204 	addi	r2,r2,8
 1004a04:	10800017 	ldw	r2,0(r2)
 1004a08:	1004403a 	cmpge	r2,r2,zero
 1004a0c:	10000c1e 	bne	r2,zero,1004a40 <alt_file_locked+0xb4>
 1004a10:	e13ffd17 	ldw	r4,-12(fp)
 1004a14:	01400304 	movi	r5,12
 1004a18:	1002b640 	call	1002b64 <__mulsi3>
 1004a1c:	1007883a 	mov	r3,r2
 1004a20:	00804034 	movhi	r2,256
 1004a24:	10975704 	addi	r2,r2,23900
 1004a28:	1887883a 	add	r3,r3,r2
 1004a2c:	e0bffe17 	ldw	r2,-8(fp)
 1004a30:	18800326 	beq	r3,r2,1004a40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1004a34:	00bffcc4 	movi	r2,-13
 1004a38:	e0bfff15 	stw	r2,-4(fp)
 1004a3c:	00000a06 	br	1004a68 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1004a40:	e0bffd17 	ldw	r2,-12(fp)
 1004a44:	10800044 	addi	r2,r2,1
 1004a48:	e0bffd15 	stw	r2,-12(fp)
 1004a4c:	00804034 	movhi	r2,256
 1004a50:	109bd704 	addi	r2,r2,28508
 1004a54:	10800017 	ldw	r2,0(r2)
 1004a58:	1007883a 	mov	r3,r2
 1004a5c:	e0bffd17 	ldw	r2,-12(fp)
 1004a60:	18bfd72e 	bgeu	r3,r2,10049c0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1004a64:	e03fff15 	stw	zero,-4(fp)
 1004a68:	e0bfff17 	ldw	r2,-4(fp)
}
 1004a6c:	e037883a 	mov	sp,fp
 1004a70:	dfc00217 	ldw	ra,8(sp)
 1004a74:	df000117 	ldw	fp,4(sp)
 1004a78:	dc000017 	ldw	r16,0(sp)
 1004a7c:	dec00304 	addi	sp,sp,12
 1004a80:	f800283a 	ret

01004a84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1004a84:	defff404 	addi	sp,sp,-48
 1004a88:	dfc00b15 	stw	ra,44(sp)
 1004a8c:	df000a15 	stw	fp,40(sp)
 1004a90:	df000a04 	addi	fp,sp,40
 1004a94:	e13ffb15 	stw	r4,-20(fp)
 1004a98:	e17ffc15 	stw	r5,-16(fp)
 1004a9c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1004aa0:	00bfffc4 	movi	r2,-1
 1004aa4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1004aa8:	00bffb44 	movi	r2,-19
 1004aac:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1004ab0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1004ab4:	e13ffb17 	ldw	r4,-20(fp)
 1004ab8:	01404034 	movhi	r5,256
 1004abc:	295bd504 	addi	r5,r5,28500
 1004ac0:	1004e340 	call	1004e34 <alt_find_dev>
 1004ac4:	e0bffa15 	stw	r2,-24(fp)
 1004ac8:	e0bffa17 	ldw	r2,-24(fp)
 1004acc:	1004c03a 	cmpne	r2,r2,zero
 1004ad0:	1000051e 	bne	r2,zero,1004ae8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1004ad4:	e13ffb17 	ldw	r4,-20(fp)
 1004ad8:	1004ec80 	call	1004ec8 <alt_find_file>
 1004adc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1004ae0:	00800044 	movi	r2,1
 1004ae4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1004ae8:	e0bffa17 	ldw	r2,-24(fp)
 1004aec:	1005003a 	cmpeq	r2,r2,zero
 1004af0:	1000311e 	bne	r2,zero,1004bb8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1004af4:	e13ffa17 	ldw	r4,-24(fp)
 1004af8:	1004fe80 	call	1004fe8 <alt_get_fd>
 1004afc:	e0bff815 	stw	r2,-32(fp)
 1004b00:	e0bff817 	ldw	r2,-32(fp)
 1004b04:	1004403a 	cmpge	r2,r2,zero
 1004b08:	1000031e 	bne	r2,zero,1004b18 <open+0x94>
    {
      status = index;
 1004b0c:	e0bff817 	ldw	r2,-32(fp)
 1004b10:	e0bff715 	stw	r2,-36(fp)
 1004b14:	00002a06 	br	1004bc0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1004b18:	e13ff817 	ldw	r4,-32(fp)
 1004b1c:	01400304 	movi	r5,12
 1004b20:	1002b640 	call	1002b64 <__mulsi3>
 1004b24:	1007883a 	mov	r3,r2
 1004b28:	00804034 	movhi	r2,256
 1004b2c:	10975704 	addi	r2,r2,23900
 1004b30:	1885883a 	add	r2,r3,r2
 1004b34:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1004b38:	e0fffc17 	ldw	r3,-16(fp)
 1004b3c:	00900034 	movhi	r2,16384
 1004b40:	10bfffc4 	addi	r2,r2,-1
 1004b44:	1886703a 	and	r3,r3,r2
 1004b48:	e0bff917 	ldw	r2,-28(fp)
 1004b4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1004b50:	e0bff617 	ldw	r2,-40(fp)
 1004b54:	1004c03a 	cmpne	r2,r2,zero
 1004b58:	1000061e 	bne	r2,zero,1004b74 <open+0xf0>
 1004b5c:	e13ff917 	ldw	r4,-28(fp)
 1004b60:	100498c0 	call	100498c <alt_file_locked>
 1004b64:	e0bff715 	stw	r2,-36(fp)
 1004b68:	e0bff717 	ldw	r2,-36(fp)
 1004b6c:	1004803a 	cmplt	r2,r2,zero
 1004b70:	1000131e 	bne	r2,zero,1004bc0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1004b74:	e0bffa17 	ldw	r2,-24(fp)
 1004b78:	10800317 	ldw	r2,12(r2)
 1004b7c:	1005003a 	cmpeq	r2,r2,zero
 1004b80:	1000091e 	bne	r2,zero,1004ba8 <open+0x124>
 1004b84:	e0bffa17 	ldw	r2,-24(fp)
 1004b88:	10800317 	ldw	r2,12(r2)
 1004b8c:	e13ff917 	ldw	r4,-28(fp)
 1004b90:	e17ffb17 	ldw	r5,-20(fp)
 1004b94:	e1bffc17 	ldw	r6,-16(fp)
 1004b98:	e1fffd17 	ldw	r7,-12(fp)
 1004b9c:	103ee83a 	callr	r2
 1004ba0:	e0bfff15 	stw	r2,-4(fp)
 1004ba4:	00000106 	br	1004bac <open+0x128>
 1004ba8:	e03fff15 	stw	zero,-4(fp)
 1004bac:	e0bfff17 	ldw	r2,-4(fp)
 1004bb0:	e0bff715 	stw	r2,-36(fp)
 1004bb4:	00000206 	br	1004bc0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1004bb8:	00bffb44 	movi	r2,-19
 1004bbc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1004bc0:	e0bff717 	ldw	r2,-36(fp)
 1004bc4:	1004403a 	cmpge	r2,r2,zero
 1004bc8:	1000091e 	bne	r2,zero,1004bf0 <open+0x16c>
  {
    alt_release_fd (index);  
 1004bcc:	e13ff817 	ldw	r4,-32(fp)
 1004bd0:	10033f40 	call	10033f4 <alt_release_fd>
    ALT_ERRNO = -status;
 1004bd4:	1004c100 	call	1004c10 <alt_get_errno>
 1004bd8:	e0fff717 	ldw	r3,-36(fp)
 1004bdc:	00c7c83a 	sub	r3,zero,r3
 1004be0:	10c00015 	stw	r3,0(r2)
    return -1;
 1004be4:	00bfffc4 	movi	r2,-1
 1004be8:	e0bffe15 	stw	r2,-8(fp)
 1004bec:	00000206 	br	1004bf8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1004bf0:	e0bff817 	ldw	r2,-32(fp)
 1004bf4:	e0bffe15 	stw	r2,-8(fp)
 1004bf8:	e0bffe17 	ldw	r2,-8(fp)
}
 1004bfc:	e037883a 	mov	sp,fp
 1004c00:	dfc00117 	ldw	ra,4(sp)
 1004c04:	df000017 	ldw	fp,0(sp)
 1004c08:	dec00204 	addi	sp,sp,8
 1004c0c:	f800283a 	ret

01004c10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004c10:	defffd04 	addi	sp,sp,-12
 1004c14:	dfc00215 	stw	ra,8(sp)
 1004c18:	df000115 	stw	fp,4(sp)
 1004c1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1004c20:	00804034 	movhi	r2,256
 1004c24:	109bd804 	addi	r2,r2,28512
 1004c28:	10800017 	ldw	r2,0(r2)
 1004c2c:	1005003a 	cmpeq	r2,r2,zero
 1004c30:	1000061e 	bne	r2,zero,1004c4c <alt_get_errno+0x3c>
 1004c34:	00804034 	movhi	r2,256
 1004c38:	109bd804 	addi	r2,r2,28512
 1004c3c:	10800017 	ldw	r2,0(r2)
 1004c40:	103ee83a 	callr	r2
 1004c44:	e0bfff15 	stw	r2,-4(fp)
 1004c48:	00000306 	br	1004c58 <alt_get_errno+0x48>
 1004c4c:	00804074 	movhi	r2,257
 1004c50:	10a27204 	addi	r2,r2,-30264
 1004c54:	e0bfff15 	stw	r2,-4(fp)
 1004c58:	e0bfff17 	ldw	r2,-4(fp)
}
 1004c5c:	e037883a 	mov	sp,fp
 1004c60:	dfc00117 	ldw	ra,4(sp)
 1004c64:	df000017 	ldw	fp,0(sp)
 1004c68:	dec00204 	addi	sp,sp,8
 1004c6c:	f800283a 	ret

01004c70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1004c70:	defffa04 	addi	sp,sp,-24
 1004c74:	df000515 	stw	fp,20(sp)
 1004c78:	df000504 	addi	fp,sp,20
 1004c7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004c80:	0005303a 	rdctl	r2,status
 1004c84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004c88:	e0fffd17 	ldw	r3,-12(fp)
 1004c8c:	00bfff84 	movi	r2,-2
 1004c90:	1884703a 	and	r2,r3,r2
 1004c94:	1001703a 	wrctl	status,r2
  
  return context;
 1004c98:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1004c9c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1004ca0:	e0bfff17 	ldw	r2,-4(fp)
 1004ca4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1004ca8:	e0bffc17 	ldw	r2,-16(fp)
 1004cac:	10c00017 	ldw	r3,0(r2)
 1004cb0:	e0bffc17 	ldw	r2,-16(fp)
 1004cb4:	10800117 	ldw	r2,4(r2)
 1004cb8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1004cbc:	e0bffc17 	ldw	r2,-16(fp)
 1004cc0:	10c00117 	ldw	r3,4(r2)
 1004cc4:	e0bffc17 	ldw	r2,-16(fp)
 1004cc8:	10800017 	ldw	r2,0(r2)
 1004ccc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1004cd0:	e0fffc17 	ldw	r3,-16(fp)
 1004cd4:	e0bffc17 	ldw	r2,-16(fp)
 1004cd8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1004cdc:	e0fffc17 	ldw	r3,-16(fp)
 1004ce0:	e0bffc17 	ldw	r2,-16(fp)
 1004ce4:	18800015 	stw	r2,0(r3)
 1004ce8:	e0bffe17 	ldw	r2,-8(fp)
 1004cec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004cf0:	e0bffb17 	ldw	r2,-20(fp)
 1004cf4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1004cf8:	e037883a 	mov	sp,fp
 1004cfc:	df000017 	ldw	fp,0(sp)
 1004d00:	dec00104 	addi	sp,sp,4
 1004d04:	f800283a 	ret

01004d08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1004d08:	defffb04 	addi	sp,sp,-20
 1004d0c:	dfc00415 	stw	ra,16(sp)
 1004d10:	df000315 	stw	fp,12(sp)
 1004d14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1004d18:	d0a00c17 	ldw	r2,-32720(gp)
 1004d1c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1004d20:	d0a6a917 	ldw	r2,-25948(gp)
 1004d24:	10800044 	addi	r2,r2,1
 1004d28:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1004d2c:	00003106 	br	1004df4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1004d30:	e0bffe17 	ldw	r2,-8(fp)
 1004d34:	10800017 	ldw	r2,0(r2)
 1004d38:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1004d3c:	e0bffe17 	ldw	r2,-8(fp)
 1004d40:	10800403 	ldbu	r2,16(r2)
 1004d44:	10803fcc 	andi	r2,r2,255
 1004d48:	1005003a 	cmpeq	r2,r2,zero
 1004d4c:	1000051e 	bne	r2,zero,1004d64 <alt_tick+0x5c>
 1004d50:	d0a6a917 	ldw	r2,-25948(gp)
 1004d54:	1004c03a 	cmpne	r2,r2,zero
 1004d58:	1000021e 	bne	r2,zero,1004d64 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1004d5c:	e0bffe17 	ldw	r2,-8(fp)
 1004d60:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1004d64:	e0bffe17 	ldw	r2,-8(fp)
 1004d68:	10c00217 	ldw	r3,8(r2)
 1004d6c:	d0a6a917 	ldw	r2,-25948(gp)
 1004d70:	10c01e36 	bltu	r2,r3,1004dec <alt_tick+0xe4>
 1004d74:	e0bffe17 	ldw	r2,-8(fp)
 1004d78:	10800403 	ldbu	r2,16(r2)
 1004d7c:	10803fcc 	andi	r2,r2,255
 1004d80:	1004c03a 	cmpne	r2,r2,zero
 1004d84:	1000191e 	bne	r2,zero,1004dec <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1004d88:	e0bffe17 	ldw	r2,-8(fp)
 1004d8c:	10c00317 	ldw	r3,12(r2)
 1004d90:	e0bffe17 	ldw	r2,-8(fp)
 1004d94:	11000517 	ldw	r4,20(r2)
 1004d98:	183ee83a 	callr	r3
 1004d9c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1004da0:	e0bffd17 	ldw	r2,-12(fp)
 1004da4:	1004c03a 	cmpne	r2,r2,zero
 1004da8:	1000031e 	bne	r2,zero,1004db8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1004dac:	e13ffe17 	ldw	r4,-8(fp)
 1004db0:	1004c700 	call	1004c70 <alt_alarm_stop>
 1004db4:	00000d06 	br	1004dec <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1004db8:	e0bffe17 	ldw	r2,-8(fp)
 1004dbc:	10c00217 	ldw	r3,8(r2)
 1004dc0:	e0bffd17 	ldw	r2,-12(fp)
 1004dc4:	1887883a 	add	r3,r3,r2
 1004dc8:	e0bffe17 	ldw	r2,-8(fp)
 1004dcc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1004dd0:	e0bffe17 	ldw	r2,-8(fp)
 1004dd4:	10c00217 	ldw	r3,8(r2)
 1004dd8:	d0a6a917 	ldw	r2,-25948(gp)
 1004ddc:	1880032e 	bgeu	r3,r2,1004dec <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1004de0:	e0fffe17 	ldw	r3,-8(fp)
 1004de4:	00800044 	movi	r2,1
 1004de8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1004dec:	e0bfff17 	ldw	r2,-4(fp)
 1004df0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1004df4:	d0e00c04 	addi	r3,gp,-32720
 1004df8:	e0bffe17 	ldw	r2,-8(fp)
 1004dfc:	10ffcc1e 	bne	r2,r3,1004d30 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1004e00:	e037883a 	mov	sp,fp
 1004e04:	dfc00117 	ldw	ra,4(sp)
 1004e08:	df000017 	ldw	fp,0(sp)
 1004e0c:	dec00204 	addi	sp,sp,8
 1004e10:	f800283a 	ret

01004e14 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1004e14:	deffff04 	addi	sp,sp,-4
 1004e18:	df000015 	stw	fp,0(sp)
 1004e1c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1004e20:	000170fa 	wrctl	ienable,zero
}
 1004e24:	e037883a 	mov	sp,fp
 1004e28:	df000017 	ldw	fp,0(sp)
 1004e2c:	dec00104 	addi	sp,sp,4
 1004e30:	f800283a 	ret

01004e34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1004e34:	defff904 	addi	sp,sp,-28
 1004e38:	dfc00615 	stw	ra,24(sp)
 1004e3c:	df000515 	stw	fp,20(sp)
 1004e40:	df000504 	addi	fp,sp,20
 1004e44:	e13ffd15 	stw	r4,-12(fp)
 1004e48:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1004e4c:	e0bffe17 	ldw	r2,-8(fp)
 1004e50:	10800017 	ldw	r2,0(r2)
 1004e54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1004e58:	e13ffd17 	ldw	r4,-12(fp)
 1004e5c:	10002d40 	call	10002d4 <strlen>
 1004e60:	10800044 	addi	r2,r2,1
 1004e64:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1004e68:	00000d06 	br	1004ea0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1004e6c:	e0bffc17 	ldw	r2,-16(fp)
 1004e70:	11000217 	ldw	r4,8(r2)
 1004e74:	e1bffb17 	ldw	r6,-20(fp)
 1004e78:	e17ffd17 	ldw	r5,-12(fp)
 1004e7c:	10051040 	call	1005104 <memcmp>
 1004e80:	1004c03a 	cmpne	r2,r2,zero
 1004e84:	1000031e 	bne	r2,zero,1004e94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1004e88:	e0bffc17 	ldw	r2,-16(fp)
 1004e8c:	e0bfff15 	stw	r2,-4(fp)
 1004e90:	00000706 	br	1004eb0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1004e94:	e0bffc17 	ldw	r2,-16(fp)
 1004e98:	10800017 	ldw	r2,0(r2)
 1004e9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1004ea0:	e0fffe17 	ldw	r3,-8(fp)
 1004ea4:	e0bffc17 	ldw	r2,-16(fp)
 1004ea8:	10fff01e 	bne	r2,r3,1004e6c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1004eac:	e03fff15 	stw	zero,-4(fp)
 1004eb0:	e0bfff17 	ldw	r2,-4(fp)
}
 1004eb4:	e037883a 	mov	sp,fp
 1004eb8:	dfc00117 	ldw	ra,4(sp)
 1004ebc:	df000017 	ldw	fp,0(sp)
 1004ec0:	dec00204 	addi	sp,sp,8
 1004ec4:	f800283a 	ret

01004ec8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1004ec8:	defffa04 	addi	sp,sp,-24
 1004ecc:	dfc00515 	stw	ra,20(sp)
 1004ed0:	df000415 	stw	fp,16(sp)
 1004ed4:	df000404 	addi	fp,sp,16
 1004ed8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1004edc:	00804034 	movhi	r2,256
 1004ee0:	109bd304 	addi	r2,r2,28492
 1004ee4:	10800017 	ldw	r2,0(r2)
 1004ee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1004eec:	00003306 	br	1004fbc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1004ef0:	e0bffd17 	ldw	r2,-12(fp)
 1004ef4:	11000217 	ldw	r4,8(r2)
 1004ef8:	10002d40 	call	10002d4 <strlen>
 1004efc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1004f00:	e0bffd17 	ldw	r2,-12(fp)
 1004f04:	10c00217 	ldw	r3,8(r2)
 1004f08:	e0bffc17 	ldw	r2,-16(fp)
 1004f0c:	1885883a 	add	r2,r3,r2
 1004f10:	10bfffc4 	addi	r2,r2,-1
 1004f14:	10800003 	ldbu	r2,0(r2)
 1004f18:	10803fcc 	andi	r2,r2,255
 1004f1c:	1080201c 	xori	r2,r2,128
 1004f20:	10bfe004 	addi	r2,r2,-128
 1004f24:	10800bd8 	cmpnei	r2,r2,47
 1004f28:	1000031e 	bne	r2,zero,1004f38 <alt_find_file+0x70>
    {
      len -= 1;
 1004f2c:	e0bffc17 	ldw	r2,-16(fp)
 1004f30:	10bfffc4 	addi	r2,r2,-1
 1004f34:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1004f38:	e0bffc17 	ldw	r2,-16(fp)
 1004f3c:	1007883a 	mov	r3,r2
 1004f40:	e0bffe17 	ldw	r2,-8(fp)
 1004f44:	1885883a 	add	r2,r3,r2
 1004f48:	10800003 	ldbu	r2,0(r2)
 1004f4c:	10803fcc 	andi	r2,r2,255
 1004f50:	1080201c 	xori	r2,r2,128
 1004f54:	10bfe004 	addi	r2,r2,-128
 1004f58:	10800be0 	cmpeqi	r2,r2,47
 1004f5c:	10000a1e 	bne	r2,zero,1004f88 <alt_find_file+0xc0>
 1004f60:	e0bffc17 	ldw	r2,-16(fp)
 1004f64:	1007883a 	mov	r3,r2
 1004f68:	e0bffe17 	ldw	r2,-8(fp)
 1004f6c:	1885883a 	add	r2,r3,r2
 1004f70:	10800003 	ldbu	r2,0(r2)
 1004f74:	10803fcc 	andi	r2,r2,255
 1004f78:	1080201c 	xori	r2,r2,128
 1004f7c:	10bfe004 	addi	r2,r2,-128
 1004f80:	1004c03a 	cmpne	r2,r2,zero
 1004f84:	10000a1e 	bne	r2,zero,1004fb0 <alt_find_file+0xe8>
 1004f88:	e0bffd17 	ldw	r2,-12(fp)
 1004f8c:	11000217 	ldw	r4,8(r2)
 1004f90:	e1bffc17 	ldw	r6,-16(fp)
 1004f94:	e17ffe17 	ldw	r5,-8(fp)
 1004f98:	10051040 	call	1005104 <memcmp>
 1004f9c:	1004c03a 	cmpne	r2,r2,zero
 1004fa0:	1000031e 	bne	r2,zero,1004fb0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1004fa4:	e0bffd17 	ldw	r2,-12(fp)
 1004fa8:	e0bfff15 	stw	r2,-4(fp)
 1004fac:	00000806 	br	1004fd0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1004fb0:	e0bffd17 	ldw	r2,-12(fp)
 1004fb4:	10800017 	ldw	r2,0(r2)
 1004fb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1004fbc:	00c04034 	movhi	r3,256
 1004fc0:	18dbd304 	addi	r3,r3,28492
 1004fc4:	e0bffd17 	ldw	r2,-12(fp)
 1004fc8:	10ffc91e 	bne	r2,r3,1004ef0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1004fcc:	e03fff15 	stw	zero,-4(fp)
 1004fd0:	e0bfff17 	ldw	r2,-4(fp)
}
 1004fd4:	e037883a 	mov	sp,fp
 1004fd8:	dfc00117 	ldw	ra,4(sp)
 1004fdc:	df000017 	ldw	fp,0(sp)
 1004fe0:	dec00204 	addi	sp,sp,8
 1004fe4:	f800283a 	ret

01004fe8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1004fe8:	defffa04 	addi	sp,sp,-24
 1004fec:	dfc00515 	stw	ra,20(sp)
 1004ff0:	df000415 	stw	fp,16(sp)
 1004ff4:	dc000315 	stw	r16,12(sp)
 1004ff8:	df000304 	addi	fp,sp,12
 1004ffc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1005000:	00bffa04 	movi	r2,-24
 1005004:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1005008:	e03ffe15 	stw	zero,-8(fp)
 100500c:	00002006 	br	1005090 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1005010:	e13ffe17 	ldw	r4,-8(fp)
 1005014:	04004034 	movhi	r16,256
 1005018:	84175704 	addi	r16,r16,23900
 100501c:	01400304 	movi	r5,12
 1005020:	1002b640 	call	1002b64 <__mulsi3>
 1005024:	1405883a 	add	r2,r2,r16
 1005028:	10800017 	ldw	r2,0(r2)
 100502c:	1004c03a 	cmpne	r2,r2,zero
 1005030:	1000141e 	bne	r2,zero,1005084 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1005034:	e13ffe17 	ldw	r4,-8(fp)
 1005038:	04004034 	movhi	r16,256
 100503c:	84175704 	addi	r16,r16,23900
 1005040:	01400304 	movi	r5,12
 1005044:	1002b640 	call	1002b64 <__mulsi3>
 1005048:	1407883a 	add	r3,r2,r16
 100504c:	e0bfff17 	ldw	r2,-4(fp)
 1005050:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1005054:	00804034 	movhi	r2,256
 1005058:	109bd704 	addi	r2,r2,28508
 100505c:	10c00017 	ldw	r3,0(r2)
 1005060:	e0bffe17 	ldw	r2,-8(fp)
 1005064:	1880040e 	bge	r3,r2,1005078 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1005068:	00c04034 	movhi	r3,256
 100506c:	18dbd704 	addi	r3,r3,28508
 1005070:	e0bffe17 	ldw	r2,-8(fp)
 1005074:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1005078:	e0bffe17 	ldw	r2,-8(fp)
 100507c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1005080:	00000606 	br	100509c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1005084:	e0bffe17 	ldw	r2,-8(fp)
 1005088:	10800044 	addi	r2,r2,1
 100508c:	e0bffe15 	stw	r2,-8(fp)
 1005090:	e0bffe17 	ldw	r2,-8(fp)
 1005094:	10800810 	cmplti	r2,r2,32
 1005098:	103fdd1e 	bne	r2,zero,1005010 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100509c:	e0bffd17 	ldw	r2,-12(fp)
}
 10050a0:	e037883a 	mov	sp,fp
 10050a4:	dfc00217 	ldw	ra,8(sp)
 10050a8:	df000117 	ldw	fp,4(sp)
 10050ac:	dc000017 	ldw	r16,0(sp)
 10050b0:	dec00304 	addi	sp,sp,12
 10050b4:	f800283a 	ret

010050b8 <atexit>:
 10050b8:	200b883a 	mov	r5,r4
 10050bc:	000d883a 	mov	r6,zero
 10050c0:	0009883a 	mov	r4,zero
 10050c4:	000f883a 	mov	r7,zero
 10050c8:	10051781 	jmpi	1005178 <__register_exitproc>

010050cc <exit>:
 10050cc:	defffe04 	addi	sp,sp,-8
 10050d0:	000b883a 	mov	r5,zero
 10050d4:	dc000015 	stw	r16,0(sp)
 10050d8:	dfc00115 	stw	ra,4(sp)
 10050dc:	2021883a 	mov	r16,r4
 10050e0:	10052b00 	call	10052b0 <__call_exitprocs>
 10050e4:	00804034 	movhi	r2,256
 10050e8:	109bd004 	addi	r2,r2,28480
 10050ec:	11000017 	ldw	r4,0(r2)
 10050f0:	20800f17 	ldw	r2,60(r4)
 10050f4:	10000126 	beq	r2,zero,10050fc <exit+0x30>
 10050f8:	103ee83a 	callr	r2
 10050fc:	8009883a 	mov	r4,r16
 1005100:	10054a00 	call	10054a0 <_exit>

01005104 <memcmp>:
 1005104:	00c000c4 	movi	r3,3
 1005108:	1980032e 	bgeu	r3,r6,1005118 <memcmp+0x14>
 100510c:	2144b03a 	or	r2,r4,r5
 1005110:	10c4703a 	and	r2,r2,r3
 1005114:	10000f26 	beq	r2,zero,1005154 <memcmp+0x50>
 1005118:	31ffffc4 	addi	r7,r6,-1
 100511c:	3000061e 	bne	r6,zero,1005138 <memcmp+0x34>
 1005120:	00000a06 	br	100514c <memcmp+0x48>
 1005124:	39ffffc4 	addi	r7,r7,-1
 1005128:	00bfffc4 	movi	r2,-1
 100512c:	21000044 	addi	r4,r4,1
 1005130:	29400044 	addi	r5,r5,1
 1005134:	38800526 	beq	r7,r2,100514c <memcmp+0x48>
 1005138:	20c00003 	ldbu	r3,0(r4)
 100513c:	28800003 	ldbu	r2,0(r5)
 1005140:	18bff826 	beq	r3,r2,1005124 <memcmp+0x20>
 1005144:	1885c83a 	sub	r2,r3,r2
 1005148:	f800283a 	ret
 100514c:	0005883a 	mov	r2,zero
 1005150:	f800283a 	ret
 1005154:	180f883a 	mov	r7,r3
 1005158:	20c00017 	ldw	r3,0(r4)
 100515c:	28800017 	ldw	r2,0(r5)
 1005160:	18bfed1e 	bne	r3,r2,1005118 <memcmp+0x14>
 1005164:	31bfff04 	addi	r6,r6,-4
 1005168:	21000104 	addi	r4,r4,4
 100516c:	29400104 	addi	r5,r5,4
 1005170:	39bff936 	bltu	r7,r6,1005158 <memcmp+0x54>
 1005174:	003fe806 	br	1005118 <memcmp+0x14>

01005178 <__register_exitproc>:
 1005178:	defffa04 	addi	sp,sp,-24
 100517c:	00804034 	movhi	r2,256
 1005180:	109bd004 	addi	r2,r2,28480
 1005184:	dc000015 	stw	r16,0(sp)
 1005188:	14000017 	ldw	r16,0(r2)
 100518c:	dd000415 	stw	r20,16(sp)
 1005190:	2829883a 	mov	r20,r5
 1005194:	81405217 	ldw	r5,328(r16)
 1005198:	dcc00315 	stw	r19,12(sp)
 100519c:	dc800215 	stw	r18,8(sp)
 10051a0:	dc400115 	stw	r17,4(sp)
 10051a4:	dfc00515 	stw	ra,20(sp)
 10051a8:	2023883a 	mov	r17,r4
 10051ac:	3027883a 	mov	r19,r6
 10051b0:	3825883a 	mov	r18,r7
 10051b4:	28002526 	beq	r5,zero,100524c <__register_exitproc+0xd4>
 10051b8:	29000117 	ldw	r4,4(r5)
 10051bc:	008007c4 	movi	r2,31
 10051c0:	11002716 	blt	r2,r4,1005260 <__register_exitproc+0xe8>
 10051c4:	8800101e 	bne	r17,zero,1005208 <__register_exitproc+0x90>
 10051c8:	2105883a 	add	r2,r4,r4
 10051cc:	1085883a 	add	r2,r2,r2
 10051d0:	20c00044 	addi	r3,r4,1
 10051d4:	1145883a 	add	r2,r2,r5
 10051d8:	0009883a 	mov	r4,zero
 10051dc:	15000215 	stw	r20,8(r2)
 10051e0:	28c00115 	stw	r3,4(r5)
 10051e4:	2005883a 	mov	r2,r4
 10051e8:	dfc00517 	ldw	ra,20(sp)
 10051ec:	dd000417 	ldw	r20,16(sp)
 10051f0:	dcc00317 	ldw	r19,12(sp)
 10051f4:	dc800217 	ldw	r18,8(sp)
 10051f8:	dc400117 	ldw	r17,4(sp)
 10051fc:	dc000017 	ldw	r16,0(sp)
 1005200:	dec00604 	addi	sp,sp,24
 1005204:	f800283a 	ret
 1005208:	29802204 	addi	r6,r5,136
 100520c:	00800044 	movi	r2,1
 1005210:	110e983a 	sll	r7,r2,r4
 1005214:	30c04017 	ldw	r3,256(r6)
 1005218:	2105883a 	add	r2,r4,r4
 100521c:	1085883a 	add	r2,r2,r2
 1005220:	1185883a 	add	r2,r2,r6
 1005224:	19c6b03a 	or	r3,r3,r7
 1005228:	14802015 	stw	r18,128(r2)
 100522c:	14c00015 	stw	r19,0(r2)
 1005230:	00800084 	movi	r2,2
 1005234:	30c04015 	stw	r3,256(r6)
 1005238:	88bfe31e 	bne	r17,r2,10051c8 <__register_exitproc+0x50>
 100523c:	30804117 	ldw	r2,260(r6)
 1005240:	11c4b03a 	or	r2,r2,r7
 1005244:	30804115 	stw	r2,260(r6)
 1005248:	003fdf06 	br	10051c8 <__register_exitproc+0x50>
 100524c:	00804074 	movhi	r2,257
 1005250:	10a2c304 	addi	r2,r2,-29940
 1005254:	100b883a 	mov	r5,r2
 1005258:	80805215 	stw	r2,328(r16)
 100525c:	003fd606 	br	10051b8 <__register_exitproc+0x40>
 1005260:	00800034 	movhi	r2,0
 1005264:	10800004 	addi	r2,r2,0
 1005268:	1000021e 	bne	r2,zero,1005274 <__register_exitproc+0xfc>
 100526c:	013fffc4 	movi	r4,-1
 1005270:	003fdc06 	br	10051e4 <__register_exitproc+0x6c>
 1005274:	01006404 	movi	r4,400
 1005278:	103ee83a 	callr	r2
 100527c:	1007883a 	mov	r3,r2
 1005280:	103ffa26 	beq	r2,zero,100526c <__register_exitproc+0xf4>
 1005284:	80805217 	ldw	r2,328(r16)
 1005288:	180b883a 	mov	r5,r3
 100528c:	18000115 	stw	zero,4(r3)
 1005290:	18800015 	stw	r2,0(r3)
 1005294:	80c05215 	stw	r3,328(r16)
 1005298:	18006215 	stw	zero,392(r3)
 100529c:	18006315 	stw	zero,396(r3)
 10052a0:	0009883a 	mov	r4,zero
 10052a4:	883fc826 	beq	r17,zero,10051c8 <__register_exitproc+0x50>
 10052a8:	003fd706 	br	1005208 <__register_exitproc+0x90>

010052ac <register_fini>:
 10052ac:	f800283a 	ret

010052b0 <__call_exitprocs>:
 10052b0:	00804034 	movhi	r2,256
 10052b4:	109bd004 	addi	r2,r2,28480
 10052b8:	10800017 	ldw	r2,0(r2)
 10052bc:	defff304 	addi	sp,sp,-52
 10052c0:	df000b15 	stw	fp,44(sp)
 10052c4:	d8800115 	stw	r2,4(sp)
 10052c8:	00800034 	movhi	r2,0
 10052cc:	10800004 	addi	r2,r2,0
 10052d0:	1005003a 	cmpeq	r2,r2,zero
 10052d4:	d8800215 	stw	r2,8(sp)
 10052d8:	d8800117 	ldw	r2,4(sp)
 10052dc:	dd400815 	stw	r21,32(sp)
 10052e0:	dd000715 	stw	r20,28(sp)
 10052e4:	10805204 	addi	r2,r2,328
 10052e8:	dfc00c15 	stw	ra,48(sp)
 10052ec:	ddc00a15 	stw	r23,40(sp)
 10052f0:	dd800915 	stw	r22,36(sp)
 10052f4:	dcc00615 	stw	r19,24(sp)
 10052f8:	dc800515 	stw	r18,20(sp)
 10052fc:	dc400415 	stw	r17,16(sp)
 1005300:	dc000315 	stw	r16,12(sp)
 1005304:	282b883a 	mov	r21,r5
 1005308:	2039883a 	mov	fp,r4
 100530c:	d8800015 	stw	r2,0(sp)
 1005310:	2829003a 	cmpeq	r20,r5,zero
 1005314:	d8800117 	ldw	r2,4(sp)
 1005318:	14405217 	ldw	r17,328(r2)
 100531c:	88001026 	beq	r17,zero,1005360 <__call_exitprocs+0xb0>
 1005320:	ddc00017 	ldw	r23,0(sp)
 1005324:	88800117 	ldw	r2,4(r17)
 1005328:	8c802204 	addi	r18,r17,136
 100532c:	143fffc4 	addi	r16,r2,-1
 1005330:	80000916 	blt	r16,zero,1005358 <__call_exitprocs+0xa8>
 1005334:	05bfffc4 	movi	r22,-1
 1005338:	a000151e 	bne	r20,zero,1005390 <__call_exitprocs+0xe0>
 100533c:	8409883a 	add	r4,r16,r16
 1005340:	2105883a 	add	r2,r4,r4
 1005344:	1485883a 	add	r2,r2,r18
 1005348:	10c02017 	ldw	r3,128(r2)
 100534c:	a8c01126 	beq	r21,r3,1005394 <__call_exitprocs+0xe4>
 1005350:	843fffc4 	addi	r16,r16,-1
 1005354:	85bff81e 	bne	r16,r22,1005338 <__call_exitprocs+0x88>
 1005358:	d8800217 	ldw	r2,8(sp)
 100535c:	10003126 	beq	r2,zero,1005424 <__call_exitprocs+0x174>
 1005360:	dfc00c17 	ldw	ra,48(sp)
 1005364:	df000b17 	ldw	fp,44(sp)
 1005368:	ddc00a17 	ldw	r23,40(sp)
 100536c:	dd800917 	ldw	r22,36(sp)
 1005370:	dd400817 	ldw	r21,32(sp)
 1005374:	dd000717 	ldw	r20,28(sp)
 1005378:	dcc00617 	ldw	r19,24(sp)
 100537c:	dc800517 	ldw	r18,20(sp)
 1005380:	dc400417 	ldw	r17,16(sp)
 1005384:	dc000317 	ldw	r16,12(sp)
 1005388:	dec00d04 	addi	sp,sp,52
 100538c:	f800283a 	ret
 1005390:	8409883a 	add	r4,r16,r16
 1005394:	88c00117 	ldw	r3,4(r17)
 1005398:	2105883a 	add	r2,r4,r4
 100539c:	1445883a 	add	r2,r2,r17
 10053a0:	18ffffc4 	addi	r3,r3,-1
 10053a4:	11800217 	ldw	r6,8(r2)
 10053a8:	1c001526 	beq	r3,r16,1005400 <__call_exitprocs+0x150>
 10053ac:	10000215 	stw	zero,8(r2)
 10053b0:	303fe726 	beq	r6,zero,1005350 <__call_exitprocs+0xa0>
 10053b4:	00c00044 	movi	r3,1
 10053b8:	1c06983a 	sll	r3,r3,r16
 10053bc:	90804017 	ldw	r2,256(r18)
 10053c0:	8cc00117 	ldw	r19,4(r17)
 10053c4:	1884703a 	and	r2,r3,r2
 10053c8:	10001426 	beq	r2,zero,100541c <__call_exitprocs+0x16c>
 10053cc:	90804117 	ldw	r2,260(r18)
 10053d0:	1884703a 	and	r2,r3,r2
 10053d4:	10000c1e 	bne	r2,zero,1005408 <__call_exitprocs+0x158>
 10053d8:	2105883a 	add	r2,r4,r4
 10053dc:	1485883a 	add	r2,r2,r18
 10053e0:	11400017 	ldw	r5,0(r2)
 10053e4:	e009883a 	mov	r4,fp
 10053e8:	303ee83a 	callr	r6
 10053ec:	88800117 	ldw	r2,4(r17)
 10053f0:	98bfc81e 	bne	r19,r2,1005314 <__call_exitprocs+0x64>
 10053f4:	b8800017 	ldw	r2,0(r23)
 10053f8:	147fd526 	beq	r2,r17,1005350 <__call_exitprocs+0xa0>
 10053fc:	003fc506 	br	1005314 <__call_exitprocs+0x64>
 1005400:	8c000115 	stw	r16,4(r17)
 1005404:	003fea06 	br	10053b0 <__call_exitprocs+0x100>
 1005408:	2105883a 	add	r2,r4,r4
 100540c:	1485883a 	add	r2,r2,r18
 1005410:	11000017 	ldw	r4,0(r2)
 1005414:	303ee83a 	callr	r6
 1005418:	003ff406 	br	10053ec <__call_exitprocs+0x13c>
 100541c:	303ee83a 	callr	r6
 1005420:	003ff206 	br	10053ec <__call_exitprocs+0x13c>
 1005424:	88800117 	ldw	r2,4(r17)
 1005428:	1000081e 	bne	r2,zero,100544c <__call_exitprocs+0x19c>
 100542c:	89000017 	ldw	r4,0(r17)
 1005430:	20000726 	beq	r4,zero,1005450 <__call_exitprocs+0x1a0>
 1005434:	b9000015 	stw	r4,0(r23)
 1005438:	8809883a 	mov	r4,r17
 100543c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1005440:	bc400017 	ldw	r17,0(r23)
 1005444:	883fb71e 	bne	r17,zero,1005324 <__call_exitprocs+0x74>
 1005448:	003fc506 	br	1005360 <__call_exitprocs+0xb0>
 100544c:	89000017 	ldw	r4,0(r17)
 1005450:	882f883a 	mov	r23,r17
 1005454:	2023883a 	mov	r17,r4
 1005458:	883fb21e 	bne	r17,zero,1005324 <__call_exitprocs+0x74>
 100545c:	003fc006 	br	1005360 <__call_exitprocs+0xb0>

01005460 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1005460:	defffd04 	addi	sp,sp,-12
 1005464:	df000215 	stw	fp,8(sp)
 1005468:	df000204 	addi	fp,sp,8
 100546c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1005470:	e0bfff17 	ldw	r2,-4(fp)
 1005474:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1005478:	e0bffe17 	ldw	r2,-8(fp)
 100547c:	1005003a 	cmpeq	r2,r2,zero
 1005480:	1000021e 	bne	r2,zero,100548c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1005484:	002af070 	cmpltui	zero,zero,43969
 1005488:	00000106 	br	1005490 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100548c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1005490:	e037883a 	mov	sp,fp
 1005494:	df000017 	ldw	fp,0(sp)
 1005498:	dec00104 	addi	sp,sp,4
 100549c:	f800283a 	ret

010054a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10054a0:	defffd04 	addi	sp,sp,-12
 10054a4:	dfc00215 	stw	ra,8(sp)
 10054a8:	df000115 	stw	fp,4(sp)
 10054ac:	df000104 	addi	fp,sp,4
 10054b0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 10054b4:	e13fff17 	ldw	r4,-4(fp)
 10054b8:	10054600 	call	1005460 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10054bc:	003fff06 	br	10054bc <_exit+0x1c>
 10054c0:	010052ac 	andhi	r4,zero,330
